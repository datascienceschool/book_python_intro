[
  {
    "objectID": "05.05 판다스의 시각화 기능.html",
    "href": "05.05 판다스의 시각화 기능.html",
    "title": "Pandas의 시각화 기능",
    "section": "",
    "text": "Pandas의 시리즈나 데이터프레임은 plot이라는 시각화 메서드를 내장하고 있다. plot은 matplotlib를 내부에서 임포트하여 사용한다.\n\nnp.random.seed(0)\ndf1 = pd.DataFrame(np.random.randn(100, 3),\n                   index=pd.date_range('1/1/2018', periods=100),\n                   columns=['A', 'B', 'C']).cumsum()\ndf1.tail()\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n2018-04-06\n9.396256\n6.282026\n-11.198087\n\n\n2018-04-07\n10.086074\n7.583872\n-11.826175\n\n\n2018-04-08\n9.605047\n9.887789\n-12.886190\n\n\n2018-04-09\n9.469097\n11.024680\n-12.788465\n\n\n2018-04-10\n10.052051\n10.625231\n-12.418409\n\n\n\n\n\n\n\n\ndf1.plot()\nplt.title(\"Pandas의 Plot메소드 사용 예\")\nplt.xlabel(\"시간\")\nplt.ylabel(\"Data\")\nplt.show()\n\n\n\n\n\n\n\n\nplot 메서드의 kind라는 인수를 바꾸면 여러가지 플롯을 그릴 수 있다. 다음과 같은 인수값을 지원한다.\n\nbar\npie\nhist\nkde\nbox\nscatter\narea\n\n\niris = sns.load_dataset(\"iris\")    # 붓꽃 데이터\ntitanic = sns.load_dataset(\"titanic\")    # 타이타닉호 데이터\n\niris.sepal_length[:20].plot(kind='bar', rot=0)\nplt.title(\"꽃받침의 길이 시각화\")\nplt.xlabel(\"Data\")\nplt.ylabel(\"꽃받침의 길이\")\nplt.show()\n\n\n\n\n\n\n\n\nkind 인수에 문자열을 쓰는 대신 plot.bar처럼 직접 메서드로 사용할 수도 있다.\n\niris[:5].plot.bar(rot=0)\nplt.title(\"Iris 데이터의 Bar Plot\")\nplt.xlabel(\"Data\")\nplt.ylabel(\"각 Feature의 값\")\nplt.ylim(0, 7)\nplt.show()\n\n\n\n\n\n\n\n\n다음은 그룹분석으로 각 붓꽃종의 특징값의 평균을 구한 것이다.\n\ndf2 = iris.groupby(iris.species).mean()\ndf2.columns.name = \"feature\"\ndf2\n\n\n\n\n\n\n\nfeature\nsepal_length\nsepal_width\npetal_length\npetal_width\n\n\nspecies\n\n\n\n\n\n\n\n\nsetosa\n5.006\n3.428\n1.462\n0.246\n\n\nversicolor\n5.936\n2.770\n4.260\n1.326\n\n\nvirginica\n6.588\n2.974\n5.552\n2.026\n\n\n\n\n\n\n\n그룹분석 결과도 데이터프레임이므로 같은 방식으로 시각화할 수 있다.\n\ndf2.plot.bar(rot=0)\nplt.title(\"각 종의 Feature별 평균\")\nplt.xlabel(\"평균\")\nplt.ylabel(\"종\")\nplt.ylim(0, 8)\nplt.show()\n\n\n\n\n\n\n\n\n전치연산으로 시각화 방법을 다르게 할 수도 있다.\n\ndf2.T.plot.bar(rot=0)\nplt.title(\"각 Feature의 종 별 평균\")\nplt.xlabel(\"Feature\")\nplt.ylabel(\"평균\")\nplt.show()\n\n\n\n\n\n\n\n\n다음은 pie, hist, kde, box, scatter 플롯 예제이다.\n\ndf3 = titanic.pclass.value_counts()\ndf3.plot.pie(autopct='%.2f%%')\nplt.title(\"선실별 승객 수 비율\")\nplt.axis('equal')\nplt.show()\n\n\n\n\n\n\n\n\n\niris.plot.hist()\nplt.title(\"각 Feature 값들의 빈도수 Histogram\")\nplt.xlabel(\"데이터 값\")\nplt.show()\n\n\n\n\n\n\n\n\n\niris.plot.kde()\nplt.title(\"각 Feature 값들의 빈도수에 대한 Kernel Density Plot\")\nplt.xlabel(\"데이터 값\")\nplt.show()\n\n\n\n\n\n\n\n\n\niris.plot.box()\nplt.title(\"각 Feature 값들의 빈도수에 대한 Box Plot\")\nplt.xlabel(\"Feature\")\nplt.ylabel(\"데이터 값\")\nplt.show()\n\n\n\n\n\n\n\n\n박스플롯에 대해서는 추가적인 기능을 가진 boxplot 명령이 별도로 있다.\n\niris.boxplot(by='species')\nplt.tight_layout(pad=3, h_pad=1)\nplt.title(\"각 Feature의 종 별 데이터에 대한 Box Plot\")\nplt.show()"
  },
  {
    "objectID": "05.03 맷플롯리브의 삼각 그리드 사용법.html",
    "href": "05.03 맷플롯리브의 삼각 그리드 사용법.html",
    "title": "Matplotlib의 triangular grid 사용법",
    "section": "",
    "text": "Matplotlib 버전 1.3부터는 삼각 그리드(triangular grid)에 대한 지원이 추가되었다. 삼각 그리드를 사용하연 기존의 사각형 영역 뿐 아니라 임의의 영역에 대해서 컨투어 플롯이나 서피스 플롯을 그릴 수 있으므로 정의역(domain)이 직사각형이 아닌 2차원 함수도 시각화 할 수 있다."
  },
  {
    "objectID": "05.03 맷플롯리브의 삼각 그리드 사용법.html#패키지",
    "href": "05.03 맷플롯리브의 삼각 그리드 사용법.html#패키지",
    "title": "Matplotlib의 triangular grid 사용법",
    "section": "패키지",
    "text": "패키지\n삼각 그리드 지원을 위한 코드 중 일부는 tri 서브 패키지 아래에 있으므로 미리 임포트한다.\n\nimport matplotlib.tri as mtri"
  },
  {
    "objectID": "05.03 맷플롯리브의 삼각 그리드 사용법.html#삼각-그리드-클래스",
    "href": "05.03 맷플롯리브의 삼각 그리드 사용법.html#삼각-그리드-클래스",
    "title": "Matplotlib의 triangular grid 사용법",
    "section": "삼각 그리드 클래스",
    "text": "삼각 그리드 클래스\n삼각 그리드 지원을 위한 클래스는 다음과 같다.\n\n삼각 그리드 생성\n\nTriangulation\n\nhttp://matplotlib.org/api/tri_api.html?highlight=triangulation#matplotlib.tri.Triangulation\n\n\n삼각 그리드 세분화\n\nTriRefiner\n\nhttp://matplotlib.org/api/tri_api.html?highlight=triangulation#matplotlib.tri.TriRefiner\n\nUniformTriRefiner\n\nhttp://matplotlib.org/api/tri_api.html?highlight=triangulation#matplotlib.tri.UniformTriRefiner\n\n\n삼각 그리드 플롯\n\ntriplot\n\nhttp://matplotlib.org/api/pyplot_api.html?#matplotlib.pyplot.triplot\n\ntricontour\n\nhttp://matplotlib.org/api/pyplot_api.html?#matplotlib.pyplot.tricontour\n\n\ntricontourf\n\nhttp://matplotlib.org/api/pyplot_api.html?#matplotlib.pyplot.tricontourf\n\n\ntripcolor\n\nhttp://matplotlib.org/api/pyplot_api.html?#matplotlib.pyplot.tripcolor\n\n\n삼각 그리드 보간\n\nTriInterpolator\n\nhttp://matplotlib.org/api/tri_api.html?highlight=triangulation#matplotlib.tri.TriInterpolator\n\nLinearTriInterpolator\n\nhttp://matplotlib.org/api/tri_api.html?highlight=triangulation#matplotlib.tri.LinearTriInterpolator\n\nCubicTriInterpolator\n\nhttp://matplotlib.org/api/tri_api.html?highlight=triangulation#matplotlib.tri.CubicTriInterpolator"
  },
  {
    "objectID": "05.03 맷플롯리브의 삼각 그리드 사용법.html#삼각-그리드-생성",
    "href": "05.03 맷플롯리브의 삼각 그리드 사용법.html#삼각-그리드-생성",
    "title": "Matplotlib의 triangular grid 사용법",
    "section": "삼각 그리드 생성",
    "text": "삼각 그리드 생성\n삼각 그리드는 Triangulation 클래스로 생성한다. Triangulation 클래스는 x. y, triangles 세 개의 인수를 받는데 x, y는 일련의 점들의 x좌표와 y좌표를 나타내는 1차원 벡터들이고 triangles는 이 점들에 대한 기하학적 위상 정보 즉, 어떤 삼각형이 있으며 각 삼각형이 어떤 점들로 이루어져있는가를 보인다. 만약 triangles가 주어지지 않으면 자동으로 생성한다.\n\nx = np.array([0, 1, 2])\ny = np.array([0, np.sqrt(3), 0])\ntriangles = [[0, 1, 2]]\ntriang = mtri.Triangulation(x, y, triangles)\nplt.title(\"삼각 그리드\")\nplt.triplot(triang, 'ko-')\nplt.xlim(-0.1, 2.1)\nplt.ylim(-0.1, 1.8)\nplt.show()\n\n\n\n\n\n\n\n\n\nx = np.asarray([0, 1, 2, 3, 4, 2])\ny = np.asarray([0, np.sqrt(3), 0, np.sqrt(3), 0, 2*np.sqrt(3)])\ntriangles = [[0, 1, 2], [2, 3, 4], [1, 2, 3], [1, 3, 5]]\ntriang = mtri.Triangulation(x, y, triangles)\nplt.title(\"여러개의 삼각형 그리기\")\nplt.triplot(triang, 'ko-')\nplt.xlim(-0.1, 4.1)\nplt.ylim(-0.1, 3.7)\nplt.show()"
  },
  {
    "objectID": "05.03 맷플롯리브의 삼각 그리드 사용법.html#그리드-세분화",
    "href": "05.03 맷플롯리브의 삼각 그리드 사용법.html#그리드-세분화",
    "title": "Matplotlib의 triangular grid 사용법",
    "section": "그리드 세분화",
    "text": "그리드 세분화\n그리드를 더 세분화하려면 TriRefiner 또는 UniformTriRefiner를 사용한다. 이 클래스들은 다음과 같은 메서드를 가진다.\n\nrefine_triangulation : 단순히 삼각 그리드를 세분화\n\nhttp://matplotlib.org/api/tri_api.html#matplotlib.tri.UniformTriRefiner.refine_triangulation\n\nrefine_field : 실제 함수 값에 대해 최적화된 삼각 그리드 생성\n\nhttp://matplotlib.org/api/tri_api.html#matplotlib.tri.UniformTriRefiner.refine_field\n\n\n\nrefiner = mtri.UniformTriRefiner(triang)\ntriang2 = refiner.refine_triangulation(subdiv=2)\nplt.title(\"그리드 세분화\")\nplt.triplot(triang2, 'ko-')\nplt.xlim(-0.1, 4.1)\nplt.ylim(-0.1, 3.7)\nplt.show()"
  },
  {
    "objectID": "05.03 맷플롯리브의 삼각 그리드 사용법.html#그리드-플롯",
    "href": "05.03 맷플롯리브의 삼각 그리드 사용법.html#그리드-플롯",
    "title": "Matplotlib의 triangular grid 사용법",
    "section": "그리드 플롯",
    "text": "그리드 플롯\n이렇게 만들어진 그리드상에 tricontour, tricontourf, plot_trisur, plot_trisurf 등의 명령을 사용하여 2차원 등고선(coutour) 플롯이나 3차원 표면(surface) 플롯을 그릴 수 있다.\n\ntriang5 = refiner.refine_triangulation(subdiv=5)\nz5 = np.cos(1.5*triang5.x)*np.cos(1.5*triang5.y)\nplt.title(\"삼각 그리드에서의 3차원 데이터 시각화\")\nplt.tricontourf(triang5, z5, cmap=\"gray\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\n\ntriang3 = refiner.refine_triangulation(subdiv=3)\nz3 = np.cos(1.5 * triang3.x) * np.cos(1.5 * triang3.y)\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.set_title(\"삼각 그리드에서의 3D Surface Plot\")\nax.plot_trisurf(triang3.x, triang3.y, z3, cmap=cm.jet, linewidth=0.2)\nax.tricontourf(triang3, z3, zdir='z', offset=-1.2, cmap=cm.coolwarm)\nax.set_zlim(-1, 1)\nax.view_init(40, -40)\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "",
    "text": "맷플롯리브(Matplotlib)는 파이썬에서 자료를 차트(chart)나 플롯(plot)으로 시각화하는 패키지이다. 맷플롯리브는 다음과 같은 정형화된 차트나 플롯 이외에도 저수준 API를 사용한 다양한 시각화 기능을 제공한다.\n맷플롯리브를 사용한 시각화 예제들을 보고 싶다면 맷플롯리브 갤러리 웹사이트를 방문한다."
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#pyplot-서브패키지",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#pyplot-서브패키지",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "pyplot 서브패키지",
    "text": "pyplot 서브패키지\npyplot 서브패키지\n맷플롯리브 패키지에는 pyplot 라는 서브패키지가 존재한다. 이 pyplot 서브패키지는 매트랩(matlab) 이라는 수치해석 소프트웨어의 시각화 명령을 거의 그대로 사용할 수 있도록 맷플롯리브 의 하위 API를 포장(wrapping)한 명령어 집합을 제공한다. 간단한 시각화 프로그램을 만드는 경우에는 pyplot 서브패키지의 명령만으로도 충분하다. 다음에 설명할 명령어들도 별도의 설명이 없으면 pyplot 패키지의 명령라고 생각하면 된다.\n맷플롯리브 패키지를 사용할 때는 보통 다음과 같이 주 패키지는 mpl 이라는 별칭(alias)으로 임포트하고 pyplot 서브패키지는 plt 라는 다른 별칭으로 임포트하여 사용하는 것이 관례이므로 여기에서도 이러한 방법을 사용한다.\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n`%matplotlib`\n주피터 노트북을 사용하는 경우에는 다음처럼 %matplotlib 매직(magic) 명령으로 노트북 내부에 그림을 표시하도록 지정해야 한다.\n%matplotlib inline"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#라인-플롯",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#라인-플롯",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "라인 플롯",
    "text": "라인 플롯\n`plot`\n가장 간단한 플롯은 선을 그리는 라인 플롯(line plot)이다. 라인 플롯은 데이터가 시간, 순서 등에 따라 어떻게 변화하는지 보여주기 위해 사용한다.\n명령은 pyplot 서브패키지의 plot 명령을 사용한다.\n\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot\n\n만약 데이터가 1, 4, 9, 16 으로 변화하였다면 다음과 같이 plot 명령에 데이터 리스트 혹은 ndarray 객체를 넘긴다.\n\nplt.title(\"Plot\")\nplt.plot([1, 4, 9, 16])\nplt.show()\n\n\n\n\n\n\n\n\n이 때 x 축의 자료 위치 즉, 틱(tick)은 자동으로 0, 1, 2, 3 이 된다. 만약 이 x tick 위치를 별도로 명시하고 싶다면 다음과 같이 두 개의 같은 길이의 리스트 혹은 배열 자료를 넣는다.\n`title`\ntitle 함수는 제목을 표시한다.\n`show`\nshow 함수는 시각화 명령을 실제로 차트로 렌더링(rendering)하고 마우스 움직임 등의 이벤트를 기다리라는 지시이다. 주피터 노트북에서는 셀 단위로 플롯 명령을 자동 렌더링 해주므로 show 명령이 필요없지만 일반 파이썬 인터프리터로 가동되는 경우를 대비하여 항상 마지막에 실행하도록 한다. show 명령을 주면 마지막 플롯 명령으로부터 반환된 플롯 객체의 표현도 가려주는 효과가 있다.\n\nplt.title(\"x ticks\")\nplt.plot([10, 20, 30, 40], [1, 4, 9, 16])\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#한글폰트-사용",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#한글폰트-사용",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "한글폰트 사용",
    "text": "한글폰트 사용\n맷플롯리브에서 한글을 사용하려면 다음과 같이 한글 폰트를 적용해야 한다. 당연히 해당 폰트는 컴퓨터에 깔려 있어야 한다. 여기에서는 나눔고딕 폰트를 사용하였다. 나눔고딕 폰트 설치법은 다음과 같다.\n\n윈도우/맥\n\nhttp://hangeul.naver.com/2017/nanum 에서 폰트 인스톨러를 내려받아 실행한다.\n\n리눅스\n\n콘솔에서 다음과 같이 실행한다.\n\n\nsudo apt install -y fonts-nanum*\nsudo fc-cache -fv\nrm ~/.cache/matplotlib -rf\n폰트를 설치한 후에는 다음 명령으로 원하는 폰트가 설치되어 있는지 확인한다.\n\nimport matplotlib.font_manager\n\nmatplotlib.font_manager._rebuild()\nsorted([f.name for f in matplotlib.font_manager.fontManager.ttflist if f.name.startswith(\"Nanum\")])\n\n['Nanum Brush Script',\n 'Nanum Pen Script',\n 'NanumBarunGothic',\n 'NanumBarunGothic',\n 'NanumBarunGothic',\n 'NanumBarunGothic',\n 'NanumBarunpen',\n 'NanumBarunpen',\n 'NanumGothic',\n 'NanumGothic',\n 'NanumGothic',\n 'NanumGothic',\n 'NanumGothic Eco',\n 'NanumGothic Eco',\n 'NanumGothic Eco',\n 'NanumGothicCoding',\n 'NanumGothicCoding',\n 'NanumMyeongjo',\n 'NanumMyeongjo',\n 'NanumMyeongjo',\n 'NanumMyeongjo Eco',\n 'NanumMyeongjo Eco',\n 'NanumMyeongjo Eco',\n 'NanumSquare',\n 'NanumSquare',\n 'NanumSquare',\n 'NanumSquare',\n 'NanumSquareRound',\n 'NanumSquareRound',\n 'NanumSquareRound',\n 'NanumSquareRound']\n\n\n설치된 폰트를 사용하는 방법은 크게 두가지 이다.\n\nrc parameter 설정으로 이후의 그림 전체에 적용\n인수를 사용하여 개별 텍스트 관련 명령에만 적용\n\n한글 문자열은 항상 유니코드를 사용해야 한다.\n우선 rc parameter를 설정하여 이후의 그림 전체에 적용해 보자\n\n# 폰트 설정\nmpl.rc('font', family='NanumGothic')\n# 유니코드에서  음수 부호설정\nmpl.rc('axes', unicode_minus=False)\n\n정상적으로 폰트가 설치되고 rc parameter가 제대로 설정되었다면 다음 코드를 실행하였을 때 한글이 잘 보여야 한다.\n\nplt.title('한글 제목')\nplt.plot([10, 20, 30, 40], [1, 4, 9, 16])\nplt.xlabel(\"엑스축 라벨\")\nplt.ylabel(\"와이축 라벨\")\nplt.show()\n\n\n\n\n\n\n\n\n만약 객체마다 별도의 폰트를 적용하고 싶을 때는 다음과 같이 폰트 패밀리, 색상, 크기를 정하여 플롯 명령의 fontdict 인수에 넣는다.\n\nfont1 = {'family': 'NanumMyeongjo', 'size': 24, \n         'color':  'black'}\nfont2 = {'family': 'NanumBarunpen', 'size': 18, 'weight': 'bold',\n         'color':  'darkred'}\nfont3 = {'family': 'NanumBarunGothic', 'size': 12, 'weight': 'light',\n         'color':  'blue'}\n\nplt.plot([10, 20, 30, 40], [1, 4, 9, 16])\nplt.title('한글 제목', fontdict=font1)\nplt.xlabel('엑스 축', fontdict=font2)\nplt.ylabel('와이 축', fontdict=font3)\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#스타일-지정",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#스타일-지정",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "스타일 지정",
    "text": "스타일 지정\n플롯 명령어는 보는 사람이 그림을 더 알아보기 쉽게 하기 위해 다양한 스타일(style)을 지원한다. plot 명령어에서는 다음과 같이 추가 문자열 인수를 사용하여 스타일을 지원한다.\n\nplt.title(\"'rs--' 스타일의 plot \")\nplt.plot([10, 20, 30, 40], [1, 4, 9, 16], 'rs--')\nplt.show()\n\n\n\n\n\n\n\n\n스타일 문자열은 색깔(color), 마커(marker), 선 종류(line style)의 순서로 지정한다. 만약 이 중 일부가 생략되면 디폴트값이 적용된다.\n\n색깔\n색깔을 지정하는 방법은 색 이름 혹은 약자를 사용하거나 # 문자로 시작되는 RGB코드를 사용한다.\n자주 사용되는 색깔은 한글자 약자를 사용할 수 있으며 약자는 아래 표에 정리하였다. 전체 색깔 목록은 다음 웹사이트를 참조한다.\n\nhttp://matplotlib.org/examples/color/named_colors.html\n\n\n\n\n문자열\n약자\n\n\n\n\nblue\nb\n\n\ngreen\ng\n\n\nred\nr\n\n\ncyan\nc\n\n\nmagenta\nm\n\n\nyellow\ny\n\n\nblack\nk\n\n\nwhite\nw\n\n\n\n\n\n마커\n데이터 위치를 나타내는 기호를 마커(marker)라고 한다. 마커의 종류는 다음과 같다.\n\n\n\n마커 문자열\n의미\n\n\n\n\n.\npoint marker\n\n\n,\npixel marker\n\n\no\ncircle marker\n\n\nv\ntriangle_down marker\n\n\n^\ntriangle_up marker\n\n\n&lt;\ntriangle_left marker\n\n\n&gt;\ntriangle_right marker\n\n\n1\ntri_down marker\n\n\n2\ntri_up marker\n\n\n3\ntri_left marker\n\n\n4\ntri_right marker\n\n\ns\nsquare marker\n\n\np\npentagon marker\n\n\n*\nstar marker\n\n\nh\nhexagon1 marker\n\n\nH\nhexagon2 marker\n\n\n+\nplus marker\n\n\nx\nx marker\n\n\nD\ndiamond marker\n\n\nd\nthin_diamond marker\n\n\n\n\n\n선 스타일\n선 스타일에는 실선(solid), 대시선(dashed), 점선(dotted), 대시-점선(dash-dit) 이 있다. 지정 문자열은 다음과 같다.\n\n\n\n선 스타일 문자열\n의미\n\n\n\n\n-\nsolid line style\n\n\n--\ndashed line style\n\n\n-.\ndash-dot line style\n\n\n:\ndotted line style\n\n\n\n\n\n기타 스타일\n라인 플롯에서는 앞서 설명한 세 가지 스타일 이외에도 여러가지 스타일을 지정할 수 있지만 이 경우에는 인수 이름을 정확하게 지정해야 한다. 사용할 수 있는 스타일 인수의 목록은 matplotlib.lines.Line2D 클래스에 대한 다음 웹사이트를 참조한다.\n\nhttp://matplotlib.org/api/lines_api.html#matplotlib.lines.Line2D\n\n라인 플롯에서 자주 사용되는 기타 스타일은 다음과 같다.\n\n\n\n스타일 문자열\n약자\n의미\n\n\n\n\ncolor\nc\n선 색깔\n\n\nlinewidth\nlw\n선 굵기\n\n\nlinestyle\nls\n선 스타일\n\n\nmarker\n\n마커 종류\n\n\nmarkersize\nms\n마커 크기\n\n\nmarkeredgecolor\nmec\n마커 선 색깔\n\n\nmarkeredgewidth\nmew\n마커 선 굵기\n\n\nmarkerfacecolor\nmfc\n마커 내부 색깔\n\n\n\n\nplt.plot([10, 20, 30, 40], [1, 4, 9, 16], c=\"b\",\n         lw=5, ls=\"--\", marker=\"o\", ms=15, mec=\"g\", mew=5, mfc=\"r\")\nplt.title(\"스타일 적용 예\")\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#그림-범위-지정",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#그림-범위-지정",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "그림 범위 지정",
    "text": "그림 범위 지정\n`xlim`\n`ylim`\n플롯 그림을 보면 몇몇 점들은 그림의 범위 경계선에 있어서 잘 보이지 않는 경우가 있을 수 있다. 그림의 범위를 수동으로 지정하려면 xlim 명령과 ylim 명령을 사용한다. 이 명령들은 그림의 범위가 되는 x축, y축의 최소값과 최대값을 지정한다.\n\nplt.title(\"x축, y축의 범위 설정\")\nplt.plot([10, 20, 30, 40], [1, 4, 9, 16],\n         c=\"b\", lw=5, ls=\"--\", marker=\"o\", ms=15, mec=\"g\", mew=5, mfc=\"r\")\nplt.xlim(0, 50)\nplt.ylim(-10, 30)\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#틱-설정",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#틱-설정",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "틱 설정",
    "text": "틱 설정\n`xticks`\n`yticks`\n플롯이나 차트에서 축상의 위치 표시 지점을 틱(tick)이라고 하고 이 틱에 써진 숫자 혹은 글자를 틱 라벨(tick label)이라고 한다. 틱의 위치나 틱 라벨은 맷플롯리브가 자동으로 정해주지만 만약 수동으로 설정하고 싶다면 xticks 명령이나 yticks 명령을 사용한다.\n\nX = np.linspace(-np.pi, np.pi, 256)\nC = np.cos(X)\nplt.title(\"x축과 y축의 tick label 설정\")\nplt.plot(X, C)\nplt.xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi])\nplt.yticks([-1, 0, +1])\nplt.show()\n\n\n\n\n\n\n\n\n틱 라벨 문자열에는 $$ 사이에 LaTeX 수학 문자식을 넣을 수도 있다.\n\nX = np.linspace(-np.pi, np.pi, 256)\nC = np.cos(X)\nplt.title(\"LaTeX, 문자열로 tick label 정의\")\nplt.plot(X, C)\nplt.xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi],\n           [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\nplt.yticks([-1, 0, 1], [\"Low\", \"Zero\", \"High\"])\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#그리드-설정",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#그리드-설정",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "그리드 설정",
    "text": "그리드 설정\n`grid`\n위 그림을 보면 틱 위치를 잘 보여주기 위해 그림 중간에 그리드 선(grid line)이 자동으로 그려진 것을 알 수 있다. 그리드를 사용하지 않으려면 grid(False) 명령을 사용한다. 다시 그리드를 사용하려면 grid(True)를 사용한다.\n\nX = np.linspace(-np.pi, np.pi, 256)\nC = np.cos(X)\nplt.title(\"Grid 제거\")\nplt.plot(X, C)\nplt.xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi],\n           [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\nplt.yticks([-1, 0, 1], [\"Low\", \"Zero\", \"High\"])\nplt.grid(False)\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#여러개의-선을-그리기",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#여러개의-선을-그리기",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "여러개의 선을 그리기",
    "text": "여러개의 선을 그리기\n라인 플롯에서 선을 하나가 아니라 여러개를 그리고 싶은 경우에는 x 데이터, y 데이터, 스타일 문자열을 반복하여 인수로 넘긴다. 이 경우에는 하나의 선을 그릴 때 처럼 x 데이터나 스타일 문자열을 생략할 수 없다.\n\nt = np.arange(0., 5., 0.2)\nplt.title(\"라인 플롯에서 여러개의 선 그리기\")\nplt.plot(t, t, 'r--', t, 0.5 * t**2, 'bs:', t, 0.2 * t**3, 'g^-')\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#겹쳐그리기",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#겹쳐그리기",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "겹쳐그리기",
    "text": "겹쳐그리기\n하나의 plot 명령이 아니라 복수의 plot 명령을 하나의 그림에 겹쳐서 그릴 수도 있다.\n\nplt.title(\"복수의 plot 명령을 한 그림에서 표현\")\nplt.plot([1, 4, 9, 16],\n         c=\"b\", lw=5, ls=\"--\", marker=\"o\", ms=15, mec=\"g\", mew=5, mfc=\"r\")\n# plt.hold(True)   # &lt;- 1,5 버전에서는 이 코드가 필요하다.\nplt.plot([9, 16, 4, 1],\n         c=\"k\", lw=3, ls=\":\", marker=\"s\", ms=10, mec=\"m\", mew=5, mfc=\"c\")\n# plt.hold(False)  # &lt;- 1,5 버전에서는 이 코드가 필요하다.\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#범례",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#범례",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "범례",
    "text": "범례\n`legend`\n여러개의 라인 플롯을 동시에 그리는 경우에는 각 선이 무슨 자료를 표시하는지를 보여주기 위해 legend 명령으로 범례(legend)를 추가할 수 있다. 범례의 위치는 자동으로 정해지지만 수동으로 설정하고 싶으면 loc 인수를 사용한다. 인수에는 문자열 혹은 숫자가 들어가며 가능한 코드는 다음과 같다.\n\n\n\nloc 문자열\n숫자\n\n\n\n\nbest\n0\n\n\nupper right\n1\n\n\nupper left\n2\n\n\nlower left\n3\n\n\nlower right\n4\n\n\nright\n5\n\n\ncenter left\n6\n\n\ncenter right\n7\n\n\nlower center\n8\n\n\nupper center\n9\n\n\ncenter\n10\n\n\n\n\nX = np.linspace(-np.pi, np.pi, 256)\nC, S = np.cos(X), np.sin(X)\nplt.title(\"legend를 표시한 플롯\")\nplt.plot(X, C, ls=\"--\", label=\"cosine\")\nplt.plot(X, S, ls=\":\", label=\"sine\")\nplt.legend(loc=2)\nplt.show()"
  },
  {
    "objectID": "05.01 시각화 패키지 맷플롯리브 소개.html#x축-y축-라벨-타이틀",
    "href": "05.01 시각화 패키지 맷플롯리브 소개.html#x축-y축-라벨-타이틀",
    "title": "5.1 시각화 패키지 맷플롯리브 소개",
    "section": "x축, y축 라벨, 타이틀",
    "text": "x축, y축 라벨, 타이틀\n`xlabel`\n`ylabel`\n플롯의 x축 위치와 y축 위치에는 각각 그 데이터가 의미하는 바를 표시하기 위해 라벨(label)를 추가할 수 있다. 라벨을 붙이려면 xlabel. ylabel 명령을 사용한다. 또 플롯의 위에는 title 명령으로 제목(title)을 붙일 수 있다.\n\nX = np.linspace(-np.pi, np.pi, 256)\nC, S = np.cos(X), np.sin(X)\nplt.plot(X, C, label=\"cosine\")\nplt.xlabel(\"time\")\nplt.ylabel(\"amplitude\")\nplt.title(\"Cosine Plot\")\nplt.show()\n\n\n\n\n\n\n\n\n````mbadezhhlmep 연습 문제 5.1.1\n여러가지 함수를 사용하여 아래 조건에 맞는 그래프를 그린다.\n\nxlabel, ylabel, title을 모두 갖추고 있어야 한다.\n하나의 Figure(일단, 그림이라고 이해한다. 아래에 자세한 설명이 있다.)에 3개 이상의 Plot을 그린다.\n각 Plot은 다른 선, 마크, 색 스타일을 가진다.\nlegend는 그래프와 겹치지 않는 곳에 위치 시키도록 한다.\n\n\n## 그림의 구조\n\n맷플롯리브가 그리는 그림은 Figure 객체, Axes 객체, Axis 객체 등으로 구성된다. Figure 객체는 한 개 이상의  Axes 객체를 포함하고 Axes 객체는 다시 두 개 이상의 Axis 객체를 포함한다. \n\nFigure는 그림이 그려지는 캔버스나 종이를 뜻하고 Axes는 하나의 플롯, 그리고 Axis는 가로축이나 세로축 등의 축을 뜻한다. Axes와 Axis의 철자에 주의한다.\n\n### Figure 객체\n\n모든 그림은 Figure 객체. 정식으로는  `matplotlib.figure.Figure` 클래스 객체에 포함되어 있다. 내부 플롯(inline plot)이 아닌 경우에는 하나의 Figure는 하나의 아이디 숫자와 윈도우(Window)를 가진다. 주피터 노트북에서는 윈도우 객체가 생성되지 않지만 파이썬을 독립 실행하는 경우에는 하나의 Figure당 하나의 윈도우를 별도로 가진다. Figure 객체에 대한 자세한 설명은 다음 웹사이트를 참조한다.\n\n* http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure\n\n\n```{margin}\n`figure`\n```\n\n\n원래 Figure를 생성하려면 `figure` 명령을 사용하여 그 반환값으로 Figure 객체를 얻어야 한다. 그러나 일반적인 `plot` 명령 등을 실행하면 자동으로 Figure를 생성해주기 때문에 일반적으로는 `figure` 명령을 잘 사용하지 않는다. `figure` 명령을 명시적으로 사용하는 경우는 여러개의 윈도우를 동시에 띄워야 하거나(line plot이 아닌 경우), Jupyter 노트북 등에서(line plot의 경우) 그림의 크기를 설정하고 싶을 때이다. 그림의 크기는 figsize 인수로 설정한다.\n\n::: {#cell-83 .cell school_cell_uuid='d6f40f8691cf4edf83ef6ab02400315f' execution_count=17}\n``` {.python .cell-code}\nnp.random.seed(0)\nf1 = plt.figure(figsize=(10, 2))\nplt.title(\"figure size : (10, 2)\")\nplt.plot(np.random.randn(100))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05.01 시각화 패키지 맷플롯리브 소개_files/figure-html/cell-18-output-1.png){}\n:::\n:::\n\n\n\n```{margin}\n`gcf`\n```\n\n\n현재 사용하고 있는 Figure 객체를 얻으려면(다른 변수에 할당할 수도 있다.) `gcf` 명령을 사용한다.\n\n::: {#cell-86 .cell school_cell_uuid='019f13ad3df246028dd898c621bb5780' execution_count=18}\n``` {.python .cell-code}\nf1 = plt.figure(1)\nplt.title(\"현재의 Figure 객체\")\nplt.plot([1, 2, 3, 4], 'ro:')\n\nf2 = plt.gcf()\nprint(f1, id(f1))\nprint(f2, id(f2))\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFigure(2400x1500) 140676427789072\nFigure(2400x1500) 140676427789072\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05.01 시각화 패키지 맷플롯리브 소개_files/figure-html/cell-19-output-2.png){}\n:::\n:::\n\n\n### Axes 객체와 `subplot` 명령\n\n때로는 다음과 같이 하나의 윈도우(Figure)안에 여러개의 플롯을 배열 형태로 보여야하는 경우도 있다. Figure 안에 있는 각각의 플롯은 Axes 라고 불리는 객체에 속한다. Axes 객체에 대한 자세한 설명은 다음 웹사이트를 참조한다.\n\n* http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes\n\n\n```{margin}\n`subplot`\n```\n\n\nFigure 안에 Axes를 생성하려면 원래 `subplot` 명령을 사용하여 명시적으로 Axes 객체를 얻어야 한다. 그러나 plot 명령을 바로 사용해도 자동으로 Axes를 생성해 준다.\n\n`subplot` 명령은 그리드(grid) 형태의 Axes 객체들을 생성하는데 Figure가 행렬(matrix)이고 Axes가 행렬의 원소라고 생각하면 된다. 예를 들어 \n위와 아래 두 개의 플롯이 있는 경우 행이 2 이고 열이 1인 2x1 행렬이다.  `subplot` 명령은 세개의 인수를 가지는데 처음 두개의 원소가 전체 그리드 행렬의 모양을 지시하는 두 숫자이고 세번째 인수가 네 개 중 어느것인지를 의미하는 숫자이다. 따라서 위/아래 두개의 플롯을 하나의 Figure 안에 그리려면 다음처럼 명령을 실행해야 한다. 여기에서 숫자 인덱싱은 파이썬이 아닌 Matlab 관행을 따르기 때문에 첫번째 플롯을 가리키는 숫자가 0이 아니라 1임에 주의하라.\n\n\n```\nsubplot(2, 1, 1)\n# 여기에서 윗부분에 그릴 플롯 명령 실행\nsubplot(2, 1, 2)\n# 여기에서 아랫부분에 그릴 플롯 명령 실행\n```\n\n\n```{margin}\n`tight_layout`\n```\n\n\n`tight_layout` 명령을 실행하면 플롯간의 간격을 자동으로 맞춰준다.\n\n::: {#cell-93 .cell school_cell_uuid='d5b847a8734d49a987fb34b613bf6fcc' execution_count=19}\n``` {.python .cell-code}\nx1 = np.linspace(0.0, 5.0)\nx2 = np.linspace(0.0, 2.0)\ny1 = np.cos(2 * np.pi * x1) * np.exp(-x1)\ny2 = np.cos(2 * np.pi * x2)\n\nax1 = plt.subplot(2, 1, 1)\nplt.plot(x1, y1, 'yo-')\nplt.title('A tale of 2 subplots')\nplt.ylabel('Damped oscillation')\n\nax2 = plt.subplot(2, 1, 2)\nplt.plot(x2, y2, 'r.-')\nplt.xlabel('time (s)')\nplt.ylabel('Undamped')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05.01 시각화 패키지 맷플롯리브 소개_files/figure-html/cell-20-output-1.png){}\n:::\n:::\n\n\n만약 2x2 형태의 네 개의 플롯이라면 다음과 같이 그린다. 이 때 `subplot` 의 인수는 (2,2,1)를 줄여서 221 라는 하나의 숫자로 표시할 수도 있다.\nAxes의 위치는 위에서 부터 아래로, 왼쪽에서 오른쪽으로 카운트한다.\n\n::: {#cell-95 .cell school_cell_uuid='7a79f1c8c0894ec093b60bbdaf7f101d' execution_count=20}\n``` {.python .cell-code}\nnp.random.seed(0)\n\nplt.subplot(221)\nplt.plot(np.random.rand(5))\nplt.title(\"axes 1\")\n\nplt.subplot(222)\nplt.plot(np.random.rand(5))\nplt.title(\"axes 2\")\n\nplt.subplot(223)\nplt.plot(np.random.rand(5))\nplt.title(\"axes 3\")\n\nplt.subplot(224)\nplt.plot(np.random.rand(5))\nplt.title(\"axes 4\")\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05.01 시각화 패키지 맷플롯리브 소개_files/figure-html/cell-21-output-1.png){}\n:::\n:::\n\n\n\n```{margin}\n`subplots`\n```\n\n\n`subplots` 명령으로 복수의 Axes 객체를 동시에 생성할 수도 있다. 이때는 2차원 ndarray 형태로 Axes 객체가 반환된다.\n\n::: {#cell-98 .cell school_cell_uuid='6924118a64b84d1d80f260cdc93b7cb7' execution_count=21}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 2)\n\nnp.random.seed(0)\naxes[0, 0].plot(np.random.rand(5))\naxes[0, 0].set_title(\"axes 1\")\naxes[0, 1].plot(np.random.rand(5))\naxes[0, 1].set_title(\"axes 2\")\naxes[1, 0].plot(np.random.rand(5))\naxes[1, 0].set_title(\"axes 3\")\naxes[1, 1].plot(np.random.rand(5))\naxes[1, 1].set_title(\"axes 4\")\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05.01 시각화 패키지 맷플롯리브 소개_files/figure-html/cell-22-output-1.png){}\n:::\n:::\n\n\n````{admonition} 연습 문제 5.1.2\n\n여러가지 함수를 사용하여 위와 같이 subplot들로 구성된 그림을 그려보자. 모든 subplot에 대해 xlabel, ylabel, title이 있어야 한다.\n\nAxis 객체와 축\n하나의 Axes 객체는 두 개 이상의 Axis 객체를 가진다. Axis 객체는 플롯의 가로축이나 세로축을 나타내는 객체이다. 보다 자세한 내용은 다음 웹사이트를 참조한다.\n\nhttps://matplotlib.org/api/axis_api.html\n\n`twinx`\n여러가지 플롯을 하나의 Axes 객체에 표시할 때 y값의 크기가 달라서 표시하기 힘든 경우가 있다. 이 때는 다음처럼 twinx 명령으로 대해 복수의 y 축을 가진 플롯을 만들수도 있다. twinx 명령은 x 축을 공유하는 새로운 Axes 객체를 만든다.\n\nfig, ax0 = plt.subplots()\nax1 = ax0.twinx()\nax0.set_title(\"2개의 y축 한 figure에서 사용하기\")\nax0.plot([10, 5, 2, 9, 7], 'r-', label=\"y0\")\nax0.set_ylabel(\"y0\")\nax0.grid(False)\nax1.plot([100, 200, 220, 180, 120], 'g:', label=\"y1\")\nax1.set_ylabel(\"y1\")\nax1.grid(False)\nax0.set_xlabel(\"공유되는 x축\")\nplt.show()\n\n\n\n\n\n\n\n\n````mbadezhhlmep 연습 문제 5.1.3\n\n맷플롯리브 갤러리 웹사이트에서 관심있는 예제 코드를 하나 고른다.\n\n\nhttp://matplotlib.org/gallery.html\n\n\n예제 코드에 사용된 맷플롯리브 API 명령의 목록을 만들고 맷플롯리브 웹사이트에서 관련 링크를 찾아 내용을 정리한다.\n변형된 형태의 플롯을 만들어본다. ````"
  },
  {
    "objectID": "04.08 시계열 자료 다루기.html",
    "href": "04.08 시계열 자료 다루기.html",
    "title": "4.8 시계열 자료 다루기",
    "section": "",
    "text": "`DatetimeIndex`"
  },
  {
    "objectID": "04.08 시계열 자료 다루기.html#datetimeindex-인덱스",
    "href": "04.08 시계열 자료 다루기.html#datetimeindex-인덱스",
    "title": "4.8 시계열 자료 다루기",
    "section": "DatetimeIndex 인덱스",
    "text": "DatetimeIndex 인덱스\n시계열 자료는 인덱스가 날짜 혹은 시간인 데이터를 말한다. 판다스에서 시계열 자료를 생성하려면 인덱스를 DatetimeIndex 자료형으로 만들어야 한다. DatetimeIndex는 특정한 순간에 기록된 타임스탬프(timestamp) 형식의 시계열 자료를 다루기 위한 인덱스이다. 타임스탬프 인덱스의 라벨값이 반드시 일정한 간격일 필요는 없다.\nDatetimeIndex 인덱스는 다음과 같은 보조 함수를 사용하여 생성한다.\n\npd.to_datetime 함수\npd.date_range 함수\n\nto_datetime\npd.to_datetime 함수를 쓰면 날짜/시간을 나타내는 문자열을 자동으로 datetime 자료형으로 바꾼 후 DatetimeIndex 자료형 인덱스를 생성한다.\n\ndate_str = [\"2018, 1, 1\", \"2018, 1, 4\", \"2018, 1, 5\", \"2018, 1, 6\"]\nidx = pd.to_datetime(date_str)\nidx\n\nDatetimeIndex(['2018-01-01', '2018-01-04', '2018-01-05', '2018-01-06'], dtype='datetime64[ns]', freq=None)\n\n\n이렇게 만들어진 인덱스를 사용하여 시리즈나 데이터프레임을 생성하면 된다.\n\nnp.random.seed(0)\ns = pd.Series(np.random.randn(4), index=idx)\ns\n\n2018-01-01    1.764052\n2018-01-04    0.400157\n2018-01-05    0.978738\n2018-01-06    2.240893\ndtype: float64\n\n\ndate_range\npd.date_range 함수를 쓰면 모든 날짜/시간을 일일히 입력할 필요없이 시작일과 종료일 또는 시작일과 기간을 입력하면 범위 내의 인덱스를 생성해 준다.\n\npd.date_range(\"2018-4-1\", \"2018-4-30\")\n\nDatetimeIndex(['2018-04-01', '2018-04-02', '2018-04-03', '2018-04-04',\n               '2018-04-05', '2018-04-06', '2018-04-07', '2018-04-08',\n               '2018-04-09', '2018-04-10', '2018-04-11', '2018-04-12',\n               '2018-04-13', '2018-04-14', '2018-04-15', '2018-04-16',\n               '2018-04-17', '2018-04-18', '2018-04-19', '2018-04-20',\n               '2018-04-21', '2018-04-22', '2018-04-23', '2018-04-24',\n               '2018-04-25', '2018-04-26', '2018-04-27', '2018-04-28',\n               '2018-04-29', '2018-04-30'],\n              dtype='datetime64[ns]', freq='D')\n\n\n\npd.date_range(start=\"2018-4-1\", periods=30)\n\nDatetimeIndex(['2018-04-01', '2018-04-02', '2018-04-03', '2018-04-04',\n               '2018-04-05', '2018-04-06', '2018-04-07', '2018-04-08',\n               '2018-04-09', '2018-04-10', '2018-04-11', '2018-04-12',\n               '2018-04-13', '2018-04-14', '2018-04-15', '2018-04-16',\n               '2018-04-17', '2018-04-18', '2018-04-19', '2018-04-20',\n               '2018-04-21', '2018-04-22', '2018-04-23', '2018-04-24',\n               '2018-04-25', '2018-04-26', '2018-04-27', '2018-04-28',\n               '2018-04-29', '2018-04-30'],\n              dtype='datetime64[ns]', freq='D')\n\n\nfreq 인수로 특정한 날짜만 생성되도록 할 수도 있다. 많이 사용되는 freq 인수값은 다음과 같다.\n\ns: 초\nT: 분\nH: 시간\nD: 일(day)\nB: 주말이 아닌 평일\nW: 주(일요일)\nW-MON: 주(월요일)\nM: 각 달(month)의 마지막 날\nMS: 각 달의 첫날\nBM: 주말이 아닌 평일 중에서 각 달의 마지막 날\nBMS: 주말이 아닌 평일 중에서 각 달의 첫날\nWOM-2THU: 각 달의 두번째 목요일\nQ-JAN: 각 분기의 첫달의 마지막 날\nQ-DEC: 각 분기의 마지막 달의 마지막 날\n\n보다 자세한 내용은 다음 웹사이트를 참조한다.\n\nhttps://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects\n\n\npd.date_range(\"2018-4-1\", \"2018-4-30\", freq=\"B\")\n\nDatetimeIndex(['2018-04-02', '2018-04-03', '2018-04-04', '2018-04-05',\n               '2018-04-06', '2018-04-09', '2018-04-10', '2018-04-11',\n               '2018-04-12', '2018-04-13', '2018-04-16', '2018-04-17',\n               '2018-04-18', '2018-04-19', '2018-04-20', '2018-04-23',\n               '2018-04-24', '2018-04-25', '2018-04-26', '2018-04-27',\n               '2018-04-30'],\n              dtype='datetime64[ns]', freq='B')\n\n\n\npd.date_range(\"2018-1-1\", \"2018-12-31\", freq=\"W\")\n\nDatetimeIndex(['2018-01-07', '2018-01-14', '2018-01-21', '2018-01-28',\n               '2018-02-04', '2018-02-11', '2018-02-18', '2018-02-25',\n               '2018-03-04', '2018-03-11', '2018-03-18', '2018-03-25',\n               '2018-04-01', '2018-04-08', '2018-04-15', '2018-04-22',\n               '2018-04-29', '2018-05-06', '2018-05-13', '2018-05-20',\n               '2018-05-27', '2018-06-03', '2018-06-10', '2018-06-17',\n               '2018-06-24', '2018-07-01', '2018-07-08', '2018-07-15',\n               '2018-07-22', '2018-07-29', '2018-08-05', '2018-08-12',\n               '2018-08-19', '2018-08-26', '2018-09-02', '2018-09-09',\n               '2018-09-16', '2018-09-23', '2018-09-30', '2018-10-07',\n               '2018-10-14', '2018-10-21', '2018-10-28', '2018-11-04',\n               '2018-11-11', '2018-11-18', '2018-11-25', '2018-12-02',\n               '2018-12-09', '2018-12-16', '2018-12-23', '2018-12-30'],\n              dtype='datetime64[ns]', freq='W-SUN')\n\n\n\npd.date_range(\"2018-1-1\", \"2018-12-31\", freq=\"W-MON\")\n\nDatetimeIndex(['2018-01-01', '2018-01-08', '2018-01-15', '2018-01-22',\n               '2018-01-29', '2018-02-05', '2018-02-12', '2018-02-19',\n               '2018-02-26', '2018-03-05', '2018-03-12', '2018-03-19',\n               '2018-03-26', '2018-04-02', '2018-04-09', '2018-04-16',\n               '2018-04-23', '2018-04-30', '2018-05-07', '2018-05-14',\n               '2018-05-21', '2018-05-28', '2018-06-04', '2018-06-11',\n               '2018-06-18', '2018-06-25', '2018-07-02', '2018-07-09',\n               '2018-07-16', '2018-07-23', '2018-07-30', '2018-08-06',\n               '2018-08-13', '2018-08-20', '2018-08-27', '2018-09-03',\n               '2018-09-10', '2018-09-17', '2018-09-24', '2018-10-01',\n               '2018-10-08', '2018-10-15', '2018-10-22', '2018-10-29',\n               '2018-11-05', '2018-11-12', '2018-11-19', '2018-11-26',\n               '2018-12-03', '2018-12-10', '2018-12-17', '2018-12-24',\n               '2018-12-31'],\n              dtype='datetime64[ns]', freq='W-MON')\n\n\n\npd.date_range(\"2018-4-1\", \"2018-12-31\", freq=\"MS\")\n\nDatetimeIndex(['2018-04-01', '2018-05-01', '2018-06-01', '2018-07-01',\n               '2018-08-01', '2018-09-01', '2018-10-01', '2018-11-01',\n               '2018-12-01'],\n              dtype='datetime64[ns]', freq='MS')\n\n\n\npd.date_range(\"2018-4-1\", \"2018-12-31\", freq=\"M\")\n\nDatetimeIndex(['2018-04-30', '2018-05-31', '2018-06-30', '2018-07-31',\n               '2018-08-31', '2018-09-30', '2018-10-31', '2018-11-30',\n               '2018-12-31'],\n              dtype='datetime64[ns]', freq='M')\n\n\n\npd.date_range(\"2018-4-1\", \"2018-12-31\", freq=\"BMS\")\n\nDatetimeIndex(['2018-04-02', '2018-05-01', '2018-06-01', '2018-07-02',\n               '2018-08-01', '2018-09-03', '2018-10-01', '2018-11-01',\n               '2018-12-03'],\n              dtype='datetime64[ns]', freq='BMS')\n\n\n\npd.date_range(\"2018-4-1\", \"2018-12-31\", freq=\"BM\")\n\nDatetimeIndex(['2018-04-30', '2018-05-31', '2018-06-29', '2018-07-31',\n               '2018-08-31', '2018-09-28', '2018-10-31', '2018-11-30',\n               '2018-12-31'],\n              dtype='datetime64[ns]', freq='BM')\n\n\n\npd.date_range(\"2018-1-1\", \"2018-12-31\", freq=\"WOM-2THU\")\n\nDatetimeIndex(['2018-01-11', '2018-02-08', '2018-03-08', '2018-04-12',\n               '2018-05-10', '2018-06-14', '2018-07-12', '2018-08-09',\n               '2018-09-13', '2018-10-11', '2018-11-08', '2018-12-13'],\n              dtype='datetime64[ns]', freq='WOM-2THU')\n\n\n\npd.date_range(\"2018-1-1\", \"2018-12-31\", freq=\"Q-JAN\")\n\nDatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31'], dtype='datetime64[ns]', freq='Q-JAN')\n\n\n\npd.date_range(\"2018-1-1\", \"2018-12-31\", freq=\"Q-DEC\")\n\nDatetimeIndex(['2018-03-31', '2018-06-30', '2018-09-30', '2018-12-31'], dtype='datetime64[ns]', freq='Q-DEC')"
  },
  {
    "objectID": "04.08 시계열 자료 다루기.html#shift-연산",
    "href": "04.08 시계열 자료 다루기.html#shift-연산",
    "title": "4.8 시계열 자료 다루기",
    "section": "shift 연산",
    "text": "shift 연산\n시계열 데이터의 인덱스는 시간이나 날짜를 나타내기 때문에 날짜 이동 등의 다양한 연산이 가능하다. 예를 들어 shift 연산을 사용하면 인덱스는 그대로 두고 데이터만 이동할 수도 있다.\n\nnp.random.seed(0)\nts = pd.Series(np.random.randn(4), index=pd.date_range(\n    \"2018-1-1\", periods=4, freq=\"M\"))\nts\n\n2018-01-31    1.764052\n2018-02-28    0.400157\n2018-03-31    0.978738\n2018-04-30    2.240893\nFreq: M, dtype: float64\n\n\n\nts.shift(1)\n\n2018-01-31         NaN\n2018-02-28    1.764052\n2018-03-31    0.400157\n2018-04-30    0.978738\nFreq: M, dtype: float64\n\n\n\nts.shift(-1)\n\n2018-01-31    0.400157\n2018-02-28    0.978738\n2018-03-31    2.240893\n2018-04-30         NaN\nFreq: M, dtype: float64\n\n\n\nts.shift(1, freq=\"M\")\n\n2018-02-28    1.764052\n2018-03-31    0.400157\n2018-04-30    0.978738\n2018-05-31    2.240893\nFreq: M, dtype: float64\n\n\n\nts.shift(1, freq=\"W\")\n\n2018-02-04    1.764052\n2018-03-04    0.400157\n2018-04-01    0.978738\n2018-05-06    2.240893\ndtype: float64"
  },
  {
    "objectID": "04.08 시계열 자료 다루기.html#resample-연산",
    "href": "04.08 시계열 자료 다루기.html#resample-연산",
    "title": "4.8 시계열 자료 다루기",
    "section": "resample 연산",
    "text": "resample 연산\nresample 연산을 쓰면 시간 간격을 재조정하는 리샘플링(resampling)이 가능하다. 이 때 시간 구간이 작아지면 데이터 양이 증가한다고 해서 업-샘플링(up-sampling)이라 하고 시간 구간이 커지면 데이터 양이 감소한다고 해서 다운-샘플링(down-sampling)이라 부른다.\n\nts = pd.Series(np.random.randn(100), index=pd.date_range(\n    \"2018-1-1\", periods=100, freq=\"D\"))\nts.tail(20)\n\n2018-03-22    1.488252\n2018-03-23    1.895889\n2018-03-24    1.178780\n2018-03-25   -0.179925\n2018-03-26   -1.070753\n2018-03-27    1.054452\n2018-03-28   -0.403177\n2018-03-29    1.222445\n2018-03-30    0.208275\n2018-03-31    0.976639\n2018-04-01    0.356366\n2018-04-02    0.706573\n2018-04-03    0.010500\n2018-04-04    1.785870\n2018-04-05    0.126912\n2018-04-06    0.401989\n2018-04-07    1.883151\n2018-04-08   -1.347759\n2018-04-09   -1.270485\n2018-04-10    0.969397\nFreq: D, dtype: float64\n\n\n다운-샘플링의 경우에는 원래의 데이터가 그룹으로 묶이기 때문에 그룹바이(groupby)때와 같이 그룹 연산을 해서 대표값을 구해야 한다.\n\nts.resample('W').mean()\n\n2018-01-07    0.305776\n2018-01-14    0.629064\n2018-01-21   -0.006910\n2018-01-28    0.277065\n2018-02-04   -0.144972\n2018-02-11   -0.496299\n2018-02-18   -0.474473\n2018-02-25   -0.201222\n2018-03-04   -0.775142\n2018-03-11    0.052868\n2018-03-18   -0.450379\n2018-03-25    0.601892\n2018-04-01    0.334893\n2018-04-08    0.509605\n2018-04-15   -0.150544\nFreq: W-SUN, dtype: float64\n\n\n\nts.resample('M').first()\n\n2018-01-31    1.867558\n2018-02-28    0.156349\n2018-03-31   -1.726283\n2018-04-30    0.356366\nFreq: M, dtype: float64\n\n\n날짜가 아닌 시/분 단위에서는 구간위 왼쪽 한계값(가장 빠른 값)은 포함하고 오른쪽 한계값(가장 늦은 값)은 포함하지 않는다. 즉, 가장 늦은 값은 다음 구간에 포함된다. 예를 들어 10분 간격으로 구간을 만들면 10의 배수가 되는 시각은 구간의 시작점이 된다.\n\nts = pd.Series(np.random.randn(60), index=pd.date_range(\n    \"2018-1-1\", periods=60, freq=\"T\"))\nts.head(20)\n\n2018-01-01 00:00:00   -1.173123\n2018-01-01 00:01:00    1.943621\n2018-01-01 00:02:00   -0.413619\n2018-01-01 00:03:00   -0.747455\n2018-01-01 00:04:00    1.922942\n2018-01-01 00:05:00    1.480515\n2018-01-01 00:06:00    1.867559\n2018-01-01 00:07:00    0.906045\n2018-01-01 00:08:00   -0.861226\n2018-01-01 00:09:00    1.910065\n2018-01-01 00:10:00   -0.268003\n2018-01-01 00:11:00    0.802456\n2018-01-01 00:12:00    0.947252\n2018-01-01 00:13:00   -0.155010\n2018-01-01 00:14:00    0.614079\n2018-01-01 00:15:00    0.922207\n2018-01-01 00:16:00    0.376426\n2018-01-01 00:17:00   -1.099401\n2018-01-01 00:18:00    0.298238\n2018-01-01 00:19:00    1.326386\nFreq: T, dtype: float64\n\n\n\nts.resample('10T').sum()\n\n2018-01-01 00:00:00    6.835324\n2018-01-01 00:10:00    3.764630\n2018-01-01 00:20:00    0.776495\n2018-01-01 00:30:00   -0.538336\n2018-01-01 00:40:00    1.828234\n2018-01-01 00:50:00    0.167957\nFreq: 10T, dtype: float64\n\n\n왼쪽이 아니라 오른쪽 한계값을 구간에 포함하려면 closed=\"right\" 인수를 사용한다. 이 때는 10의 배수가 되는 시각이 앞 구간에 포함된다.\n\nts.resample('10T', closed=\"right\").sum()\n\n2017-12-31 23:50:00   -1.173123\n2018-01-01 00:00:00    7.740444\n2018-01-01 00:10:00    3.338065\n2018-01-01 00:20:00    0.835217\n2018-01-01 00:30:00    2.480654\n2018-01-01 00:40:00   -0.653363\n2018-01-01 00:50:00    0.266409\nFreq: 10T, dtype: float64\n\n\nohlc 메서드는 구간의 시고저종(open, high, low, close)값을 구한다.\n\nts.resample('5T').ohlc()\n\n\n\n\n\n\n\n\nopen\nhigh\nlow\nclose\n\n\n\n\n2018-01-01 00:00:00\n-1.173123\n1.943621\n-1.173123\n1.922942\n\n\n2018-01-01 00:05:00\n1.480515\n1.910065\n-0.861226\n1.910065\n\n\n2018-01-01 00:10:00\n-0.268003\n0.947252\n-0.268003\n0.614079\n\n\n2018-01-01 00:15:00\n0.922207\n1.326386\n-1.099401\n1.326386\n\n\n2018-01-01 00:20:00\n-0.694568\n1.849264\n-0.694568\n0.672295\n\n\n2018-01-01 00:25:00\n0.407462\n0.539249\n-0.769916\n0.031831\n\n\n2018-01-01 00:30:00\n-0.635846\n0.676433\n-0.635846\n0.396007\n\n\n2018-01-01 00:35:00\n-1.093062\n0.635031\n-1.491258\n0.635031\n\n\n2018-01-01 00:40:00\n2.383145\n2.383145\n-1.315907\n-1.315907\n\n\n2018-01-01 00:45:00\n-0.461585\n1.713343\n-0.826439\n-0.826439\n\n\n2018-01-01 00:50:00\n-0.098453\n1.126636\n-1.147469\n-1.147469\n\n\n2018-01-01 00:55:00\n-0.437820\n1.929532\n-0.498032\n0.087551\n\n\n\n\n\n\n\n업-샘플링의 경우에는 실제로 존재하지 않는 데이터를 만들어야 한다. 이 때는 앞에서 나온 데이터를 뒤에서 그대로 쓰는 forward filling 방식과 뒤에서 나올 데이터를 앞에서 미리 쓰는 backward filling 방식을 사용할 수 있다. 각각 ffill, bfill 메서드를 이용한다.\n\nts.resample('30s').ffill().head(20)\n\n2018-01-01 00:00:00   -1.173123\n2018-01-01 00:00:30   -1.173123\n2018-01-01 00:01:00    1.943621\n2018-01-01 00:01:30    1.943621\n2018-01-01 00:02:00   -0.413619\n2018-01-01 00:02:30   -0.413619\n2018-01-01 00:03:00   -0.747455\n2018-01-01 00:03:30   -0.747455\n2018-01-01 00:04:00    1.922942\n2018-01-01 00:04:30    1.922942\n2018-01-01 00:05:00    1.480515\n2018-01-01 00:05:30    1.480515\n2018-01-01 00:06:00    1.867559\n2018-01-01 00:06:30    1.867559\n2018-01-01 00:07:00    0.906045\n2018-01-01 00:07:30    0.906045\n2018-01-01 00:08:00   -0.861226\n2018-01-01 00:08:30   -0.861226\n2018-01-01 00:09:00    1.910065\n2018-01-01 00:09:30    1.910065\nFreq: 30S, dtype: float64\n\n\n\nts.resample('30s').bfill().head(20)\n\n2018-01-01 00:00:00   -1.173123\n2018-01-01 00:00:30    1.943621\n2018-01-01 00:01:00    1.943621\n2018-01-01 00:01:30   -0.413619\n2018-01-01 00:02:00   -0.413619\n2018-01-01 00:02:30   -0.747455\n2018-01-01 00:03:00   -0.747455\n2018-01-01 00:03:30    1.922942\n2018-01-01 00:04:00    1.922942\n2018-01-01 00:04:30    1.480515\n2018-01-01 00:05:00    1.480515\n2018-01-01 00:05:30    1.867559\n2018-01-01 00:06:00    1.867559\n2018-01-01 00:06:30    0.906045\n2018-01-01 00:07:00    0.906045\n2018-01-01 00:07:30   -0.861226\n2018-01-01 00:08:00   -0.861226\n2018-01-01 00:08:30    1.910065\n2018-01-01 00:09:00    1.910065\n2018-01-01 00:09:30   -0.268003\nFreq: 30S, dtype: float64"
  },
  {
    "objectID": "04.08 시계열 자료 다루기.html#dt-접근자",
    "href": "04.08 시계열 자료 다루기.html#dt-접근자",
    "title": "4.8 시계열 자료 다루기",
    "section": "dt 접근자",
    "text": "dt 접근자\ndatetime 자료형 시리즈에는 dt 접근자가 있어 datetime 자료형이 가진 몇가지 유용한 속성과 메서드를 사용할 수 있다.\n\ns = pd.Series(pd.date_range(\"2020-12-25\", periods=100, freq=\"D\"))\ns\n\n0    2020-12-25\n1    2020-12-26\n2    2020-12-27\n3    2020-12-28\n4    2020-12-29\n        ...    \n95   2021-03-30\n96   2021-03-31\n97   2021-04-01\n98   2021-04-02\n99   2021-04-03\nLength: 100, dtype: datetime64[ns]\n\n\n예를 들어 year, month, day, weekday 등의 속성을 이용하면 년, 월, 일, 요일 정보를 빼낼 수 있다.\n\ns.dt.year\n\n0     2020\n1     2020\n2     2020\n3     2020\n4     2020\n      ... \n95    2021\n96    2021\n97    2021\n98    2021\n99    2021\nLength: 100, dtype: int64\n\n\n\ns.dt.weekday\n\n0     4\n1     5\n2     6\n3     0\n4     1\n     ..\n95    1\n96    2\n97    3\n98    4\n99    5\nLength: 100, dtype: int64\n\n\nstrftime 메서드를 이용하여 문자열을 만드는 것도 가능하다.\n\ns.dt.strftime(\"%Y년 %m월 %d일\")\n\n0     2020년 12월 25일\n1     2020년 12월 26일\n2     2020년 12월 27일\n3     2020년 12월 28일\n4     2020년 12월 29일\n          ...      \n95    2021년 03월 30일\n96    2021년 03월 31일\n97    2021년 04월 01일\n98    2021년 04월 02일\n99    2021년 04월 03일\nLength: 100, dtype: object\n\n\n````fxlqdbtqinee 연습 문제 4.8.1\n다음 명령으로 만들어진 데이터프레임에 대해 월별 value의 합계를 구하라. (힌트: groupby 메서드와 dt 접근자를 사용하라)\nnp.random.seed(0)\ndf = pd.DataFrame({\n    \"date\": pd.date_range(\"2020-12-25\", periods=100, freq=\"D\"), \n    \"value\": np.random.randint(100, size=(100,))\n})\n````"
  },
  {
    "objectID": "04.06 데이터프레임 합성.html",
    "href": "04.06 데이터프레임 합성.html",
    "title": "4.6 데이터프레임 합성",
    "section": "",
    "text": "판다스는 두 개 이상의 데이터프레임을 하나로 합치는 데이터 병합(merge)이나 연결(concatenate)을 지원한다."
  },
  {
    "objectID": "04.06 데이터프레임 합성.html#merge-함수를-사용한-데이터프레임-병합",
    "href": "04.06 데이터프레임 합성.html#merge-함수를-사용한-데이터프레임-병합",
    "title": "4.6 데이터프레임 합성",
    "section": "merge 함수를 사용한 데이터프레임 병합",
    "text": "merge 함수를 사용한 데이터프레임 병합\n`merge`\nmerge 함수는 두 데이터 프레임의 공통 열 혹은 인덱스를 기준으로 두 개의 테이블을 합친다. 이 때 기준이 되는 열, 행의 데이터를 키(key)라고 한다.\n\ndf1 = pd.DataFrame({\n    '고객번호': [1001, 1002, 1003, 1004, 1005, 1006, 1007],\n    '이름': ['둘리', '도우너', '또치', '길동', '희동', '마이콜', '영희']\n}, columns=['고객번호', '이름'])\ndf1\n\n\n\n\n\n\n\n\n고객번호\n이름\n\n\n\n\n0\n1001\n둘리\n\n\n1\n1002\n도우너\n\n\n2\n1003\n또치\n\n\n3\n1004\n길동\n\n\n4\n1005\n희동\n\n\n5\n1006\n마이콜\n\n\n6\n1007\n영희\n\n\n\n\n\n\n\n\ndf2 = pd.DataFrame({\n    '고객번호': [1001, 1001, 1005, 1006, 1008, 1001],\n    '금액': [10000, 20000, 15000, 5000, 100000, 30000]\n}, columns=['고객번호', '금액'])\ndf2\n\n\n\n\n\n\n\n\n고객번호\n금액\n\n\n\n\n0\n1001\n10000\n\n\n1\n1001\n20000\n\n\n2\n1005\n15000\n\n\n3\n1006\n5000\n\n\n4\n1008\n100000\n\n\n5\n1001\n30000\n\n\n\n\n\n\n\nmerge 함수로 위의 두 데이터프레임 df1, df2 를 합치면 공통 열인 고객번호 열을 기준으로 데이터를 찾아서 합친다. 이 때 기본적으로는 양쪽 데이터프레임에 모두 키가 존재하는 데이터만 보여주는 inner join 방식을 사용한다.\n\npd.merge(df1, df2)\n\n\n\n\n\n\n\n\n고객번호\n이름\n금액\n\n\n\n\n0\n1001\n둘리\n10000\n\n\n1\n1001\n둘리\n20000\n\n\n2\n1001\n둘리\n30000\n\n\n3\n1005\n희동\n15000\n\n\n4\n1006\n마이콜\n5000\n\n\n\n\n\n\n\nouter join 방식은 키 값이 한쪽에만 있어도 데이터를 보여준다.\n\npd.merge(df1, df2, how='outer')\n\n\n\n\n\n\n\n\n고객번호\n이름\n금액\n\n\n\n\n0\n1001\n둘리\n10000.0\n\n\n1\n1001\n둘리\n20000.0\n\n\n2\n1001\n둘리\n30000.0\n\n\n3\n1002\n도우너\nNaN\n\n\n4\n1003\n또치\nNaN\n\n\n5\n1004\n길동\nNaN\n\n\n6\n1005\n희동\n15000.0\n\n\n7\n1006\n마이콜\n5000.0\n\n\n8\n1007\n영희\nNaN\n\n\n9\n1008\nNaN\n100000.0\n\n\n\n\n\n\n\nleft, right 방식은 각각 첫번째, 혹은 두번째 데이터프레임의 키 값을 모두 보여준다.\n\npd.merge(df1, df2, how='left')\n\n\n\n\n\n\n\n\n고객번호\n이름\n금액\n\n\n\n\n0\n1001\n둘리\n10000.0\n\n\n1\n1001\n둘리\n20000.0\n\n\n2\n1001\n둘리\n30000.0\n\n\n3\n1002\n도우너\nNaN\n\n\n4\n1003\n또치\nNaN\n\n\n5\n1004\n길동\nNaN\n\n\n6\n1005\n희동\n15000.0\n\n\n7\n1006\n마이콜\n5000.0\n\n\n8\n1007\n영희\nNaN\n\n\n\n\n\n\n\n\npd.merge(df1, df2, how='right')\n\n\n\n\n\n\n\n\n고객번호\n이름\n금액\n\n\n\n\n0\n1001\n둘리\n10000\n\n\n1\n1001\n둘리\n20000\n\n\n2\n1001\n둘리\n30000\n\n\n3\n1005\n희동\n15000\n\n\n4\n1006\n마이콜\n5000\n\n\n5\n1008\nNaN\n100000\n\n\n\n\n\n\n\n만약 테이블에 키 값이 같은 데이터가 여러개 있는 경우에는 있을 수 있는 모든 경우의 수를 따져서 조합을 만들어 낸다.\n\ndf1 = pd.DataFrame({\n    '품종': ['setosa', 'setosa', 'virginica', 'virginica'],\n    '꽃잎길이': [1.4, 1.3, 1.5, 1.3]},\n    columns=['품종', '꽃잎길이'])\ndf1\n\n\n\n\n\n\n\n\n품종\n꽃잎길이\n\n\n\n\n0\nsetosa\n1.4\n\n\n1\nsetosa\n1.3\n\n\n2\nvirginica\n1.5\n\n\n3\nvirginica\n1.3\n\n\n\n\n\n\n\n\ndf2 = pd.DataFrame({\n    '품종': ['setosa', 'virginica', 'virginica', 'versicolor'],\n    '꽃잎너비': [0.4, 0.3, 0.5, 0.3]},\n    columns=['품종', '꽃잎너비'])\ndf2\n\n\n\n\n\n\n\n\n품종\n꽃잎너비\n\n\n\n\n0\nsetosa\n0.4\n\n\n1\nvirginica\n0.3\n\n\n2\nvirginica\n0.5\n\n\n3\nversicolor\n0.3\n\n\n\n\n\n\n\n이 데이터에서 키 값 setosa에 대해 왼쪽 데이터프레임는 1.4와 1.3라는 2개의 데이터, 오른쪽 데이터프레임에 0.4라는 1개의 데이터가 있으므로 병합된 데이터에는 setosa가 (1.4, 0.4), (1.3, 0.4) 두 개의 데이터가 생긴다. 키 값 virginica의 경우에는 왼쪽 데이터프레임에 1.5와 1.3라는 2개의 데이터, 오른쪽 데이터프레임에 0.3와 0.5라는 2개의 데이터가 있으므로 2개와 2개의 조합에 의해 4가지 값이 생긴다.\n\npd.merge(df1, df2)\n\n\n\n\n\n\n\n\n품종\n꽃잎길이\n꽃잎너비\n\n\n\n\n0\nsetosa\n1.4\n0.4\n\n\n1\nsetosa\n1.3\n0.4\n\n\n2\nvirginica\n1.5\n0.3\n\n\n3\nvirginica\n1.5\n0.5\n\n\n4\nvirginica\n1.3\n0.3\n\n\n5\nvirginica\n1.3\n0.5\n\n\n\n\n\n\n\n두 데이터프레임에서 이름이 같은 열은 모두 키가 된다. 만약 이름이 같아도 키가 되면 안되는 열이 있다면 on 인수로 기준열을 명시해야 한다. 다음 예에서 첫번째 데이터프레임의 “데이터”는 실제로는 금액을 나타내는 데이터이고 두번째 데이터프레임의 “데이터”는 실제로는 성별을 나타내는 데이터이므로 이름이 같아도 다른 데이터이다. 따라서 이 열은 기준열이 되면 안된다.\n\ndf1 = pd.DataFrame({\n    '고객명': ['춘향', '춘향', '몽룡'],\n    '날짜': ['2018-01-01', '2018-01-02', '2018-01-01'],\n    '데이터': ['20000', '30000', '100000']})\ndf1\n\n\n\n\n\n\n\n\n고객명\n날짜\n데이터\n\n\n\n\n0\n춘향\n2018-01-01\n20000\n\n\n1\n춘향\n2018-01-02\n30000\n\n\n2\n몽룡\n2018-01-01\n100000\n\n\n\n\n\n\n\n\ndf2 = pd.DataFrame({\n    '고객명': ['춘향', '몽룡'],\n    '데이터': ['여자', '남자']})\ndf2\n\n\n\n\n\n\n\n\n고객명\n데이터\n\n\n\n\n0\n춘향\n여자\n\n\n1\n몽룡\n남자\n\n\n\n\n\n\n\n\npd.merge(df1, df2, on='고객명')\n\n\n\n\n\n\n\n\n고객명\n날짜\n데이터_x\n데이터_y\n\n\n\n\n0\n춘향\n2018-01-01\n20000\n여자\n\n\n1\n춘향\n2018-01-02\n30000\n여자\n\n\n2\n몽룡\n2018-01-01\n100000\n남자\n\n\n\n\n\n\n\n이 때 기준 열이 아니면서 이름이 같은 열에는 _x 또는 _y 와 같은 접미사가 붙는다.\n반대로 키가 되는 기준열의 이름이 두 데이터프레임에서 다르다면 left_on, right_on 인수를 사용하여 기준열을 명시해야 한다.\n\ndf1 = pd.DataFrame({\n    '이름': ['영희', '철수', '철수'],\n    '성적': [1, 2, 3]})\ndf1\n\n\n\n\n\n\n\n\n이름\n성적\n\n\n\n\n0\n영희\n1\n\n\n1\n철수\n2\n\n\n2\n철수\n3\n\n\n\n\n\n\n\n\ndf2 = pd.DataFrame({\n    '성명': ['영희', '영희', '철수'],\n    '성적2': [4, 5, 6]})\ndf2\n\n\n\n\n\n\n\n\n성명\n성적2\n\n\n\n\n0\n영희\n4\n\n\n1\n영희\n5\n\n\n2\n철수\n6\n\n\n\n\n\n\n\n\npd.merge(df1, df2, left_on='이름', right_on=\"성명\")\n\n\n\n\n\n\n\n\n이름\n성적\n성명\n성적2\n\n\n\n\n0\n영희\n1\n영희\n4\n\n\n1\n영희\n1\n영희\n5\n\n\n2\n철수\n2\n철수\n6\n\n\n3\n철수\n3\n철수\n6\n\n\n\n\n\n\n\n일반 데이터 열이 아닌 인덱스를 기준열로 사용하려면 left_index 또는 right_index 인수를 True 로 설정한다.\n\ndf1 = pd.DataFrame({\n    '도시': ['서울', '서울', '서울', '부산', '부산'],\n    '연도': [2000, 2005, 2010, 2000, 2005],\n    '인구': [9853972, 9762546, 9631482, 3655437, 3512547]})\ndf1\n\n\n\n\n\n\n\n\n도시\n연도\n인구\n\n\n\n\n0\n서울\n2000\n9853972\n\n\n1\n서울\n2005\n9762546\n\n\n2\n서울\n2010\n9631482\n\n\n3\n부산\n2000\n3655437\n\n\n4\n부산\n2005\n3512547\n\n\n\n\n\n\n\n\ndf2 = pd.DataFrame(\n    np.arange(12).reshape((6, 2)),\n    index=[['부산', '부산', '서울', '서울', '서울', '서울'],\n           [2000, 2005, 2000, 2005, 2010, 2015]],\n    columns=['데이터1', '데이터2'])\ndf2\n\n\n\n\n\n\n\n\n\n데이터1\n데이터2\n\n\n\n\n부산\n2000\n0\n1\n\n\n2005\n2\n3\n\n\n서울\n2000\n4\n5\n\n\n2005\n6\n7\n\n\n2010\n8\n9\n\n\n2015\n10\n11\n\n\n\n\n\n\n\n\npd.merge(df1, df2, left_on=['도시', '연도'], right_index=True)\n\n\n\n\n\n\n\n\n도시\n연도\n인구\n데이터1\n데이터2\n\n\n\n\n0\n서울\n2000\n9853972\n4\n5\n\n\n1\n서울\n2005\n9762546\n6\n7\n\n\n2\n서울\n2010\n9631482\n8\n9\n\n\n3\n부산\n2000\n3655437\n0\n1\n\n\n4\n부산\n2005\n3512547\n2\n3\n\n\n\n\n\n\n\n\ndf1 = pd.DataFrame(\n    [[1., 2.], [3., 4.], [5., 6.]],\n    index=['a', 'c', 'e'],\n    columns=['서울', '부산'])\ndf1\n\n\n\n\n\n\n\n\n서울\n부산\n\n\n\n\na\n1.0\n2.0\n\n\nc\n3.0\n4.0\n\n\ne\n5.0\n6.0\n\n\n\n\n\n\n\n\ndf2 = pd.DataFrame(\n    [[7., 8.], [9., 10.], [11., 12.], [13, 14]],\n    index=['b', 'c', 'd', 'e'],\n    columns=['대구', '광주'])\ndf2\n\n\n\n\n\n\n\n\n대구\n광주\n\n\n\n\nb\n7.0\n8.0\n\n\nc\n9.0\n10.0\n\n\nd\n11.0\n12.0\n\n\ne\n13.0\n14.0\n\n\n\n\n\n\n\n\npd.merge(df1, df2, how='outer', left_index=True, right_index=True)\n\n\n\n\n\n\n\n\n서울\n부산\n대구\n광주\n\n\n\n\na\n1.0\n2.0\nNaN\nNaN\n\n\nb\nNaN\nNaN\n7.0\n8.0\n\n\nc\n3.0\n4.0\n9.0\n10.0\n\n\nd\nNaN\nNaN\n11.0\n12.0\n\n\ne\n5.0\n6.0\n13.0\n14.0\n\n\n\n\n\n\n\n\njoin 메서드\nmerge 명령어 대신 join 메서드를 사용할 수도 있다.\n\ndf1.join(df2, how='outer')\n\n\n\n\n\n\n\n\n서울\n부산\n대구\n광주\n\n\n\n\na\n1.0\n2.0\nNaN\nNaN\n\n\nb\nNaN\nNaN\n7.0\n8.0\n\n\nc\n3.0\n4.0\n9.0\n10.0\n\n\nd\nNaN\nNaN\n11.0\n12.0\n\n\ne\n5.0\n6.0\n13.0\n14.0\n\n\n\n\n\n\n\n````kddudmkywrdt 연습 문제 4.6.1\n두 개의 데이터프레임을 만들고 merge 명령으로 합친다. 단 데이터프레임은 다음 조건을 만족해야 한다.\n\n각각 5 x 5 이상의 크기를 가진다.\n공통 열을 하나 이상 가진다. 다만 공통 열의 이름은 서로 다르다.\n\n\n## `concat` 함수를 사용한 데이터 연결\n\n\n```{margin}\n`concat`\n```\n\n\n`concat` 함수를 사용하면 기준 열(key column)을 사용하지 않고 단순히 데이터를 연결(concatenate)한다.\n\n기본적으로는 위/아래로 데이터 행을 연결한다. 단순히 두 시리즈나 데이터프레임을 연결하기 때문에 인덱스 값이 중복될 수 있다. \n\n::: {#cell-43 .cell school_cell_uuid='9728e65012484a409c1b5654cf67871f' execution_count=23}\n``` {.python .cell-code}\ns1 = pd.Series([0, 1], index=['A', 'B'])\ns2 = pd.Series([2, 3, 4], index=['A', 'B', 'C'])\n```\n:::\n\n\n::: {#cell-44 .cell school_cell_uuid='eee3eb61c0774de088feecc6583846e3' execution_count=24}\n``` {.python .cell-code}\ns1\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nA    0\nB    1\ndtype: int64\n```\n:::\n:::\n\n\n::: {#cell-45 .cell school_cell_uuid='8fc57c638a6440ad955b7c9fab302725' execution_count=25}\n``` {.python .cell-code}\ns2\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nA    2\nB    3\nC    4\ndtype: int64\n```\n:::\n:::\n\n\n::: {#cell-46 .cell school_cell_uuid='3fc8856b6d5740f9a80b57c0a171c323' execution_count=26}\n``` {.python .cell-code}\npd.concat([s1, s2])\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nA    0\nB    1\nA    2\nB    3\nC    4\ndtype: int64\n```\n:::\n:::\n\n\n만약 옆으로 데이터 열을 연결하고 싶으면 `axis=1`로 인수를 설정한다.\n\n::: {#cell-48 .cell school_cell_uuid='33473e4aeba0432abe750caf376d93e2' execution_count=27}\n``` {.python .cell-code}\ndf1 = pd.DataFrame(\n    np.arange(6).reshape(3, 2),\n    index=['a', 'b', 'c'],\n    columns=['데이터1', '데이터2'])\ndf1\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;데이터1&lt;/th&gt;\n      &lt;th&gt;데이터2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;a&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;b&lt;/th&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;c&lt;/th&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;5&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-49 .cell school_cell_uuid='eedb9d4110ac4cb99341b851d61d8605' execution_count=28}\n``` {.python .cell-code}\ndf2 = pd.DataFrame(\n    5 + np.arange(4).reshape(2, 2),\n    index=['a', 'c'],\n    columns=['데이터3', '데이터4'])\ndf2\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;데이터3&lt;/th&gt;\n      &lt;th&gt;데이터4&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;a&lt;/th&gt;\n      &lt;td&gt;5&lt;/td&gt;\n      &lt;td&gt;6&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;c&lt;/th&gt;\n      &lt;td&gt;7&lt;/td&gt;\n      &lt;td&gt;8&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-50 .cell school_cell_uuid='43614010ef0349a5aae59792d3bb9ca2' execution_count=29}\n``` {.python .cell-code}\npd.concat([df1, df2], axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;데이터1&lt;/th&gt;\n      &lt;th&gt;데이터2&lt;/th&gt;\n      &lt;th&gt;데이터3&lt;/th&gt;\n      &lt;th&gt;데이터4&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;a&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;5.0&lt;/td&gt;\n      &lt;td&gt;6.0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;b&lt;/th&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;c&lt;/th&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;5&lt;/td&gt;\n      &lt;td&gt;7.0&lt;/td&gt;\n      &lt;td&gt;8.0&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 2\n\n어느 회사의 전반기(1월 ~ 6월) 실적을 나타내는 데이터프레임과 후반기(7월 ~ 12월) 실적을 나타내는 데이터프레임을 만든 뒤 합친다.\n실적 정보는 \"매출\", \"비용\", \"이익\" 으로 이루어진다. (이익 = 매출 - 비용).\n\n또한 1년간의 총 실적을 마지막 행으로 덧붙인다."
  },
  {
    "objectID": "04.04 데이터프레임의 데이터 조작.html",
    "href": "04.04 데이터프레임의 데이터 조작.html",
    "title": "4.4 데이터프레임의 데이터 조작",
    "section": "",
    "text": "판다스는 넘파이 2차원 배열에서 가능한 대부분의 데이터 처리가 가능하며 추가로 데이터 처리 및 변환을 위한 다양한 함수와 메서드를 제공한다."
  },
  {
    "objectID": "04.04 데이터프레임의 데이터 조작.html#데이터-갯수-세기",
    "href": "04.04 데이터프레임의 데이터 조작.html#데이터-갯수-세기",
    "title": "4.4 데이터프레임의 데이터 조작",
    "section": "데이터 갯수 세기",
    "text": "데이터 갯수 세기\n`count`\n가장 간단한 데이터 분석은 데이터의 갯수를 세는 것이다. count 메서드를 사용한다. NaN 값은 세지 않는다.\n\ns = pd.Series(range(10))\ns[3] = np.nan\ns\n\n0    0.0\n1    1.0\n2    2.0\n3    NaN\n4    4.0\n5    5.0\n6    6.0\n7    7.0\n8    8.0\n9    9.0\ndtype: float64\n\n\n\ns.count()\n\n9\n\n\n데이터프레임에서는 각 열마다 별도로 데이터 갯수를 센다. 데이터에서 값이 누락된 부분을 찾을 때 유용하다.\n\nnp.random.seed(2)\ndf = pd.DataFrame(np.random.randint(5, size=(4, 4)), dtype=float)\ndf.iloc[2, 3] = np.nan\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n0.0\n0.0\n3.0\n2.0\n\n\n1\n3.0\n0.0\n2.0\n1.0\n\n\n2\n3.0\n2.0\n4.0\nNaN\n\n\n3\n4.0\n3.0\n4.0\n2.0\n\n\n\n\n\n\n\n\ndf.count()\n\n0    4\n1    4\n2    4\n3    3\ndtype: int64\n\n\n다음 명령으로 타이타닉호의 승객 데이터를 데이터프레임으로 읽어올 수 있다. 이 명령을 실행하려면 seaborn 패키지가 설치되어 있어야 한다.\n\nimport seaborn as sns\ntitanic = sns.load_dataset(\"titanic\")\ntitanic.head()\n\n\n\n\n\n\n\n\nsurvived\npclass\nsex\nage\nsibsp\nparch\nfare\nembarked\nclass\nwho\nadult_male\ndeck\nembark_town\nalive\nalone\n\n\n\n\n0\n0\n3\nmale\n22.0\n1\n0\n7.2500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nFalse\n\n\n1\n1\n1\nfemale\n38.0\n1\n0\n71.2833\nC\nFirst\nwoman\nFalse\nC\nCherbourg\nyes\nFalse\n\n\n2\n1\n3\nfemale\n26.0\n0\n0\n7.9250\nS\nThird\nwoman\nFalse\nNaN\nSouthampton\nyes\nTrue\n\n\n3\n1\n1\nfemale\n35.0\n1\n0\n53.1000\nS\nFirst\nwoman\nFalse\nC\nSouthampton\nyes\nFalse\n\n\n4\n0\n3\nmale\n35.0\n0\n0\n8.0500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nTrue\n\n\n\n\n\n\n\n````tzfrqnmhtvov 연습 문제 4.4.1\n타이타닉호 승객 데이터의 데이터 개수를 각 열마다 구해본다.\n\n## 카테고리 값 세기\n\n\n```{margin}\n`value_counts`\n```\n\n\n시리즈의 값이 정수, 문자열, 카테고리 값인 경우에는 `value_counts` 메서드로 각각의 값이 나온 횟수를 셀 수 있다.\n\n::: {#cell-17 .cell school_cell_uuid='992cb9b1a3634783a9f3a5e96a6834db' execution_count=6}\n``` {.python .cell-code}\nnp.random.seed(1)\ns2 = pd.Series(np.random.randint(6, size=100))\ns2.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n95    4\n96    5\n97    2\n98    4\n99    3\ndtype: int64\n```\n:::\n:::\n\n\n::: {#cell-18 .cell execution_count=7}\n``` {.python .cell-code}\ns2.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n1    22\n0    18\n4    17\n5    16\n3    14\n2    13\ndtype: int64\n```\n:::\n:::\n\n\n데이터프레임에는 `value_counts` 메서드가 없으므로 각 열마다 별도로 적용해야 한다.\n\n::: {#cell-20 .cell school_cell_uuid='a8b131c3cb914b9ba0178e4e2c09bc11' execution_count=8}\n``` {.python .cell-code}\ndf[0].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n3.0    2\n4.0    1\n0.0    1\nName: 0, dtype: int64\n```\n:::\n:::\n\n\n## 정렬\n\n\n```{margin}\n`sort_index`\n```\n\n```{margin}\n`sort_values`\n```\n\n\n데이터를 정렬하려면 `sort_index` 메서드 `sort_values` 메서드를 사용한다. `sort_index` 메서드는 인덱스 값을 기준으로, `sort_values` 메서드는 데이터 값을 기준으로 정렬한다.\n\n앞에서 `s2` 시리즈의 각 데이터 값에 따른 데이터 갯수를 인덱스에 따라 정렬하려면 다음처럼 `sort_index`를 적용한다.\n\n::: {#cell-25 .cell school_cell_uuid='edb6d322399e48cdad010d3aec63ca6c' execution_count=9}\n``` {.python .cell-code}\ns2.value_counts().sort_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0    18\n1    22\n2    13\n3    14\n4    17\n5    16\ndtype: int64\n```\n:::\n:::\n\n\nNaN값이 있는 경우에는 정렬하면 NaN값이 가장 나중으로 간다.\n\n::: {#cell-27 .cell school_cell_uuid='fb8f40c9e82e48a1a396eb38831811f7' execution_count=10}\n``` {.python .cell-code}\ns.sort_values()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0    0.0\n1    1.0\n2    2.0\n4    4.0\n5    5.0\n6    6.0\n7    7.0\n8    8.0\n9    9.0\n3    NaN\ndtype: float64\n```\n:::\n:::\n\n\n큰 수에서 작은 수로 반대 방향 정렬하려면 `ascending=False` 인수를 지정한다.\n\n::: {#cell-29 .cell school_cell_uuid='1b5d13aaa77a4b918198bb73275a761d' execution_count=11}\n``` {.python .cell-code}\ns.sort_values(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n9    9.0\n8    8.0\n7    7.0\n6    6.0\n5    5.0\n4    4.0\n2    2.0\n1    1.0\n0    0.0\n3    NaN\ndtype: float64\n```\n:::\n:::\n\n\n데이터프레임에서 `sort_values` 메서드를 사용하려면 `by` 인수로 정렬 기준이 되는 열을 지정해 주어야 한다.\n\n::: {#cell-31 .cell school_cell_uuid='8cb3762a4ac348d198d2a82d39d99a15' execution_count=12}\n``` {.python .cell-code}\ndf.sort_values(by=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;th&gt;3&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;0.0&lt;/td&gt;\n      &lt;td&gt;0.0&lt;/td&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;0.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;1.0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;4.0&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;4.0&lt;/td&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;4.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n`by` 인수에 리스트 값을 넣으면 이 순서대로 정렬 기준의 우선 순위가 된다. 즉, 리스트의 첫번째 열을 기준으로 정렬한 후 동일한 값이 나오면 그 다음 열로 순서를 따지게 된다.\n\n::: {#cell-33 .cell school_cell_uuid='579b0ea2b01043969dd660c78f3cbac2' execution_count=13}\n``` {.python .cell-code}\ndf.sort_values(by=[1, 2])\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;th&gt;3&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;0.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;1.0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;0.0&lt;/td&gt;\n      &lt;td&gt;0.0&lt;/td&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;4.0&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;4.0&lt;/td&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;4.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 4.4.2\n\n`sort_values` 메서드를 사용하여 타이타닉호 승객에 대해 성별(sex) 인원수, 나이별(age) 인원수, 선실별(class) 인원수, 사망/생존(alive) 인원수를 구하라."
  },
  {
    "objectID": "04.04 데이터프레임의 데이터 조작.html#행열-합계",
    "href": "04.04 데이터프레임의 데이터 조작.html#행열-합계",
    "title": "4.4 데이터프레임의 데이터 조작",
    "section": "행/열 합계",
    "text": "행/열 합계\n`sum`\n행과 열의 합계를 구할 때는 sum(axis) 메서드를 사용한다. axis 인수에는 합계로 인해 없어지는 방향축(0=행, 1=열)을 지정한다.\n\nnp.random.seed(1)\ndf2 = pd.DataFrame(np.random.randint(10, size=(4, 8)))\ndf2\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n\n\n\n\n0\n5\n8\n9\n5\n0\n0\n1\n7\n\n\n1\n6\n9\n2\n4\n5\n2\n4\n2\n\n\n2\n4\n7\n7\n9\n1\n7\n0\n6\n\n\n3\n9\n9\n7\n6\n9\n1\n0\n1\n\n\n\n\n\n\n\n행방향 합계를 구할 때는 sum(axis=1) 메서드를 사용한다.\n\ndf2.sum(axis=1)\n\n0    35\n1    34\n2    41\n3    42\ndtype: int64\n\n\n\ndf2[\"RowSum\"] = df2.sum(axis=1)\ndf2\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\nRowSum\n\n\n\n\n0\n5\n8\n9\n5\n0\n0\n1\n7\n35\n\n\n1\n6\n9\n2\n4\n5\n2\n4\n2\n34\n\n\n2\n4\n7\n7\n9\n1\n7\n0\n6\n41\n\n\n3\n9\n9\n7\n6\n9\n1\n0\n1\n42\n\n\n\n\n\n\n\n열 합계를 구할 때는 sum(axis=0) 메서드를 사용하는데 axis인수의 디폴트 값이 0이므로 axis인수를 생략할 수 있다.\n\ndf2.sum()\n\n0          24\n1          33\n2          25\n3          24\n4          15\n5          10\n6           5\n7          16\nRowSum    152\ndtype: int64\n\n\n\ndf2.loc[\"ColTotal\", :] = df2.sum()\ndf2\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\nRowSum\n\n\n\n\n0\n5.0\n8.0\n9.0\n5.0\n0.0\n0.0\n1.0\n7.0\n35.0\n\n\n1\n6.0\n9.0\n2.0\n4.0\n5.0\n2.0\n4.0\n2.0\n34.0\n\n\n2\n4.0\n7.0\n7.0\n9.0\n1.0\n7.0\n0.0\n6.0\n41.0\n\n\n3\n9.0\n9.0\n7.0\n6.0\n9.0\n1.0\n0.0\n1.0\n42.0\n\n\nColTotal\n24.0\n33.0\n25.0\n24.0\n15.0\n10.0\n5.0\n16.0\n152.0\n\n\n\n\n\n\n\n`mean`\nmean 메서드는 평균을 구하며 sum 메서드와 사용법이 같다.\n````tzfrqnmhtvov 연습 문제 4.4.3\n\n타이타닉호 승객의 평균 나이를 구하라.\n타이타닉호 승객중 여성 승객의 평균 나이를 구하라.\n타이타닉호 승객중 1등실 선실의 여성 승객의 평균 나이를 구하라.\n\n\n## `apply` 변환\n\n행이나 열 단위로 더 복잡한 처리를 하고 싶을 때는 `apply` 메서드를 사용한다. 인수로 행 또는 열을 받는 함수를 `apply` 메서드의 인수로 넣으면 각 열(또는 행)을 반복하여 그 함수에 적용시킨다. \n\n::: {#cell-49 .cell school_cell_uuid='4702f3d64a7d4f259fc6def7714f0dc9' execution_count=19}\n``` {.python .cell-code}\ndf3 = pd.DataFrame({\n    'A': [1, 3, 4, 3, 4],\n    'B': [2, 3, 1, 2, 3],\n    'C': [1, 5, 2, 4, 4]\n})\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;5&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n예를 들어 각 열의 최대값과 최소값의 차이를 구하고 싶으면 다음과 같은 람다 함수를 넣는다.\n\n::: {#cell-51 .cell school_cell_uuid='03ece47f9c944d75890a488dacf7a342' execution_count=20}\n``` {.python .cell-code}\ndf3.apply(lambda x: x.max() - x.min())\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nA    3\nB    2\nC    4\ndtype: int64\n```\n:::\n:::\n\n\n만약 행에 대해 적용하고 싶으면 `axis=1` 인수를 쓴다.\n\n::: {#cell-53 .cell school_cell_uuid='888a82bf2ae84aa58d7e0653ddd482a7' execution_count=21}\n``` {.python .cell-code}\ndf3.apply(lambda x: x.max() - x.min(), axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n0    1\n1    2\n2    3\n3    2\n4    1\ndtype: int64\n```\n:::\n:::\n\n\n각 열에 대해 어떤 값이 얼마나 사용되었는지 알고 싶다면 `value_counts` 함수를 넣으면 된다.\n\n::: {#cell-55 .cell school_cell_uuid='f75cf5ec3249468ba1d59a6fa7c7dfaa' execution_count=22}\n``` {.python .cell-code}\ndf3.apply(pd.value_counts)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.0&lt;/td&gt;\n      &lt;td&gt;1.0&lt;/td&gt;\n      &lt;td&gt;1.0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;1.0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;5&lt;/th&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;1.0&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n다음과 같이 타이타닉호의 승객 중 나이 20살을 기준으로 성인(adult)과 미성년자(child)를 구별하는 라벨 열을 만들 수 있다.\n\n::: {#cell-57 .cell execution_count=23}\n``` {.python .cell-code}\ntitanic[\"adult/child\"] = titanic.apply(lambda r: \"adult\" if r.age &gt;= 20 else \"child\", axis=1)\ntitanic.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;survived&lt;/th&gt;\n      &lt;th&gt;pclass&lt;/th&gt;\n      &lt;th&gt;sex&lt;/th&gt;\n      &lt;th&gt;age&lt;/th&gt;\n      &lt;th&gt;sibsp&lt;/th&gt;\n      &lt;th&gt;parch&lt;/th&gt;\n      &lt;th&gt;fare&lt;/th&gt;\n      &lt;th&gt;embarked&lt;/th&gt;\n      &lt;th&gt;class&lt;/th&gt;\n      &lt;th&gt;who&lt;/th&gt;\n      &lt;th&gt;adult_male&lt;/th&gt;\n      &lt;th&gt;deck&lt;/th&gt;\n      &lt;th&gt;embark_town&lt;/th&gt;\n      &lt;th&gt;alive&lt;/th&gt;\n      &lt;th&gt;alone&lt;/th&gt;\n      &lt;th&gt;adult/child&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;886&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;male&lt;/td&gt;\n      &lt;td&gt;27.0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;13.00&lt;/td&gt;\n      &lt;td&gt;S&lt;/td&gt;\n      &lt;td&gt;Second&lt;/td&gt;\n      &lt;td&gt;man&lt;/td&gt;\n      &lt;td&gt;True&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;Southampton&lt;/td&gt;\n      &lt;td&gt;no&lt;/td&gt;\n      &lt;td&gt;True&lt;/td&gt;\n      &lt;td&gt;adult&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;887&lt;/th&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;female&lt;/td&gt;\n      &lt;td&gt;19.0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;30.00&lt;/td&gt;\n      &lt;td&gt;S&lt;/td&gt;\n      &lt;td&gt;First&lt;/td&gt;\n      &lt;td&gt;woman&lt;/td&gt;\n      &lt;td&gt;False&lt;/td&gt;\n      &lt;td&gt;B&lt;/td&gt;\n      &lt;td&gt;Southampton&lt;/td&gt;\n      &lt;td&gt;yes&lt;/td&gt;\n      &lt;td&gt;True&lt;/td&gt;\n      &lt;td&gt;child&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;888&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;female&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;23.45&lt;/td&gt;\n      &lt;td&gt;S&lt;/td&gt;\n      &lt;td&gt;Third&lt;/td&gt;\n      &lt;td&gt;woman&lt;/td&gt;\n      &lt;td&gt;False&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;Southampton&lt;/td&gt;\n      &lt;td&gt;no&lt;/td&gt;\n      &lt;td&gt;False&lt;/td&gt;\n      &lt;td&gt;child&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;889&lt;/th&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;male&lt;/td&gt;\n      &lt;td&gt;26.0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;30.00&lt;/td&gt;\n      &lt;td&gt;C&lt;/td&gt;\n      &lt;td&gt;First&lt;/td&gt;\n      &lt;td&gt;man&lt;/td&gt;\n      &lt;td&gt;True&lt;/td&gt;\n      &lt;td&gt;C&lt;/td&gt;\n      &lt;td&gt;Cherbourg&lt;/td&gt;\n      &lt;td&gt;yes&lt;/td&gt;\n      &lt;td&gt;True&lt;/td&gt;\n      &lt;td&gt;adult&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;890&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;male&lt;/td&gt;\n      &lt;td&gt;32.0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;7.75&lt;/td&gt;\n      &lt;td&gt;Q&lt;/td&gt;\n      &lt;td&gt;Third&lt;/td&gt;\n      &lt;td&gt;man&lt;/td&gt;\n      &lt;td&gt;True&lt;/td&gt;\n      &lt;td&gt;NaN&lt;/td&gt;\n      &lt;td&gt;Queenstown&lt;/td&gt;\n      &lt;td&gt;no&lt;/td&gt;\n      &lt;td&gt;True&lt;/td&gt;\n      &lt;td&gt;adult&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 4.4.4\n\n타이타닉호의 승객에 대해 나이와 성별에 의한 카테고리 열인 `category1` 열을 만들어라. `category1` 카테고리는 다음과 같이 정의된다.\n\n1. 20살이 넘으면 성별을 그대로 사용한다.\n2. 20살 미만이면 성별에 관계없이 \"child\"라고 한다."
  },
  {
    "objectID": "04.04 데이터프레임의 데이터 조작.html#fillna-메서드",
    "href": "04.04 데이터프레임의 데이터 조작.html#fillna-메서드",
    "title": "4.4 데이터프레임의 데이터 조작",
    "section": "fillna 메서드",
    "text": "fillna 메서드\nNaN 값은 fillna 메서드를 사용하여 원하는 값으로 바꿀 수 있다.\n\ndf3.apply(pd.value_counts).fillna(0.0)\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n1\n1.0\n1.0\n1.0\n\n\n2\n0.0\n2.0\n1.0\n\n\n3\n2.0\n2.0\n0.0\n\n\n4\n2.0\n0.0\n2.0\n\n\n5\n0.0\n0.0\n1.0\n\n\n\n\n\n\n\n````tzfrqnmhtvov 연습 문제 4.4.5\n타이타닉호의 승객 중 나이를 명시하지 않은 고객은 나이를 명시한 고객의 평균 나이 값이 되도록 titanic 데이터프레임을 고쳐라.\n\n## `astype` 메서드\n\n`astype` 메서드로 전체 데이터의 자료형을 바꾸는 것도 가능하다.\n\n::: {#cell-65 .cell school_cell_uuid='1b2fea7973bb4359b350583d8be07024' execution_count=25}\n``` {.python .cell-code}\ndf3.apply(pd.value_counts).fillna(0).astype(int)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;5&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 4.4.6\n\n타이타닉호의 승객에 대해 나이와 성별에 의한 카테고리 열인 `category2` 열을 만들어라. `category2` 카테고리는 다음과 같이 정의된다.\n\n1. 성별을 나타내는 문자열 `male` 또는 `female`로 시작한다.\n2. 성별을 나타내는 문자열 뒤에 나이를 나타내는 문자열이 온다.\n3. 예를 들어 27살 남성은 `male27` 값이 된다."
  },
  {
    "objectID": "04.04 데이터프레임의 데이터 조작.html#실수-값을-카테고리-값으로-변환",
    "href": "04.04 데이터프레임의 데이터 조작.html#실수-값을-카테고리-값으로-변환",
    "title": "4.4 데이터프레임의 데이터 조작",
    "section": "실수 값을 카테고리 값으로 변환",
    "text": "실수 값을 카테고리 값으로 변환\n실수 값을 크기 기준으로 하여 카테고리 값으로 변환하고 싶을 때는 다음과 같은 명령을 사용한다.\n\ncut: 실수 값의 경계선을 지정하는 경우\nqcut: 갯수가 똑같은 구간으로 나누는 경우\n\n예를 들어 다음과 같은 나이 데이터가 있다고 하자.\n\nages = [0, 2, 10, 21, 23, 37, 31, 61, 20, 41, 32, 101]\n\ncut 명령을 사용하면 실수값을 다음처럼 카테고리 값으로 바꿀 수 있다. bins 인수는 카테고리를 나누는 기준값이 된다. 영역을 넘는 값은 NaN으로 처리된다.\n\nbins = [1, 20, 30, 50, 70, 100]\nlabels = [\"미성년자\", \"청년\", \"중년\", \"장년\", \"노년\"]\ncats = pd.cut(ages, bins, labels=labels)\ncats\n\n[NaN, 미성년자, 미성년자, 청년, 청년, ..., 장년, 미성년자, 중년, 중년, NaN]\nLength: 12\nCategories (5, object): [미성년자 &lt; 청년 &lt; 중년 &lt; 장년 &lt; 노년]\n\n\ncut 명령이 반환하는 값은 Categorical 클래스 객체이다. 이 객체는 categories 속성으로 라벨 문자열을, codes 속성으로 정수로 인코딩한 카테고리 값을 가진다.\n\ntype(cats)\n\npandas.core.arrays.categorical.Categorical\n\n\n\ncats.categories\n\nIndex(['미성년자', '청년', '중년', '장년', '노년'], dtype='object')\n\n\n\ncats.codes\n\narray([-1,  0,  0,  1,  1,  2,  2,  3,  0,  2,  2, -1], dtype=int8)\n\n\n\ndf4 = pd.DataFrame(ages, columns=[\"ages\"])\ndf4[\"age_cat\"] = pd.cut(df4.ages, bins, labels=labels)\ndf4\n\n\n\n\n\n\n\n\nages\nage_cat\n\n\n\n\n0\n0\nNaN\n\n\n1\n2\n미성년자\n\n\n2\n10\n미성년자\n\n\n3\n21\n청년\n\n\n4\n23\n청년\n\n\n5\n37\n중년\n\n\n6\n31\n중년\n\n\n7\n61\n장년\n\n\n8\n20\n미성년자\n\n\n9\n41\n중년\n\n\n10\n32\n중년\n\n\n11\n101\nNaN\n\n\n\n\n\n\n\n따라서 위 데이터프레임의 age_cat 열값은 문자열이 아니다. 이를 문자열로 만들려면 astype 메서드를 사용해야 한다.\n\ndf4.age_cat.astype(str) + df4.ages.astype(str)\n\n0       nan0\n1      미성년자2\n2     미성년자10\n3       청년21\n4       청년23\n5       중년37\n6       중년31\n7       장년61\n8     미성년자20\n9       중년41\n10      중년32\n11    nan101\ndtype: object\n\n\nqcut 명령은 구간 경계선을 지정하지 않고 데이터 갯수가 같도록 지정한 수의 구간으로 나눈다. 예를 들어 다음 코드는 1000개의 데이터를 4개의 구간으로 나누는데 각 구간은 250개씩의 데이터를 가진다.\n\ndata = np.random.randn(1000)\ncats = pd.qcut(data, 4, labels=[\"Q1\", \"Q2\", \"Q3\", \"Q4\"])\ncats\n\n[Q2, Q1, Q2, Q3, Q1, ..., Q1, Q1, Q4, Q4, Q2]\nLength: 1000\nCategories (4, object): [Q1 &lt; Q2 &lt; Q3 &lt; Q4]\n\n\n\npd.value_counts(cats)\n\nQ4    250\nQ3    250\nQ2    250\nQ1    250\ndtype: int64\n\n\n````tzfrqnmhtvov 연습 문제 4.4.7\n타이타닉호 승객을 ‘미성년자’, ‘청년’, ‘중년’, ‘장년’, ‘노년’ 나이 그룹으로 나눈다.\nbins = [1, 20, 30, 50, 70, 100]\nlabels = [\"미성년자\", \"청년\", \"중년\", \"장년\", \"노년\"]\n그리고 각 나이 그룹의 승객 비율을 구한다. 비율의 전체 합은 1이 되어야 한다.\n\n````{admonition} 연습 문제 4.4.8\n\n타이타닉호의 승객에 대해 나이와 성별에 의한 카테고리 열인 `category3` 열을 만들어라. `category3` 카테고리는 다음과 같이 정의된다.\n\n1. 20살 미만이면 성별에 관계없이 \"미성년자\"라고 한다.\n2. 20살 이상이면 나이에 따라 \"청년\", \"중년\", \"장년\", \"노년\"을 구분하고 그 뒤에 성별을 나타내는 \"남성\", \"여성\"을 붙인다."
  },
  {
    "objectID": "04.02 데이터 입출력.html",
    "href": "04.02 데이터 입출력.html",
    "title": "4.2 데이터 입출력",
    "section": "",
    "text": "Pandas는 데이터 파일을 읽어 데이터프레임을 만들 수 있다. 다음처럼 여러가지 포맷을 지원한다.\n여기에서는 가장 단순하지만 널리 사용되는 CSV(Comman Separated Value) 포맷 입출력에 대해 살펴본다. CSV 파일 포맷은 데이터 값이 쉽표(comma)로 구분되는 텍스트 파일이다."
  },
  {
    "objectID": "04.02 데이터 입출력.html#writefile-명령",
    "href": "04.02 데이터 입출력.html#writefile-명령",
    "title": "4.2 데이터 입출력",
    "section": "%%writefile 명령",
    "text": "%%writefile 명령\n샘플 데이터로 사용할 CSV 파일을 %%writefile 매직(magic) 명령으로 만들어보자. 이 명령은 셀에 서술한 내용대로 텍스트 파일을 만드는 명령이다.\n\n%%writefile sample1.csv\nc1, c2, c3\n1, 1.11, one\n2, 2.22, two\n3, 3.33, three\n\nWriting sample1.csv"
  },
  {
    "objectID": "04.02 데이터 입출력.html#csv-파일-입력",
    "href": "04.02 데이터 입출력.html#csv-파일-입력",
    "title": "4.2 데이터 입출력",
    "section": "CSV 파일 입력",
    "text": "CSV 파일 입력\nCSV 파일로부터 데이터를 읽어 데이터프레임을 만들 때는 pandas.read_csv 함수를 사용한다. 함수의 입력값으로 파일 이름을 넣는다.\n\npd.read_csv('sample1.csv')\n\n\n\n\n\n\n\n\nc1\nc2\nc3\n\n\n\n\n0\n1\n1.11\none\n\n\n1\n2\n2.22\ntwo\n\n\n2\n3\n3.33\nthree\n\n\n\n\n\n\n\n위에서 읽은 데이터에는 열 인덱스는 있지만 행 인덱스 정보가 없으므로 0부터 시작하는 정수 인덱스가 자동으로 추가되었다.\n만약 데이터 파일에 열 인덱스 정보가 없는 경우에는 read_csv 명령의 names 인수로 설정할 수 있다.\n\n%%writefile sample2.csv\n1, 1.11, one\n2, 2.22, two\n3, 3.33, three\n\nWriting sample2.csv\n\n\n\npd.read_csv('sample2.csv', names=['c1', 'c2', 'c3'])\n\n\n\n\n\n\n\n\nc1\nc2\nc3\n\n\n\n\n0\n1\n1.11\none\n\n\n1\n2\n2.22\ntwo\n\n\n2\n3\n3.33\nthree\n\n\n\n\n\n\n\n만약 테이블 내의 특정한 열을 행 인덱스로 지정하고 싶으면 index_col 인수를 사용한다.\n\npd.read_csv('sample1.csv', index_col='c1')\n\n\n\n\n\n\n\n\nc2\nc3\n\n\nc1\n\n\n\n\n\n\n1\n1.11\none\n\n\n2\n2.22\ntwo\n\n\n3\n3.33\nthree\n\n\n\n\n\n\n\n확장자가 CSV가 아닌 파일 즉, 데이터를 구분하는 구분자(separator)가 쉼표(comma)가 아니면 sep 인수를 써서 구분자를 사용자가 지정해준다. 만약 길이가 정해지지 않은 공백이 구분자인 경우에는 \\s+ 정규식(regular expression) 문자열을 사용한다.\n\n%%writefile sample3.txt\nc1        c2        c3        c4\n0.179181 -1.538472  1.347553  0.43381\n1.024209  0.087307 -1.281997  0.49265\n0.417899 -2.002308  0.255245 -1.10515\n\nWriting sample3.txt\n\n\n\npd.read_table('sample3.txt', sep='\\s+')\n\n\n\n\n\n\n\n\nc1\nc2\nc3\nc4\n\n\n\n\n0\n0.179181\n-1.538472\n1.347553\n0.43381\n\n\n1\n1.024209\n0.087307\n-1.281997\n0.49265\n\n\n2\n0.417899\n-2.002308\n0.255245\n-1.10515\n\n\n\n\n\n\n\n만약 자료 파일 중에 건너 뛰어야 할 행이 있으면 skiprows 인수를 사용한다.\n\n%%writefile sample4.txt\n파일 제목: sample4.txt\n데이터 포맷의 설명:\nc1, c2, c3\n1, 1.11, one\n2, 2.22, two\n3, 3.33, three\n\nWriting sample4.txt\n\n\n\npd.read_csv('sample4.txt', skiprows=[0, 1])\n\n\n\n\n\n\n\n\nc1\nc2\nc3\n\n\n\n\n0\n1\n1.11\none\n\n\n1\n2\n2.22\ntwo\n\n\n2\n3\n3.33\nthree\n\n\n\n\n\n\n\n특정한 값을 NaN으로 취급하고 싶으면 na_values 인수에 NaN 값으로 취급할 값을 넣는다.\n\n%%writefile sample5.csv\nc1, c2, c3\n1, 1.11, one\n2, , two\n누락, 3.33, three\n\nWriting sample5.csv\n\n\n\ndf = pd.read_csv('sample5.csv', na_values=['누락'])\ndf\n\n\n\n\n\n\n\n\nc1\nc2\nc3\n\n\n\n\n0\n1.0\n1.11\none\n\n\n1\n2.0\n\ntwo\n\n\n2\nNaN\n3.33\nthree"
  },
  {
    "objectID": "04.02 데이터 입출력.html#csv-파일-출력",
    "href": "04.02 데이터 입출력.html#csv-파일-출력",
    "title": "4.2 데이터 입출력",
    "section": "CSV 파일 출력",
    "text": "CSV 파일 출력\n지금까지와 반대로 파이썬의 데이터프레임 값을 CSV 파일로 출력하고 싶으면 to_csv 메서드를 사용한다.\n\ndf.to_csv('sample6.csv')\n\n리눅스나 맥에서는 cat 셸 명령으로 파일의 내용을 확인할 수 있다. 윈도우에서는 type 함수를 사용한다. 느낌표(!)는 셸 함수를 사용하기 위한 아이파이썬(IPython) 매직 명령이다.\n\n!cat sample6.csv  # 윈도우에서는 !type sample6.csv 함수를 사용\n\n,c1, c2, c3\n0,1.0, 1.11, one\n1,2.0, , two\n2,, 3.33, three\n\n\n파일을 읽을 때와 마찬가지로 출력할 때도 sep 인수로 구분자를 바꿀 수 있다.\n\ndf.to_csv('sample7.txt', sep='|')\n\n\n!cat sample7.txt\n\n|c1| c2| c3\n0|1.0| 1.11| one\n1|2.0| | two\n2|| 3.33| three\n\n\n또 na_rep 인수로 NaN 표시값을 바꿀 수도 있다.\n\ndf.to_csv('sample8.csv', na_rep='누락')\n\n\n!cat sample8.csv\n\n,c1, c2, c3\n0,1.0, 1.11, one\n1,2.0, , two\n2,누락, 3.33, three\n\n\nindex, header 인수를 지정하여 인덱스 및 헤더 출력 여부를 지정하는 것도 가능하다.\n\ndf.index = [\"a\", \"b\", \"c\"]\ndf\n\n\n\n\n\n\n\n\nc1\nc2\nc3\n\n\n\n\na\n1.0\n1.11\none\n\n\nb\n2.0\n\ntwo\n\n\nc\nNaN\n3.33\nthree\n\n\n\n\n\n\n\n\ndf.to_csv('sample9.csv', index=False, header=False)\n\n\n!cat sample9.csv  # 윈도우에서는 !type sample6.csv 함수를 사용\n\n1.0, 1.11, one\n2.0, , two\n, 3.33, three"
  },
  {
    "objectID": "04.02 데이터 입출력.html#인터넷-상의-csv-파일-입력",
    "href": "04.02 데이터 입출력.html#인터넷-상의-csv-파일-입력",
    "title": "4.2 데이터 입출력",
    "section": "인터넷 상의 CSV 파일 입력",
    "text": "인터넷 상의 CSV 파일 입력\n웹상에는 다양한 데이터 파일이 CSV 파일 형태로 제공된다. read_csv 명령 사용시 파일 패스 대신 URL을 지정하면 Pandas가 직접 해당 파일을 다운로드하여 읽어들인다. 다음은 저자의 github 웹사이트에 저장되어 있는 데이터 파일을 원격으로 읽는 명령이다.\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/datascienceschool/docker_rpython/master/data/titanic.csv\")\n\n이 데이터프레임은 실제로 데이터 갯수, 즉 행(row)의 수가 890개가 넘는 대량의 데이터이다. 이렇게 데이터의 수가 많을 경우, 데이터프레임의 표현(representation)은 데이터 앞, 뒤의 일부분만 보여준다. 보여줄 행의 수는 display.max_rows 옵션으로 정할 수 있다.\n\npd.set_option(\"display.max_rows\", 20)  # 앞뒤로 모두 20행만 보여준다.\ndf\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n887\n0\n2\nMontvila, Rev. Juozas\nmale\n27.0\n0\n0\n211536\n13.0000\nNaN\nS\n\n\n887\n888\n1\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nB42\nS\n\n\n888\n889\n0\n3\nJohnston, Miss. Catherine Helen \"Carrie\"\nfemale\nNaN\n1\n2\nW./C. 6607\n23.4500\nNaN\nS\n\n\n889\n890\n1\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC148\nC\n\n\n890\n891\n0\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.7500\nNaN\nQ\n\n\n\n\n891 rows × 12 columns\n\n\n\n만약 앞이나 뒤의 특정 갯수만 보고 싶다면 head 메서드나 tail 메서드를 이용한다. 메서드 인수로 출력할 행의 수를 넣을 수도 있다.\n\ndf.head()\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n\n\n\n\n\n\ndf.tail(2)\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n889\n890\n1\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.00\nC148\nC\n\n\n890\n891\n0\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.75\nNaN\nQ"
  },
  {
    "objectID": "04.02 데이터 입출력.html#인터넷-상의-데이터-베이스-자료-입력",
    "href": "04.02 데이터 입출력.html#인터넷-상의-데이터-베이스-자료-입력",
    "title": "4.2 데이터 입출력",
    "section": "인터넷 상의 데이터 베이스 자료 입력",
    "text": "인터넷 상의 데이터 베이스 자료 입력\npandas_datareader 패키지의 DataReader 을 사용하면 일부 인터넷 사이트의 자료를 바로 pandas로 읽어들일 수 있다. pandas_datareader 패키지는 판다스와 별도로 설치해야 한다. 다음은 pandas_datareader 패키지가 제공하는 인터넷 사이트의 예이다. 일부 인터넷 사이트는 유료이므로 별도의 가입절차를 거쳐야 한다.\n\nFRED\nFama/French\nWorld Bank\nOECD\nEurostat\nEDGAR Index\nTSP Fund Data\nOanda currency historical rate\nNasdaq Trader Symbol Definitions\n\n자세한 내용은 다음 웹사이트를 참조한다. * https://pandas-datareader.readthedocs.io/en/latest/index.html\n날짜는 datetime 패키지를 사용하여 지정해도 되고 문자열을 바로 사용해도 된다. (이때는 내부적으로 dateutil 패키지를 사용한다.\n\nimport datetime\ndt_start = datetime.datetime(2015, 1, 1)\ndt_end = \"2016, 6, 30\"\n\ndata_source 인수로 데이터를 읽어올 웹 사이트를 지정한다. 데이터의 코드는 웹 사이트에서 검색하여 알아내야 한다. 다음은 FRED 데이터베이스에서 미국 국가총생산(GDP), 모든 항목을 포함한 소비자 가격 지수(CPIAUCSL), 식료품 및 연로를 제외한 소비자 가격 지수(CPILFESL)를 가져오는 예이다. 웹사이트에서 자세한 데이터에 대한 세부적인 사항이나 값을 확인할 수 있다.\n\nhttps://fred.stlouisfed.org/series/GDP\nhttps://fred.stlouisfed.org/series/CPIAUCSL\nhttps://fred.stlouisfed.org/series/CPILFESL\n\n\nimport pandas_datareader as pdr\n\ngdp = pdr.get_data_fred('GDP', dt_start, dt_end)\ngdp.tail()\n\n\n\n\n\n\n\n\nGDP\n\n\nDATE\n\n\n\n\n\n2015-04-01\n18223.577\n\n\n2015-07-01\n18347.425\n\n\n2015-10-01\n18378.803\n\n\n2016-01-01\n18470.156\n\n\n2016-04-01\n18656.207\n\n\n\n\n\n\n\n데이터 코드에 리스트를 넣으면 여러개의 데이터를 동시에 가져온다.\n\ninflation = pdr.get_data_fred([\"CPIAUCSL\", \"CPILFESL\"], dt_start, dt_end)\ninflation.tail()\n\n\n\n\n\n\n\n\nCPIAUCSL\nCPILFESL\n\n\nDATE\n\n\n\n\n\n\n2016-02-01\n237.514\n245.644\n\n\n2016-03-01\n237.990\n245.964\n\n\n2016-04-01\n238.835\n246.467\n\n\n2016-05-01\n239.440\n247.036\n\n\n2016-06-01\n240.144\n247.435"
  },
  {
    "objectID": "04.00 4장 판다스 데이터 분석.html",
    "href": "04.00 4장 판다스 데이터 분석.html",
    "title": "4장 판다스 데이터 분석",
    "section": "",
    "text": "이 장에서는 판다스(Pandas) 패키지를 사용하여 데이터를 분석하는 방법을 공부한다. 판다스 패키지는 파이썬으로 데이터를 다룰 때 빠질 수 없는 중요한 패키지다. 판다스 패키지를 이용하면 다양한 방법으로 데이터를 조작할 수 있다."
  },
  {
    "objectID": "04.00 4장 판다스 데이터 분석.html#학습-목표",
    "href": "04.00 4장 판다스 데이터 분석.html#학습-목표",
    "title": "4장 판다스 데이터 분석",
    "section": "학습 목표",
    "text": "학습 목표\n\n시리즈와 데이터프레임을 만들 수 있다.\n판다스를 이용하여 csv 파일을 읽고 쓸 수 있다.\n시리즈와 데이터프레임에서 원하는 데이터를 읽고 갱신하는 방법을 익힌다.\n시리즈와 데이터프레임의 데이터를 조작하는 법을 공부한다.\n멀티 인덱스와 이를 다루는 방법을 학습한다.\n둘 이상의 데이터프레임을 하나로 합치는 법을 익힌다.\n데이터를 그룹으로 나누어 분석하고 피봇테이블을 만드는 방법을 공부한다."
  },
  {
    "objectID": "03.04 기술 통계.html",
    "href": "03.04 기술 통계.html",
    "title": "3.4 기술 통계",
    "section": "",
    "text": "기술 통계\n넘파이는 다음과 같은 데이터 집합에 대해 간단한 통계를 계산하는 함수를 제공한다. 이러한 값들을 통틀어 기술 통계(descriptive statistics)라고 한다.\n\n데이터의 개수(count)\n평균(mean, average)\n분산(variance)\n표준 편차(standard deviation)\n최댓값(maximum)\n최솟값(minimum)\n중앙값(median)\n사분위수(quartile)\n\n예를 들어 다음과 같은 데이터 \\(x\\)가 있다고 하자.\n\\[\nx = \\{\n18,   5,  10,  23,  19,  -8,  10,   0,   0,   5,   2,  15,   8,\n2,   5,   4,  15,  -1,   4,  -7, -24,   7,   9,  -6,  23, -13\n\\}\n\\]\n\\(x\\)를 이루는 숫자 하나하나를 수학 기호로는 \\(x_1, x_2, \\cdots, x_N\\)처럼 표시한다. 위 예에서 \\(x_1 = 18\\), \\(x_2 = 5\\)이다.\n넘파이에서는 이러한 데이터를 1차원 배열로 구현한다.\n\nx = np.array([18,   5,  10,  23,  19,  -8,  10,   0,   0,   5,   2,  15,   8,\n              2,   5,   4,  15,  -1,   4,  -7, -24,   7,   9,  -6,  23, -13])\n\n\n데이터의 개수\n데이터의 개수는 len 명령으로 구할 수 있다.\n\nlen(x)  # 갯수\n\n26\n\n\n\n\n표본 평균\n평균을 통계용어로는 표본 평균(sample average, sample mean)이라고 한다. \\(x\\) 데이터에 대한 표본 평균은 \\(\\bar{x}\\)라고 표시하며 다음과 같이 계산한다. 이 식에서 \\(N\\)은 데이터의 개수이다.\n\\[ \\bar{x} = \\dfrac{1}{N}\\sum_{i=1}^N x_i \\]\n\nnp.mean(x)  # 평균\n\n4.8076923076923075\n\n\n\n\n표본 분산\n표본 분산(sample variance)은 데이터와 표본 평균간의 거리의 제곱의 평균이다. 표본 분산이 작으면 데이터가 모여있는 것이고 크면 흩어져 있는 것이다. 수학 기호로는 \\(s^2\\)이라고 표시하며 다음과 같이 계산한다.\n\\[ s^2 = \\dfrac{1}{N}\\sum_{i=1}^N (x_i - \\bar{x})^2 \\]\n\nnp.var(x)  # 분산\n\n115.23224852071006\n\n\n\nnp.var(x, ddof=1)  # 비편향 분산. 추후 공부하게 된다.\n\n119.84153846153846\n\n\n\n\n표본 표준편차\n표본 표준편차(sample standard variance)는 표본 분산의 양의 제곱근 값이다. \\(s\\)이라고 표시한다.\n\\[ s = \\sqrt{s^2} \\]\n\nnp.std(x)  # 표준 편차\n\n10.734628476137871\n\n\n\n\n최댓값과 최솟값\n최댓값(maximum)은 데이터 중에서 가장 큰 값을, 최솟값(minimum)은 가장 작은 값을 의미한다.\n\nnp.max(x)  # 최댓값\n\n23\n\n\n\nnp.min(x)  # 최솟값\n\n-24\n\n\n\n\n중앙값\n중앙값(median)은 데이터를 크기대로 정렬하였을 때 가장 가운데에 있는 수를 말한다. 만약 데이터의 수가 짝수이면 가장 가운데에 있는 두 수의 평균을 사용한다.\n\nnp.median(x)  # 중앙값\n\n5.0\n\n\n\n\n사분위수\n사분위수(quartile)는 데이터를 가장 작은 수부터 가장 큰 수까지 크기가 커지는 순서대로 정렬하였을 때 1/4, 2/4, 3/4 위치에 있는 수를 말한다. 각각 1사분위수, 2사분위수, 3사분위수라고 한다. 1/4의 위치란 전체 데이터의 수가 만약 100개이면 25번째 순서, 즉 하위 25%를 말한다. 따라서 2사분위수는 중앙값과 같다.\n때로는 위치를 1/100 단위로 나눈 백분위수(percentile)을 사용하기도 한다. 1사분위수는 25% 백분위수와 같다.\n\nnp.percentile(x, 0)  # 최소값\n\n-24.0\n\n\n\nnp.percentile(x, 25)  # 1사분위 수\n\n0.0\n\n\n\nnp.percentile(x, 50)  # 2사분위 수\n\n5.0\n\n\n\nnp.percentile(x, 75)  # 3사분위 수\n\n10.0\n\n\n\nnp.percentile(x, 100)  # 최댓값\n\n23.0"
  },
  {
    "objectID": "03.02 배열의 생성과 변형.html",
    "href": "03.02 배열의 생성과 변형.html",
    "title": "3.2 배열의 생성과 변형",
    "section": "",
    "text": "`dtype`\n넘파이의 배열 즉, ndarray클래스는 원소가 모두 같은 자료형이어야 한다. array 명령으로 배열을 만들 때 자료형을 명시적으로 적용하려면 dtype 인수를 사용한다. 만약 dtype 인수가 없으면 주어진 데이터를 저장할 수 있는 자료형을 스스로 유추한다. 만들어진 배열의 자료형을 알아내려면 dtype 속성을 보면 된다.\n\nx = np.array([1, 2, 3])\nx.dtype\n\ndtype('int64')\n\n\n\nx = np.array([1.0, 2.0, 3.0])\nx.dtype\n\ndtype('float64')\n\n\n\nx = np.array([1, 2, 3.0])\nx.dtype\n\ndtype('float64')\n\n\ndtype 인수로 지정할 자료형은 다음 표에 보인것과 같은 “dtype 접두사”로 시작하는 문자열이고 이 글자 뒤에 오는 숫자는 바이트 수 혹은 글자 수를 의미한다. 예를 들어 f8은 8바이트(64비트) 부동소수점 실수를 뜻하고 U4 는 4글자 유니코드 문자열을 뜻한다. 숫자를 생략하면 운영체제에 따라 알맞은 크기를 지정한다.\n\n\n\ndtype 접두사\n설명\n사용 예\n\n\n\n\nb\n불리언\nb (참 혹은 거짓)\n\n\ni\n정수\ni8 (64비트)\n\n\nu\n부호 없는 정수\nu8 (64비트)\n\n\nf\n부동소수점\nf8 (64비트)\n\n\nc\n복소 부동소수점\nc16 (128비트)\n\n\nO\n객체\n0 (객체에 대한 포인터)\n\n\nS\n바이트 문자열\nS24 (24 글자)\n\n\nU\n유니코드 문자열\nU24 (24 유니코드 글자)\n\n\n\n\nx = np.array([1, 2, 3], dtype='f')\nx.dtype\n\ndtype('float32')\n\n\n\nx[0] + x[1]\n\n3.0\n\n\n\nx = np.array([1, 2, 3], dtype='U')\nx.dtype\n\ndtype('&lt;U1')\n\n\n\nx[0] + x[1]\n\n'12'"
  },
  {
    "objectID": "03.02 배열의 생성과 변형.html#넘파이의-자료형",
    "href": "03.02 배열의 생성과 변형.html#넘파이의-자료형",
    "title": "3.2 배열의 생성과 변형",
    "section": "",
    "text": "`dtype`\n넘파이의 배열 즉, ndarray클래스는 원소가 모두 같은 자료형이어야 한다. array 명령으로 배열을 만들 때 자료형을 명시적으로 적용하려면 dtype 인수를 사용한다. 만약 dtype 인수가 없으면 주어진 데이터를 저장할 수 있는 자료형을 스스로 유추한다. 만들어진 배열의 자료형을 알아내려면 dtype 속성을 보면 된다.\n\nx = np.array([1, 2, 3])\nx.dtype\n\ndtype('int64')\n\n\n\nx = np.array([1.0, 2.0, 3.0])\nx.dtype\n\ndtype('float64')\n\n\n\nx = np.array([1, 2, 3.0])\nx.dtype\n\ndtype('float64')\n\n\ndtype 인수로 지정할 자료형은 다음 표에 보인것과 같은 “dtype 접두사”로 시작하는 문자열이고 이 글자 뒤에 오는 숫자는 바이트 수 혹은 글자 수를 의미한다. 예를 들어 f8은 8바이트(64비트) 부동소수점 실수를 뜻하고 U4 는 4글자 유니코드 문자열을 뜻한다. 숫자를 생략하면 운영체제에 따라 알맞은 크기를 지정한다.\n\n\n\ndtype 접두사\n설명\n사용 예\n\n\n\n\nb\n불리언\nb (참 혹은 거짓)\n\n\ni\n정수\ni8 (64비트)\n\n\nu\n부호 없는 정수\nu8 (64비트)\n\n\nf\n부동소수점\nf8 (64비트)\n\n\nc\n복소 부동소수점\nc16 (128비트)\n\n\nO\n객체\n0 (객체에 대한 포인터)\n\n\nS\n바이트 문자열\nS24 (24 글자)\n\n\nU\n유니코드 문자열\nU24 (24 유니코드 글자)\n\n\n\n\nx = np.array([1, 2, 3], dtype='f')\nx.dtype\n\ndtype('float32')\n\n\n\nx[0] + x[1]\n\n3.0\n\n\n\nx = np.array([1, 2, 3], dtype='U')\nx.dtype\n\ndtype('&lt;U1')\n\n\n\nx[0] + x[1]\n\n'12'"
  },
  {
    "objectID": "03.02 배열의 생성과 변형.html#inf와-nan",
    "href": "03.02 배열의 생성과 변형.html#inf와-nan",
    "title": "3.2 배열의 생성과 변형",
    "section": "Inf와 NaN",
    "text": "Inf와 NaN\n`Inf`\n`NaN`\n넘파이에서는 무한대를 표현하기 위한 np.inf(infinity)와 정의할 수 없는 숫자를 나타내는 np.nan(not a number)을 사용할 수 있다. 다음 예와 같이 1을 0으로 나누려고 하거나 0에 대한 로그 값을 계산하면 무한대인 np.inf이 나온다. 0을 0으로 나누려고 시도하면 np.nan이 나온다.\n\nnp.array([0, 1, -1, 0]) / np.array([1, 0, 0, 0])\n\narray([  0.,  inf, -inf,  nan])\n\n\n\nnp.log(0)\n\n-inf\n\n\n\nnp.exp(-np.inf)\n\n0.0"
  },
  {
    "objectID": "03.02 배열의 생성과 변형.html#배열-생성",
    "href": "03.02 배열의 생성과 변형.html#배열-생성",
    "title": "3.2 배열의 생성과 변형",
    "section": "배열 생성",
    "text": "배열 생성\nNumPy는 몇가지 단순한 배열을 생성하는 명령을 제공한다.\n\nzeros, ones\nzeros_like, ones_like\nempty\narange\nlinspace, logspace\n\n`zeros`\n크기가 정해져 있고 모든 값이 0인 배열을 생성하려면 zeros 명령을 사용한다. 인수로는 배열을 크기를 뜻하는 정수를 넣는다.\n\na = np.zeros(5)\na\n\narray([0., 0., 0., 0., 0.])\n\n\n크기를 뜻하는 튜플을 입력하면 다차원 배열도 만들 수 있다.\n\nb = np.zeros((2, 3))\nb\n\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n\n\narray 명령과 마찬가지로 dtype 인수를 명시하면 해당 자료형 원소를 가진 배열을 만든다.\n\nc = np.zeros((5, 2), dtype=\"i\")\nc\n\narray([[0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0]], dtype=int32)\n\n\n문자열 배열도 가능하지면 모든 원소의 문자열 크기가 같아야 한다. 만약 더 큰 크기의 문자열을 할당하면 잘릴 수 있다.\n\nd = np.zeros(5, dtype=\"U4\")\nd\n\narray(['', '', '', '', ''], dtype='&lt;U4')\n\n\n\nd[0] = \"abc\"\nd[1] = \"abcd\"\nd[2] = \"ABCDE\"\nd\n\narray(['abc', 'abcd', 'ABCD', '', ''], dtype='&lt;U4')\n\n\n`ones`\n0이 아닌 1로 초기화된 배열을 생성하려면 ones 명령을 사용한다.\n\ne = np.ones((2, 3, 4), dtype=\"i8\")\ne\n\narray([[[1, 1, 1, 1],\n        [1, 1, 1, 1],\n        [1, 1, 1, 1]],\n\n       [[1, 1, 1, 1],\n        [1, 1, 1, 1],\n        [1, 1, 1, 1]]])\n\n\n`zeros_like`\n`ones_like`\n만약 크기를 튜플로 명시하지 않고 다른 배열과 같은 크기의 배열을 생성하고 싶다면 ones_like, zeros_like 명령을 사용한다.\n\nf = np.ones_like(b, dtype=\"f\")\nf\n\narray([[1., 1., 1.],\n       [1., 1., 1.]], dtype=float32)\n\n\n`empty`\n배열의 크기가 커지면 배열을 초기화하는데도 시간이 걸린다. 이 시간을 단축하려면 배열을 생성만 하고 특정한 값으로 초기화를 하지 않는 empty 명령을 사용할 수 있다. empty 명령으로 생성된 배열에는 기존에 메모리에 저장되어 있던 값이 있으므로 배열의 원소의 값을 미리 알 수 없다.\n\ng = np.empty((4, 3))\ng\n\narray([[6.94820328e-310, 4.67533915e-310, 5.28964691e+180],\n       [6.01346953e-154, 4.81809028e+233, 7.86517465e+276],\n       [6.01346953e-154, 2.58408173e+161, 2.46600381e-154],\n       [2.47379808e-091, 4.47593816e-091, 6.01347002e-154]])\n\n\n`arange`\narange 명령은 NumPy 버전의 range 명령이라고 볼 수 있다. 특정한 규칙에 따라 증가하는 수열을 만든다.\n\nnp.arange(10)  # 0 .. n-1\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nnp.arange(3, 21, 2)  # 시작, 끝(포함하지 않음), 단계\n\narray([ 3,  5,  7,  9, 11, 13, 15, 17, 19])\n\n\n`linspace`\n`logspace`\nlinspace 명령이나 logspace 명령은 선형 구간 혹은 로그 구간을 지정한 구간의 수만큼 분할한다.\n\nnp.linspace(0, 100, 5)  # 시작, 끝(포함), 갯수\n\narray([  0.,  25.,  50.,  75., 100.])\n\n\n\nnp.logspace(0.1, 1, 10)\n\narray([ 1.25892541,  1.58489319,  1.99526231,  2.51188643,  3.16227766,\n        3.98107171,  5.01187234,  6.30957344,  7.94328235, 10.        ])"
  },
  {
    "objectID": "03.02 배열의 생성과 변형.html#전치-연산",
    "href": "03.02 배열의 생성과 변형.html#전치-연산",
    "title": "3.2 배열의 생성과 변형",
    "section": "전치 연산",
    "text": "전치 연산\n`T`\n2차원 배열의 전치(transpose) 연산은 행과 열을 바꾸는 작업이다. 이는 배열의 T 속성으로 구할 수 있다. 메서드가 아닌 속성이라는 점에 유의 한다.\n\nA = np.array([[1, 2, 3], [4, 5, 6]])\nA\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\nA.T\n\narray([[1, 4],\n       [2, 5],\n       [3, 6]])"
  },
  {
    "objectID": "03.02 배열의 생성과 변형.html#배열의-크기-변형",
    "href": "03.02 배열의 생성과 변형.html#배열의-크기-변형",
    "title": "3.2 배열의 생성과 변형",
    "section": "배열의 크기 변형",
    "text": "배열의 크기 변형\n`reshape`\n일단 만들어진 배열의 내부 데이터는 보존한 채로 형태만 바꾸려면 reshape 명령이나 메서드를 사용한다. 예를 들어 12개의 원소를 가진 1차원 행렬은 3x4 형태의 2차원 행렬로 만들 수 있다.\n\na = np.arange(12)\na\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\n\n\nb = a.reshape(3, 4)\nb\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n사용하는 원소의 갯수가 정해저 있기 때문에 reshape 명령의 형태 튜플의 원소 중 하나는 -1이라는 숫자로 대체할 수 있다. -1을 넣으면 해당 숫자는 다를 값에서 계산되어 사용된다.\n\na.reshape(3, -1)\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\na.reshape(2, 2, -1)\n\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]]])\n\n\n\na.reshape(2, -1, 2)\n\narray([[[ 0,  1],\n        [ 2,  3],\n        [ 4,  5]],\n\n       [[ 6,  7],\n        [ 8,  9],\n        [10, 11]]])\n\n\n`flatten`\n`ravel`\n다차원 배열을 무조건 1차원으로 만들기 위해서는 flatten 나 ravel 메서드를 사용한다.\n\na.flatten()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\n\n\na.ravel()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\n\n배열 사용에서 주의할 점은 길이가 5인 1차원 배열과 행, 열의 갯수가 (5,1)인 2차원 배열 또는 행, 열의 갯수가 (1, 5)인 2차원 배열은 데이터가 같아도 엄연히 다른 객체라는 점이다.\n\nx = np.arange(5)\nx\n\narray([0, 1, 2, 3, 4])\n\n\n\nx.reshape(1, 5)\n\narray([[0, 1, 2, 3, 4]])\n\n\n\nx.reshape(5, 1)\n\narray([[0],\n       [1],\n       [2],\n       [3],\n       [4]])\n\n\n`newaxis`\n이렇게 같은 배열에 대해 차원만 1차원 증가시키는 경우에는 newaxis 명령을 사용하기도 한다.\n\nx[:, np.newaxis]\n\narray([[0],\n       [1],\n       [2],\n       [3],\n       [4]])"
  },
  {
    "objectID": "03.02 배열의 생성과 변형.html#배열-연결",
    "href": "03.02 배열의 생성과 변형.html#배열-연결",
    "title": "3.2 배열의 생성과 변형",
    "section": "배열 연결",
    "text": "배열 연결\n행의 수나 열의 수가 같은 두 개 이상의 배열을 연결하여(concatenate) 더 큰 배열을 만들 때는 다음과 같은 명령을 사용한다.\n\nhstack\nvstack\ndstack\nstack\nr_\nc_\ntile\n\n`hstack`\nhstack 명령은 행의 수가 같은 두 개 이상의 배열을 옆으로 연결하여 열의 수가 더 많은 배열을 만든다. 연결할 배열은 하나의 리스트에 담아야 한다.\n\na1 = np.ones((2, 3))\na1\n\narray([[1., 1., 1.],\n       [1., 1., 1.]])\n\n\n\na2 = np.zeros((2, 2))\na2\n\narray([[0., 0.],\n       [0., 0.]])\n\n\n\nnp.hstack([a1, a2])\n\narray([[1., 1., 1., 0., 0.],\n       [1., 1., 1., 0., 0.]])\n\n\n`vstack`\nvstack 명령은 열의 수가 같은 두 개 이상의 배열을 위아래로 연결하여 행의 수가 더 많은 배열을 만든다. 연결할 배열은 마찬가지로 하나의 리스트에 담아야 한다.\n\nb1 = np.ones((2, 3))\nb1\n\narray([[1., 1., 1.],\n       [1., 1., 1.]])\n\n\n\nb2 = np.zeros((3, 3))\nb2\n\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\nnp.vstack([b1, b2])\n\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n\n\n`dstack`\ndstack 명령은 제3의 축 즉, 행이나 열이 아닌 깊이(depth) 방향으로 배열을 합친다. 가장 안쪽의 원소의 차원이 증가한다. 즉 가장 내부의 숫자 원소가 배열이 된다. shape 정보로 보자면 가장 끝에 값이 2인 차원이 추가되는 것이다.이 예제의 경우에는 shape 변화가 2개의 (3 x 4) -&gt; 1개의 (3 x 4 x 2)가 된다.\n\nc1 = np.ones((3, 4))\nc1\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\n\n\nc2 = np.zeros((3, 4))\nc2\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\n\n\nnp.dstack([c1, c2])\n\narray([[[1., 0.],\n        [1., 0.],\n        [1., 0.],\n        [1., 0.]],\n\n       [[1., 0.],\n        [1., 0.],\n        [1., 0.],\n        [1., 0.]],\n\n       [[1., 0.],\n        [1., 0.],\n        [1., 0.],\n        [1., 0.]]])\n\n\n\n(np.dstack([c1, c2])).shape\n\n(3, 4, 2)\n\n\n`stack`\nstack 명령은 dstack의 기능을 확장한 것으로 dstack처럼 마지막 차원으로 연결하는 것이 아니라 사용자가 지정한 차원(축으로) 배열을 연결한다. axis 인수(디폴트 0)를 사용하여 연결후의 회전 방향을 정한다. 디폴트 인수값은 0이고 가장 앞쪽에 차원이 생성된다. 즉, 배열 두 개가 겹치게 되므로 연결하고자 하는 배열들의 크기가 모두 같아야 한다.\n다음 예에서는 axis=0 이므로 가장 바깥에 값이 2인 차원이 추가된다. 즉, shape 변화는 2개의 (3 x 4) -&gt; 1개의 (2 x 3 x 4) 이다..\n\nc = np.stack([c1, c2])\nc\n\narray([[[1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]],\n\n       [[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]]])\n\n\n\nc.shape\n\n(2, 3, 4)\n\n\naxis 인수가 1이면 두번째 차원으로 새로운 차원이 삽입된다. 다음 예에서 즉, shape 변화는 2개의 (3 x 4) -&gt; 1개의 (3 x 2 x 4) 이다\n\nc = np.stack([c1, c2], axis=1)\nc\n\narray([[[1., 1., 1., 1.],\n        [0., 0., 0., 0.]],\n\n       [[1., 1., 1., 1.],\n        [0., 0., 0., 0.]],\n\n       [[1., 1., 1., 1.],\n        [0., 0., 0., 0.]]])\n\n\n\nc.shape\n\n(3, 2, 4)\n\n\n`r_`\nr_ 메서드는 hstack 명령과 비슷하게 배열을 좌우로 연결한다. 다만 메서드임에도 불구하고 소괄호(parenthesis, ())를 사용하지 않고 인덱싱과 같이 대괄호(bracket, [])를 사용한다. 이런 특수 메서드를 인덱서(indexer)라고 한다.\n\nnp.r_[np.array([1, 2, 3]), np.array([4, 5, 6])]\n\narray([1, 2, 3, 4, 5, 6])\n\n\n`c_`\nc_ 메서드는 배열의 차원을 증가시킨 후 좌우로 연결한다. 만약 1차원 배열을 연결하면 2차원 배열이 된다.\n\nnp.c_[np.array([1, 2, 3]), np.array([4, 5, 6])]\n\narray([[1, 4],\n       [2, 5],\n       [3, 6]])\n\n\n`tile`\ntile 명령은 동일한 배열을 반복하여 연결한다.\n\na = np.array([[0, 1, 2], [3, 4, 5]])\nnp.tile(a, 2)\n\narray([[0, 1, 2, 0, 1, 2],\n       [3, 4, 5, 3, 4, 5]])\n\n\n\nnp.tile(a, (3, 2))\n\narray([[0, 1, 2, 0, 1, 2],\n       [3, 4, 5, 3, 4, 5],\n       [0, 1, 2, 0, 1, 2],\n       [3, 4, 5, 3, 4, 5],\n       [0, 1, 2, 0, 1, 2],\n       [3, 4, 5, 3, 4, 5]])\n\n\n````vxgamaoeximx 연습 문제 3.2.1\n지금까지 공부한 명령어를 사용하여 다음과 같은 배열을 만들어라.\narray([[   0.,    0.,    0.,    1.,    1.],\n       [   0.,    0.,    0.,    1.,    1.],\n       [   0.,    0.,    0.,    1.,    1.],\n       [  10.,   20.,   30.,   40.,   50.],\n       [  60.,   70.,   80.,   90.,  100.],\n       [ 110.,  120.,  130.,  140.,  150.],\n       [   0.,    0.,    0.,    1.,    1.],\n       [   0.,    0.,    0.,    1.,    1.],\n       [   0.,    0.,    0.,    1.,    1.],\n       [  10.,   20.,   30.,   40.,   50.],\n       [  60.,   70.,   80.,   90.,  100.],\n       [ 110.,  120.,  130.,  140.,  150.]])\n````"
  },
  {
    "objectID": "03.02 배열의 생성과 변형.html#차원-그리드-포인트-생성",
    "href": "03.02 배열의 생성과 변형.html#차원-그리드-포인트-생성",
    "title": "3.2 배열의 생성과 변형",
    "section": "2차원 그리드 포인트 생성",
    "text": "2차원 그리드 포인트 생성\n변수가 2개인 2차원 함수의 그래프를 그리거나 표를 작성하려면 2차원 영역에 대한 (x,y) 좌표값 쌍 즉, 그리드 포인트(grid point)를 생성하여 각 좌표에 대한 함수 값을 계산해야 한다. 예를 들어 x, y 라는 두 변수를 가진 함수에서 x가 0부터 2까지, y가 0부터 4까지의 사각형 영역에서 변화하는 과정을 보고 싶다면 이 사각형 영역 안의 다음과 같은 그리드 포인트들에 대해 함수를 계산해야 한다.\n\\[ (x,y) = (0,0), (0,1), (0,2), (0,3), (0,4), (1,0), \\cdots (2,4) \\]\n`meshgrid`\n이러한 그리드 포인트를 만드는 과정을 도와주는 것이 meshgrid 명령이다. meshgrid 명령은 사각형 영역을 구성하는 가로축의 점들과 세로축의 점을 나타내는 두 벡터를 인수로 받아서 이 사각형 영역을 이루는 조합을 출력한다. 결과는 그리드 포인트의 x 값만을 표시하는 행렬과 y 값만을 표시하는 행렬 두 개로 분리하여 출력한다.\n\nx = np.arange(3)\nx\n\narray([0, 1, 2])\n\n\n\ny = np.arange(5)\ny\n\narray([0, 1, 2, 3, 4])\n\n\n\nX, Y = np.meshgrid(x, y)\n\n\nX\n\narray([[0, 1, 2],\n       [0, 1, 2],\n       [0, 1, 2],\n       [0, 1, 2],\n       [0, 1, 2]])\n\n\n\nY\n\narray([[0, 0, 0],\n       [1, 1, 1],\n       [2, 2, 2],\n       [3, 3, 3],\n       [4, 4, 4]])\n\n\n\n[list(zip(x, y)) for x, y in zip(X, Y)]\n\n[[(0, 0), (1, 0), (2, 0)],\n [(0, 1), (1, 1), (2, 1)],\n [(0, 2), (1, 2), (2, 2)],\n [(0, 3), (1, 3), (2, 3)],\n [(0, 4), (1, 4), (2, 4)]]"
  },
  {
    "objectID": "03.00 3장 넘파이 배열 프로그래밍.html",
    "href": "03.00 3장 넘파이 배열 프로그래밍.html",
    "title": "3장 넘파이 배열 프로그래밍",
    "section": "",
    "text": "이 장에서는 넘파이(NumPy) 패키지를 사용한 배열(array) 프로그래밍에 대해 공부한다. 배열 프로그래밍은 대량의 데이터를 빠르게 조작하기 위한 필수적 과정이다. 파이썬의 데이터 관련 명령은 모두 넘파이 기능을 사용하므로 데이터 분석을 위해서는 이 장에서 설명하는 모든 내용을 숙지해야 한다."
  },
  {
    "objectID": "03.00 3장 넘파이 배열 프로그래밍.html#학습-목표",
    "href": "03.00 3장 넘파이 배열 프로그래밍.html#학습-목표",
    "title": "3장 넘파이 배열 프로그래밍",
    "section": "학습 목표",
    "text": "학습 목표\n\n배열과 리스트의 차이점을 알고 배열을 사용하는 이유를 이해한다.\n배열을 생성하고 다루는 방법을 익힌다.\n넘파이를 사용하여 기술 통계를 낼 수 있다.\n난수를 발생시키고 그 결과를 분석하는 방법을 공부한다."
  },
  {
    "objectID": "02.14 파이썬의 자료형.html",
    "href": "02.14 파이썬의 자료형.html",
    "title": "2.14 파이썬의 자료형",
    "section": "",
    "text": "자료형(data type), 타입(type)\n지금까지 우리는 변수에 숫자, 문자열, 리스트 등의 값을 마음대로 넣어서 사용해 왔다. 그러나 프로그램이 실행되려면 컴퓨터는 각 변수에 어떤 종류의 값이 들어가 있는지 알아야 한다. 값이 숫자인가 문자열인가 등에 따라 값을 저장하는 방식이나 계산하는 방법이 다르기 때문이다. 이러한 값의 종류를 자료형(data type) 혹은 타입(type)이라고 한다. 예를 들어 정수인 1과 문자열인 “1”이 컴퓨터에 저장될 때 어느 정도의 메모리를 차지하는지 알아보면 두 값의 저장 방식이 다르다는 것을 알 수 있다.\n`getsizeof`\n파이썬에서 변수의 메모리 크기를 알기 위해서는 sys 패키지의 getsizeof 명령을 사용한다.\n\nfrom sys import getsizeof\n\n\na = 1\ngetsizeof(a)\n\n28\n\n\n\nb = \"1\"\ngetsizeof(b)\n\n50"
  },
  {
    "objectID": "02.14 파이썬의 자료형.html#자료형",
    "href": "02.14 파이썬의 자료형.html#자료형",
    "title": "2.14 파이썬의 자료형",
    "section": "",
    "text": "자료형(data type), 타입(type)\n지금까지 우리는 변수에 숫자, 문자열, 리스트 등의 값을 마음대로 넣어서 사용해 왔다. 그러나 프로그램이 실행되려면 컴퓨터는 각 변수에 어떤 종류의 값이 들어가 있는지 알아야 한다. 값이 숫자인가 문자열인가 등에 따라 값을 저장하는 방식이나 계산하는 방법이 다르기 때문이다. 이러한 값의 종류를 자료형(data type) 혹은 타입(type)이라고 한다. 예를 들어 정수인 1과 문자열인 “1”이 컴퓨터에 저장될 때 어느 정도의 메모리를 차지하는지 알아보면 두 값의 저장 방식이 다르다는 것을 알 수 있다.\n`getsizeof`\n파이썬에서 변수의 메모리 크기를 알기 위해서는 sys 패키지의 getsizeof 명령을 사용한다.\n\nfrom sys import getsizeof\n\n\na = 1\ngetsizeof(a)\n\n28\n\n\n\nb = \"1\"\ngetsizeof(b)\n\n50"
  },
  {
    "objectID": "02.14 파이썬의 자료형.html#파이썬의-자료형",
    "href": "02.14 파이썬의 자료형.html#파이썬의-자료형",
    "title": "2.14 파이썬의 자료형",
    "section": "파이썬의 자료형",
    "text": "파이썬의 자료형\n파이썬에서 사용할 수 있는 자료형 중 많이 사용하는 것은 다음과 같다.\n\nNoneType\nbool\nint\nfloat\ncomplex\nstr\ntuple\nlist\ndict\nfunction\n\n변수나 값의 자료형을 알아보려면 type 명령을 사용하면 된다. None 타입은 변수가 비어있음을 표시할 때 사용한다.\n\ntype(None)\n\nNoneType\n\n\n\ntype(True)\n\nbool\n\n\n\ntype(1)\n\nint\n\n\n\ntype(3.14)\n\nfloat\n\n\n복소수를 사용할 때는 허수부 숫자 뒤에 j문자를 붙인다.\n\ntype(2 + 3j)\n\ncomplex\n\n\n\ntype(\"abc\")\n\nstr\n\n\n\ntype((1, 2, 3))\n\ntuple\n\n\n\ntype([1, 2, 3])\n\nlist\n\n\n\ntype({\"A\": 10, \"B\": 20, \"C\": 30})\n\ndict\n\n\n파이썬에서는 함수도 독자적인 자료형을 가진다. 파이썬에서 함수의 자료형 이름은 function 이다.\n\ndef f():\n    return 1\n\n\ntype(f)\n\nfunction"
  },
  {
    "objectID": "02.14 파이썬의 자료형.html#자료형과-클래스",
    "href": "02.14 파이썬의 자료형.html#자료형과-클래스",
    "title": "2.14 파이썬의 자료형",
    "section": "자료형과 클래스",
    "text": "자료형과 클래스\n`__class__`\n파이썬에서 자료형과 클래스는 같은 의미라고 봐도 무방하다. 클래스를 알고 싶으면 __class__ 속성을 살펴본다.\n\na = 1\n\n\ntype(a)\n\nint\n\n\n\na.__class__\n\nint\n\n\n\nb = [1, 2, 3]\n\n\ntype(b)\n\nlist\n\n\n\nb.__class__\n\nlist\n\n\n\nclass C(object):\n    pass\n\n\nc = C()\n\n위 코드에서 pass 키워드는 아무런 일도 하지 않는 들여쓰기 블럭을 만들기 위한 것이다.\n\ntype(c)\n\n__main__.C\n\n\n\nc.__class__\n\n__main__.C\n\n\n클래스 이름앞의 __main__은 클래스가 정의된 모듈(module) 즉 파일의 이름이다. REPL 환경에서 입력하는 코드는 __main__ 으로 가정한다."
  },
  {
    "objectID": "02.14 파이썬의 자료형.html#자료형-변환",
    "href": "02.14 파이썬의 자료형.html#자료형-변환",
    "title": "2.14 파이썬의 자료형",
    "section": "자료형 변환",
    "text": "자료형 변환\n자료형을 바꾸기 위해서는 자료형 클래스 생성자를 이용한다. 예를 들어 정수를 문자열로 바꿀 때는 str, 문자열을 정수로 바꿀 때는 int를 사용한다.\n\nstr(20201012)\n\n'20201012'\n\n\n\nint(\"20201012\")\n\n20201012\n\n\n````zxsuqszmziyj 연습 문제 2.14.1\n오늘 날짜를 나타내는 문자열과 생일을 나타내는 문자열이 다음과 같을 때 만 나이를 구하라. (힌트: 숫자로 바꾼 뒤 빼기 연산을 한다.)\ntoday = \"2020-10-25\"\nbirthday = \"2020-11-21\"\n````"
  },
  {
    "objectID": "02.14 파이썬의 자료형.html#불변형-자료형과-변형-자료형",
    "href": "02.14 파이썬의 자료형.html#불변형-자료형과-변형-자료형",
    "title": "2.14 파이썬의 자료형",
    "section": "불변형 자료형과 변형 자료형",
    "text": "불변형 자료형과 변형 자료형\n불변형(immutable) 자료형\n변형(mutable) 자료형\n파이썬의 자료형에는 불변형(immutable) 자료형과 변형(mutable) 자료형이 있다.\n\n정수, 실수, 문자열, 튜플은 불변형 자료형이다.\n리스트, 딕셔너리는 변형 자료형이다.\n\n불변형 자료형은 데이터 값을 바꿀 때 메모리에 저장된 데이터 전체를 모두 없애고 새로 만들지만 변형 자료형은 할당된 메모리를 그냥 놔두고 메모리에 씌여있는 내용(값)만 바꾼다.\n예를 들어 x라는 변수에 1이라는 정수를 입력하는 경우를 생각하자.\n\nx = 1\n\n위와 같은 코드를 실행하면 이름공간(name space)에 x라는 변수 이름이 생기고 메모리의 특정 위치에 1이라는 값이 씌여진다. 씌여진 메모리 위치(주소)를 알기 위해서는 id 명령을 사용한다.\n\nid(x)\n\n140709685770016\n\n\n\n%load_ext tikzmagic\n\n\n%%tikz -p kotex,pgfplots -l arrows.meta,calc -s 2000,1200 -f png\n\n\\coordinate (leftbottom) at (-2,-0.5);\n\\coordinate (righttop) at (7,1.5);\n\\fill[white,use as bounding box] (leftbottom) rectangle (righttop);\n\\draw[help lines, white] (leftbottom) grid (righttop);\n\n\\node at (0, 1) {이름공간};\n\\node at (3, 1) {메모리};\n\\node[draw] at (0,0) (x) {x};\n\\node[draw] at (3, 0) (1) {1};\n\\draw[-&gt;] (x) -- (1);\n\\node at(3, 0.5) {주소: 140709685770016};\n\n\n\n\n\n\n\n\n이 상태에서 변수 x의 값을 2로 바꾸면 메모리상의 해당 위치의 값이 2로 바뀌는 것이 아니라 메모리의 다른 위치에 2가 씌여지고 x는 새로운 위치를 가리키게 된다.\n\nx = 2\n\n\nid(x)\n\n140709685770048\n\n\n\n%%tikz -p kotex,pgfplots -l arrows.meta,calc -s 2000,1200 -f png\n\n\\coordinate (leftbottom) at (-2,-2.5);\n\\coordinate (righttop) at (7,1.5);\n\\fill[white,use as bounding box] (leftbottom) rectangle (righttop);\n\\draw[help lines, white] (leftbottom) grid (righttop);\n\n\\node at (0, 1) {이름공간};\n\\node at (3, 1) {메모리};\n\\node[draw] at (0,0) (x) {x};\n\\node[draw] at (3, 0) (1) {1};\n\\draw (2.5, -0.25) -- (3.5, 0.25);\n\\draw (2.5, 0.25) -- (3.5, -0.25);\n\\node[draw] at (3, -1) (2) {2};\n\\draw[-&gt;] (x) -- (2);\n\\node at(3, 0.5) {주소: 140709685770016};\n\\node at(3, -1.5) {주소: 140709685770048};\n\n\n\n\n\n\n\n\n이번에는 리스트 즉, 변형 자료형의 경우를 살펴보자. 다음과 같이 실행하면 변수 x는 리스트 변형 자료형을 가리키고 리슽 변형 자료형의 첫번째 원소는 불변형 자료형인 정수 1을 가리킨다.\n\nx = [1]\n\n\nid(x)\n\n3034340425472\n\n\n\nid(x[0])\n\n140709685770016\n\n\n\n%%tikz -p kotex,pgfplots -l arrows.meta,calc -s 2000,1200 -f png\n\n\\coordinate (leftbottom) at (-2,-2.5);\n\\coordinate (righttop) at (10,1.5);\n\\fill[white,use as bounding box] (leftbottom) rectangle (righttop);\n\\draw[help lines, white] (leftbottom) grid (righttop);\n\n\\node at (0, 1) {이름공간};\n\\node at (3, 1) {메모리};\n\\node[draw] at (0,0) (x) {x};\n\\node[draw] at (3, 0) (list) {};\n\\node[draw] at (8, 0) (1) {1};\n\\draw[-&gt;] (x) -- (list);\n\\draw[-&gt;] (list) -- (1);\n\\node at(3, 0.5) {주소: 3034340425472};\n\\node at(8, 0.5) {주소: 140709685770016};\n\n\n\n\n\n\n\n\n리스트 변수 x의 내용을 바꾸면 리스트 자체의 메모리가 파괴되지 않고 리스트가 가리키는 불변형 자료형만 바뀐다.\n\nx[0] = 2\n\n\nid(x)\n\n3034340425472\n\n\n\nid(x[0])\n\n140709685770048\n\n\n\n%%tikz -p kotex,pgfplots -l arrows.meta,calc -s 2000,1200 -f png\n\n\\coordinate (leftbottom) at (-2,-2.5);\n\\coordinate (righttop) at (10,1.5);\n\\fill[white,use as bounding box] (leftbottom) rectangle (righttop);\n\\draw[help lines, white] (leftbottom) grid (righttop);\n\n\\node at (0, 1) {이름공간};\n\\node at (3, 1) {메모리};\n\\node[draw] at (0,0) (x) {x};\n\\node[draw] at (3, 0) (list) {};\n\\node[draw] at (8, 0) (1) {1};\n\\node[draw] at (8, -1) (2) {2};\n\\draw[-&gt;] (x) -- (list);\n\\draw[-&gt;] (list) -- (2);\n\\node at(3, 0.5) {주소: 3034340425472};\n\\node at(8, 0.5) {주소: 140709685770016};\n\\node at(8, -1.5) {주소: 140709685770048};\n\\draw (7.5, -0.25) -- (8.5, 0.25);\n\\draw (7.5, 0.25) -- (8.5, -0.25);\n\n\n\n\n\n\n\n\n리스트와 사용법이 거의 같지만 불변형 자료형인 튜플의 경우에는 이렇게 원소가 가리키는 내용만 바꿀 수 없다.\n\nx = (1,)\n\n\nid(x)\n\n3034340887328\n\n\n\nid(x[0])\n\n140709685770016\n\n\n\n%%tikz -p kotex,pgfplots -l arrows.meta,calc -s 2000,1200 -f png\n\n\\coordinate (leftbottom) at (-2,-2.5);\n\\coordinate (righttop) at (10,1.5);\n\\fill[white,use as bounding box] (leftbottom) rectangle (righttop);\n\\draw[help lines, white] (leftbottom) grid (righttop);\n\n\\node at (0, 1) {이름공간};\n\\node at (3, 1) {메모리};\n\\node[draw] at (0,0) (x) {x};\n\\node[draw] at (3, 0) (list) {};\n\\node[draw] at (8, 0) (1) {1};\n\\draw[-&gt;] (x) -- (list);\n\\draw[-&gt;] (list) -- (1);\n\\node at(3, 0.5) {주소: 3034340887328};\n\\node at(8, 0.5) {주소: 140709685770016};\n\n\n\n\n\n\n\n\n\nx[0] = 2\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-42-ebac946b3580&gt; in &lt;module&gt;\n----&gt; 1 x[0] = 2\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n튜플의 내용을 바꾸러면 튜플 전체를 파괴하고 다시 만들어야 한다.\n\nx = (2,)\n\n\nid(x)\n\n3034338007216\n\n\n\nid(x[0])\n\n140709685770048\n\n\n\n%%tikz -p kotex,pgfplots -l arrows.meta,calc -s 2000,1200 -f png\n\n\\coordinate (leftbottom) at (-2,-2.5);\n\\coordinate (righttop) at (10,1.5);\n\\fill[white,use as bounding box] (leftbottom) rectangle (righttop);\n\\draw[help lines, white] (leftbottom) grid (righttop);\n\n\\node at (0, 1) {이름공간};\n\\node at (3, 1) {메모리};\n\\node[draw] at (0,0) (x) {x};\n\\node[draw] at (3, 0) (list) {};\n\\node[draw] at (3, -1) (tuple) {};\n\\node[draw] at (8, 0) (1) {1};\n\\node[draw] at (8, -1) (2) {2};\n\\draw[-&gt;] (x) -- (tuple);\n\\draw[-&gt;] (tuple) -- (2);\n\\node at(3, 0.5) {주소: 1670523444480};\n\\node at(3, -1.5) {주소: 3034338007216};\n\\node at(8, 0.5) {주소: 140709685770016};\n\\node at(8, -1.5) {주소: 140709685770048};\n\\draw (2.5, -0.25) -- (3.5, 0.25);\n\\draw (2.5, 0.25) -- (3.5, -0.25);\n\\draw (7.5, -0.25) -- (8.5, 0.25);\n\\draw (7.5, 0.25) -- (8.5, -0.25);"
  },
  {
    "objectID": "02.12 파이썬 객체지향 프로그래밍.html",
    "href": "02.12 파이썬 객체지향 프로그래밍.html",
    "title": "2.12 파이썬 객체지향 프로그래밍",
    "section": "",
    "text": "프로그램이 어떤 작업을 수행하기 위해서는 (1)데이터와 (2)데이터를 조작하는 행위, 두 가지 요소가 필요하다. 일반적으로 데이터는 변수에 넣어서 사용하고 데이터를 조작하는 일은 함수로 구성해서 쉽게 실행할 수 있도록 만들어 놓는다.\n객체(object, instance)\n멤버(member), 속성(attribute)\n메서드(method)\n객체(object, instance)는 서로 연관된 데이터와 그 데이터를 조작하기 위한 함수를 하나의 집합에 모아놓은 것을 말한다. 이 때 집합의 원소가 되는 변수나 함수는 멤버(member) 또는 속성(attribute)이라고 한다. 특히 객체의 속성인 함수는 메서드(method)라고 부른다.\n예를 들어 사각형의 면적을 구하는 프로그램을 만든다고 하자. 필요한 변수와 함수는 다음과 같다.\n\n가로 길이와 세로 길이라는 두 개의 데이터를 넣을 변수\n두 길이를 곱해서 면적을 구하는 함수\n\n객체지향을 사용하지 않고 파이썬으로 구현하면 다음과 같다.\n\nh = 10\nv = 20\n\n\ndef area(h, v):\n    return h * v\n\n\na = area(h, v)\nprint(a)\n\n200\n\n\n위 프로그램에서 사각형의 가로 길이를 나타내는 변수 h, 사각형의 세로 길이를 나타내는 변수 v, 그리고 이 사각형의 면적을 계산하는 함수 area는 제각기 떨어져 있다. 하지만 객체지향 프로그래밍에서는 이 세가지를 하나의 객체(object)로 묶을 수 있다.\n다음은 이 프로그램을 객체지향 방식으로 다시 구현한 것이다.\n\nclass Rectangle(object):\n\n    def __init__(self, h, v):\n        self.h = h\n        self.v = v\n\n    def area(self):\n        return self.h * self.v\n\n이 부분은 클래스(class) 구현이라고 한다. 실제로 길이 변수들을 저장하고 면적을 계산하는 코드는 다음과 같다.\n\nr = Rectangle(10, 20)\na = r.area()\nprint(a)\n\n200\n\n\n위 프로그램에서 r이 바로 객체이다. 어떻게 위와 같은 코드를 만드는지에 대해서는 곧 자세히 설명할 것이다.\n객체 r은 사각형의 가로 길이와 세로 길이를 나타내는 변수 h와 v 그리고 면적을 계산하는 함수 area()가 합쳐져서 만들어진 것이다. 객체 r에 포함된 이 변수들과 함수, 즉 속성을 꺼내려면 객체 이름 뒤에 점(.)을 붙인 다음 속성 이름을 입력하면 된다. 다음과 같이 입력해 보면 알 수 있다.\n\nr.h\n\n10\n\n\n\nr.v\n\n20\n\n\n\nr.area()\n\n200"
  },
  {
    "objectID": "02.12 파이썬 객체지향 프로그래밍.html#객체",
    "href": "02.12 파이썬 객체지향 프로그래밍.html#객체",
    "title": "2.12 파이썬 객체지향 프로그래밍",
    "section": "",
    "text": "프로그램이 어떤 작업을 수행하기 위해서는 (1)데이터와 (2)데이터를 조작하는 행위, 두 가지 요소가 필요하다. 일반적으로 데이터는 변수에 넣어서 사용하고 데이터를 조작하는 일은 함수로 구성해서 쉽게 실행할 수 있도록 만들어 놓는다.\n객체(object, instance)\n멤버(member), 속성(attribute)\n메서드(method)\n객체(object, instance)는 서로 연관된 데이터와 그 데이터를 조작하기 위한 함수를 하나의 집합에 모아놓은 것을 말한다. 이 때 집합의 원소가 되는 변수나 함수는 멤버(member) 또는 속성(attribute)이라고 한다. 특히 객체의 속성인 함수는 메서드(method)라고 부른다.\n예를 들어 사각형의 면적을 구하는 프로그램을 만든다고 하자. 필요한 변수와 함수는 다음과 같다.\n\n가로 길이와 세로 길이라는 두 개의 데이터를 넣을 변수\n두 길이를 곱해서 면적을 구하는 함수\n\n객체지향을 사용하지 않고 파이썬으로 구현하면 다음과 같다.\n\nh = 10\nv = 20\n\n\ndef area(h, v):\n    return h * v\n\n\na = area(h, v)\nprint(a)\n\n200\n\n\n위 프로그램에서 사각형의 가로 길이를 나타내는 변수 h, 사각형의 세로 길이를 나타내는 변수 v, 그리고 이 사각형의 면적을 계산하는 함수 area는 제각기 떨어져 있다. 하지만 객체지향 프로그래밍에서는 이 세가지를 하나의 객체(object)로 묶을 수 있다.\n다음은 이 프로그램을 객체지향 방식으로 다시 구현한 것이다.\n\nclass Rectangle(object):\n\n    def __init__(self, h, v):\n        self.h = h\n        self.v = v\n\n    def area(self):\n        return self.h * self.v\n\n이 부분은 클래스(class) 구현이라고 한다. 실제로 길이 변수들을 저장하고 면적을 계산하는 코드는 다음과 같다.\n\nr = Rectangle(10, 20)\na = r.area()\nprint(a)\n\n200\n\n\n위 프로그램에서 r이 바로 객체이다. 어떻게 위와 같은 코드를 만드는지에 대해서는 곧 자세히 설명할 것이다.\n객체 r은 사각형의 가로 길이와 세로 길이를 나타내는 변수 h와 v 그리고 면적을 계산하는 함수 area()가 합쳐져서 만들어진 것이다. 객체 r에 포함된 이 변수들과 함수, 즉 속성을 꺼내려면 객체 이름 뒤에 점(.)을 붙인 다음 속성 이름을 입력하면 된다. 다음과 같이 입력해 보면 알 수 있다.\n\nr.h\n\n10\n\n\n\nr.v\n\n20\n\n\n\nr.area()\n\n200"
  },
  {
    "objectID": "02.12 파이썬 객체지향 프로그래밍.html#클래스",
    "href": "02.12 파이썬 객체지향 프로그래밍.html#클래스",
    "title": "2.12 파이썬 객체지향 프로그래밍",
    "section": "클래스",
    "text": "클래스\n클래스(class)\n객체지향 프로그래밍에서 객체를 만들려면 객체를 바로 만들지 못하고 항상 클래스(class)라는 것을 만든 후에 그 클래스를 이용하여 객체를 만들어야 한다.\n위 예제에서 Rectangle은 클래스이고 r은 Rectangle 클래스로 만들어진 객체이다. 객체와 클래스의 관계는 “붕어빵”과 “붕어빵을 굽는 틀”에 비유할 수 있다. 즉, 정해진 속성, 여기에서는 가로 길이 h와 세로 길이 v라는 속성을 가지도록 사각형 클래스를 한 번 만들어 놓으면 이 속성을 가지는 실제 사각형은 얼마든지 많이 만들 수 있다.\n예를 들어 위에서 만들어 놓은 Rectangle 클래스로 다음과 같이 5개의 사각형을 만들 수도 있다.\n\na = Rectangle(1, 1)   # 가로 1, 세로 1인 사각형\nb = Rectangle(2, 1)   # 가로 2, 세로 1인 사각형\nc = Rectangle(4, 2)   # 가로 4, 세로 2인 사각형\nd = Rectangle(6, 3)   # 가로 6, 세로 3인 사각형\ne = Rectangle(8, 5)   # 가로 8, 세로 5인 사각형\n\n이 사각형들의 면적은 다음과 같이 계산한다.\n\nprint(a.area())\nprint(b.area())\nprint(c.area())\nprint(d.area())\nprint(e.area())\n\n1\n2\n8\n18\n40"
  },
  {
    "objectID": "02.12 파이썬 객체지향 프로그래밍.html#생성자",
    "href": "02.12 파이썬 객체지향 프로그래밍.html#생성자",
    "title": "2.12 파이썬 객체지향 프로그래밍",
    "section": "생성자",
    "text": "생성자\n파이썬에서 클래스를 정의하는 문법은 다음과 같다.\nclass 클래스이름(object):\n    \n    def __init__(self, 속성값1, 속성값2, 속성값3):\n        self.속성이름1 = 속성값1\n        self.속성이름2 = 속성값2\n        self.속성이름3 = 속성값3\n\n생성자(constructor)\n`__init__`\n이때 속성값 인수는 필요하지 않다면 없어도 된다. 여기에서 class 블럭 안에 정의된 __init__란 함수는 생성자(constructor)라고 하며 클래스 정의에서 가장 중요한 함수이다.\n객체를 생성할 때는 클래스이름을 함수처럼 호출해야 하는데, 이때 실제로는 __init__로 정의된 생성자 함수가 호출된다. 생성자 함수 내부에서는 생성자를 호출할 때 넣은 입력 변수, 즉 인자의 값을 속성값으로 저장한다.\n````yrfovuchvxni 연습 문제 2.12.1\n삼각형의 넓이를 계산하기 위한 클래스를 만든다. 이 클래스는 다음과 같은 속성을 가진다.\n\n밑변의 길이 b 와 높이 h\n삼각형의 넓이를 계산하는 메서드 area\n\n\n````{admonition} 연습 문제 2.12.2\n\n사각 기둥의 부피를 계산하기 위한 클래스를 만든다. 이 클래스는 다음과 같은 속성을 가진다.\n\n* 밑면의 가로 길이 `a`, 밑면의 세로 길이 `b`, 높이 `h`\n* 부피를 계산하는 메서드 `volume`\n* 겉넓이를 계산하는 메서드 `surface`"
  },
  {
    "objectID": "02.12 파이썬 객체지향 프로그래밍.html#게임-캐릭터와-객체",
    "href": "02.12 파이썬 객체지향 프로그래밍.html#게임-캐릭터와-객체",
    "title": "2.12 파이썬 객체지향 프로그래밍",
    "section": "게임 캐릭터와 객체",
    "text": "게임 캐릭터와 객체\n이번에는 컴퓨터 게임의 캐릭터를 만드는 예제를 통해 클래스 상속(Inheritance)의 개념을 공부한다. 컴퓨터 게임에 사용되는 플레이어의 캐릭터는 객체지향 프로그램을 통해 만든다고 생각해 보자. 캐릭터의 능력치, 경험치 등의 숫자는 캐릭터마다 다르게 관리되어야 하므로 객체의 속성이 될 수 있다. 또한 모든 캐릭터 조작에 공통적으로 필요한 이동, 공격 등의 조작은 메서드로 구현할 수 있을 것이다.\n\n플레이어의 캐릭터\n속성: 캐릭터의 능력치, 경험치 등\n메서드: 캐릭터를 움직이는 방법, 이동, 공격 등\n\n이를 기반으로 캐릭터를 만들어내는 Character라는 클래스를 만든다. 이 클래스로 만든 캐릭터는 1,000이라는 life 속성값을 가지고 생성되며 게임상에서 공격받을 때는 attacked라는 메서드가 호출되어 life 속성값을 10만큼 감소시키고 공격받았음을 표시한다.\n\nclass Character(object):\n\n    def __init__(self):\n        self.life = 1000\n\n    def attacked(self):\n        self.life -= 10\n        print(\"공격받음! 생명력 =\", self.life)\n\n이 클래스로 a, b, c 세 개의 캐릭터 객체를 생성한다.\n\na = Character()\nb = Character()\nc = Character()\n\n모든 객체의 초기 life 속성값은 모두 1000이다.\n\na.life, b.life, c.life\n\n(1000, 1000, 1000)\n\n\n하지만 공격을 받은 캐릭터의 생명력은 감소된다.\n\na.attacked()\n\n공격받음! 생명력 = 990\n\n\n\nb.attacked()\n\n공격받음! 생명력 = 990\n\n\n\na.attacked()\na.attacked()\na.attacked()\na.attacked()\na.attacked()\n\n공격받음! 생명력 = 980\n공격받음! 생명력 = 970\n공격받음! 생명력 = 960\n공격받음! 생명력 = 950\n공격받음! 생명력 = 940\n\n\n\na.life, b.life, c.life\n\n(940, 990, 1000)"
  },
  {
    "objectID": "02.12 파이썬 객체지향 프로그래밍.html#클래스-상속",
    "href": "02.12 파이썬 객체지향 프로그래밍.html#클래스-상속",
    "title": "2.12 파이썬 객체지향 프로그래밍",
    "section": "클래스 상속",
    "text": "클래스 상속\n상속\n이제 클래스 상속(class inheritance)이라는 개념을 생각한다. 앞에서 만들어 본 클래스는 모든 캐릭터에 공통적인 life 속성만을 가지고 있었다. 하지만 만약 전사(Warrior), 마법사(Wizard) 등 다양한 직업을 가진 캐릭터가 있고, 각 캐릭터는 서로 다른 초기 속성값을 가지고 태어난다면 어떻게 프로그램해야 할까?\n각각의 직업 캐릭터를 별도의 클래스로 만들어도 되겠지만, 클래스 상속을 사용하면 이미 만들어진 클래스 코드를 재사용하여 다른 클래스를 생성할 수 있다. 즉, 상속 과정에서 공통으로 사용하는 속성이나 메서드는 두 번 반복해서 코딩할 필요가 없다. 이때 상속을 받는 클래스를 자식 클래스(child class), 상속의 대상이 되는 클래스를 부모 클래스(parent class)라고 한다.\nCharacter 부모 클래스에서 상속을 통해 Warrior 라는 자식 클래스와 Wizard 라는 자식 클래스를 만든다 상속을 위한 파이썬 문법은 다음과 같다.\nclass 자식클래스이름(부모클래스이름):\n\n    def __init__(self, 속성값1, 속성값2):\n        super(자식클래스이름, self).__init__()\n        자식 클래스의 초기화 코드\n사실 우리가 지금까지 쓰던 클래스 정의를 살펴보면 object라는 부모 클래스에서 상속받는 것이었다.\n`super`\n이 코드에서 super(자식클래스이름, self).__init()__ 부분은 부모 클래스의 초기화 생성자를 호출하는 부분이다. 예를 들어 Warrior 라는 클래스에서 부모 클래스인 Character 클래스의 생성자를 호출하면 life라는 속성값을 초기화하므로 자식 클래스에서는 이 속성값을 초기화해줄 필요가 없다.\n\nclass Warrior(Character):\n\n    def __init__(self):\n        super(Warrior, self).__init__()\n        self.strength = 15\n        self.intelligence = 5\n\n\nclass Wizard(Character):\n\n    def __init__(self):\n        super(Wizard, self).__init__()\n        self.strength = 5\n        self.intelligence = 15\n\n이 클래스의 객체를 만들어 보면 명시적으로 만들지 않았지만 life라는 속성과 attacked 라는 메서드를 가진다.\n\na = Warrior()\nb = Wizard()\n\n\na.life, b.life\n\n(1000, 1000)\n\n\n\na.strength, b.strength\n\n(15, 5)\n\n\n\na.intelligence, b.intelligence\n\n(5, 15)\n\n\n\na.attacked()\n\n공격받음! 생명력 = 990\n\n\n\nb.attacked()\n\n공격받음! 생명력 = 990"
  },
  {
    "objectID": "02.12 파이썬 객체지향 프로그래밍.html#메서드-오버라이딩",
    "href": "02.12 파이썬 객체지향 프로그래밍.html#메서드-오버라이딩",
    "title": "2.12 파이썬 객체지향 프로그래밍",
    "section": "메서드 오버라이딩",
    "text": "메서드 오버라이딩\n오버라이딩(overriding)\n메서드 오버라이딩(Method Overriding)이란, 여러 클래스에 걸쳐서 같은 이름의 메서드를 만드는 것이다. 예를 들어 부모 클래스, 전사 캐릭터 클래스, 마법사 캐릭터 클래스에 공통으로 attack이라는 메서드가 있지만, 각각 하는 일이 다를 때는 다음처럼 같은 이름의 메서드를 클래스별로 구현하면 된다. 이렇게 되면 부모 클래스에서 만든 메서드 정의를 자식 클래스에서는 변경해서 사용한다.\n\nclass Character(object):\n\n    def __init__(self):\n        self.life = 1000\n        self.strength = 10\n        self.intelligence = 10\n\n    def attacked(self):\n        self.life -= 10\n        print(\"공격받음! 생명력 =\", self.life)\n\n    def attack(self):\n        print(\"공격!\")\n\n\nclass Warrior(Character):\n\n    def __init__(self):\n        super(Warrior, self).__init__()\n        self.strength = 15\n        self.intelligence = 5\n\n    def attack(self):\n        print(\"육탄 공격!\")\n\n\nclass Wizard(Character):\n\n    def __init__(self):\n        super(Wizard, self).__init__()\n        self.strength = 5\n        self.intelligence = 15\n\n    def attack(self):\n        print(\"마법 공격!\")\n\n\na = Character()\nb = Warrior()\nc = Wizard()\n\n\na.attack()\n\n공격!\n\n\n\nb.attack()\n\n육탄 공격!\n\n\n\nc.attack()\n\n마법 공격!\n\n\n\na.attacked()\n\n공격받음! 생명력 = 990\n\n\n\nb.attacked()\n\n공격받음! 생명력 = 990"
  },
  {
    "objectID": "02.12 파이썬 객체지향 프로그래밍.html#참조-오버로딩-overloading",
    "href": "02.12 파이썬 객체지향 프로그래밍.html#참조-오버로딩-overloading",
    "title": "2.12 파이썬 객체지향 프로그래밍",
    "section": "참조: 오버로딩 Overloading",
    "text": "참조: 오버로딩 Overloading\n오버로딩(overloading)\n이와 비슷한 이름으로 오버로딩(Overloading)이라는 것이 있는데 이는 전혀 다른 개념이다. 오버로딩은 같은 메서드가 인수의 자료형이나 개수를 다르게 받을 수 있는 것을 말한다. C++, Java 등에서는 지원하지만, 파이썬에서는 오버로딩을 지원하지 않으므로 프로그래머가 내부적으로 알아서 처리해야 한다\n다음은 C++에서 오버로딩을 지원하는 함수 선언의 예이다.\nfloat length(list p1, list p2);                  // 점 (p1[0], p1[1]) - (p1[0], p1[1]) 까지의 길이\nfloat length(int x1, int y1, int x2, int y2);    // 점 (x1, y1) - (x2, y2) 까지의 길이\n````yrfovuchvxni 연습 문제 2.12.3\n게임 캐릭터 코드에서 attacked 메서드도 오버라이딩을 하여 전사와 마법사가 공격을 받을 때 life 속성값이 다르게 감소하도록 한다.\n\n````{admonition} 연습 문제 2.12.4\n\n다음과 같이 자동차를 나타내는 `Car` 클래스를 구현한다. \n\n* 이 클래스는 최고 속도를 의미하는 `max_speed`라는 속성과 현재 속도를 나타내는 `speed`라는 속성을 가진다.\n* 객체 생성시 `max_speed` 속성은  160이 되고 `speed` 속성은 0이 된다.\n* `speed_up`, `speed_down`이라는 메서드를 가진다. `speed_up`을 호출하면 `speed` 속성이 20씩 증가하고 `speed_down`을 호출하면 `speed` 속성이 20씩 감소한다.\n* 스피드 속성 `speed`의 값은 `max_speed` 속성 값, 즉 160을 넘을 수 없다. 또 0 미만으로 감소할 수도 없다.\n* 메서드는 호출시 속도 정보를 출력하고 명시적인 반환값을 가지지 않는다.\n* 위 기능이 모두 정상적으로 구현되었음을 보이는 코드를 추가한다.\n````yrfovuchvxni 연습 문제 2.12.5\nCar 클래스를 기반으로 SportCar와 Truck이라는 두 개의 자식 클래스를 구현한다.\n\nSportCar 클래스는 max_speed 속성이 200 이고 speed_up, speed_down 호출시 속도가 45씩 증가 혹은 감소한다.\nTruck 클래스는 max_speed 속성이 100 이고 speed_up, speed_down 호출시 속도가 15씩 증가 혹은 감소한다.\n스피드 속성 speed의 값은 max_speed 속성 값을 넘을 수 없다. 또 0 미만으로 감소할 수도 없다.\n메서드는 호출시 속도 정보를 출력하고 명시적인 반환값을 가지지 않는다.\n위 기능이 모두 정상적으로 구현되었음을 보이는 코드를 추가한다.\n\n\n## 특수 메서드\n\n\n```{margin}\n특수 메서드(special method)\n```\n\n\n파이썬에는 특수 메서드(Special Methods)라는 것이 존재한다. 메서드 이름의 앞과 뒤에 두 개의 밑줄(underscore)이 붙어있는 메서드이다.\n이 메서드들은 특수한 용도에 사용하는 것이다 \n\n\n```{margin}\n`__repr__`\n```\n\n```{margin}\n`__str__`\n```\n\n\n예를 들어 파이선 셸에서 변수 이름을 입력하고 &lt;Enter&gt; 키(주피터 노트북에서는 &lt;Shift&gt; + &lt;Enter&gt;)를 누르면 변수의 값이 호출되는데, 사실 이것은 해당 변수가 가지는 `__repr__`이라는 메서드가 호출되는 것이다. `repr`은 representation의 약자이다. 또 변수를 `str`이라는 함수에 넣으면 변수를 문자열로 변환해 주는데, 이것도 사실은 `__str__`이라는 메서드가 호출되는 것이다.\n\n예를 들어 다음과 같이 복소수에 대한 클래스인 `Complex` 클래스를 만든다. `r`이라는 속성에 실수부를, `i`이라는 속성에 실수부를 넣는다.\n\n::: {#cell-87 .cell school_cell_uuid='1bd4f23417274a469d079f2691cdea81' execution_count=33}\n``` {.python .cell-code}\nclass Complex(object):\n\n    def __init__(self, realpart, imagpart):\n        self.r = realpart\n        self.i = imagpart\n```\n:::\n\n\n`__repr__` 메서드를 정의하지 않으면 `object` 클래스가 가진 기본 `__repr__` 메서드를 사용한다. 이 함수는 클래스 이름과 변수가 위치하고 있는 메모리 주소를 `&lt;&gt;`안에 써서 반환한다. 기본 `__str__` 메서드도 마찬가지이다.\n\n::: {#cell-89 .cell school_cell_uuid='86faa1d9d79e432b9b5fc6d1609485c4' execution_count=34}\n``` {.python .cell-code}\nc = Complex(1, 2)\nc\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n&lt;__main__.Complex at 0x7fef01144160&gt;\n```\n:::\n:::\n\n\n::: {#cell-90 .cell school_cell_uuid='7890bdff75bf4a319f0b600f7663f15b' execution_count=35}\n``` {.python .cell-code}\nstr(c)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n'&lt;__main__.Complex object at 0x7fef01144160&gt;'\n```\n:::\n:::\n\n\n이번에는 `__repr__` 메서드와 `__repr__` 메서드를 다음과 같이 새로 정의하여 오버라이딩한다.\n\n::: {#cell-92 .cell school_cell_uuid='ad3b74255e524b9c865ee4700e1564db' execution_count=36}\n``` {.python .cell-code}\nclass Complex2(Complex):\n\n    def __repr__(self):\n        return \"Complex: real = %f imag = %f\" % (self.r, self.i)\n\n    def __str__(self):\n        return \"[for str] \" + self.__repr__()\n```\n:::\n\n\n::: {#cell-93 .cell school_cell_uuid='7952d43d4f994565a840d06f1c0eabe7' execution_count=37}\n``` {.python .cell-code}\nc2 = Complex2(1, 1)\nc2\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\nComplex: real = 1.000000 imag = 1.000000\n```\n:::\n:::\n\n\n::: {#cell-94 .cell school_cell_uuid='b51c07d8f2f047c3a828d868d97a7e6a' execution_count=38}\n``` {.python .cell-code}\nstr(c2)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n'[for str] Complex: real = 1.000000 imag = 1.000000'\n```\n:::\n:::\n\n\n\n```{margin}\n`__getitem__`\n```\n\n\n`__getitem__` 스페셜 메서드를 정의하면 마치 리스트나 사전처럼 `[]` 기호를 사용한 인덱싱을 할 수 있다.\n\n::: {#cell-97 .cell school_cell_uuid='e645038e10444d379b9fb083850a14ae' execution_count=39}\n``` {.python .cell-code}\nclass Complex3(Complex2):\n\n    def __getitem__(self, key):\n        if key == \"r\":\n            return self.r\n        if key == \"i\":\n            return self.i\n```\n:::\n\n\n::: {#cell-98 .cell school_cell_uuid='e29f46efe4ae44d38bf8901abc6dd1cc' execution_count=40}\n``` {.python .cell-code}\nc3 = Complex3(1, 2)\nc3\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nComplex: real = 1.000000 imag = 2.000000\n```\n:::\n:::\n\n\n::: {#cell-99 .cell school_cell_uuid='4904ba85cd244d2eb36d5a1a827f3dbf' execution_count=41}\n``` {.python .cell-code}\nc3[\"i\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n2\n```\n:::\n:::\n\n\n````{admonition} 연습 문제 2.12.6\n\n학생의 학번, 이름, 수학 성적, 영어 성적을 저장할 수 있는 클래스를 만들고 평균 성적을 출력하는 메서드를 추가한다.\n주피터 노트북 셸에서 이 클래스 객체의 이름을 입력하면 바로 이름과 학번이 나와야 하고 `str` 명령을 수행하면 이름을 반환한다. 또한, 다음과 같이 수학과 영어 성적을 읽을 수 있어야 한다.\n```\nobj[\"math\"], obj[\"english\"]\n```"
  },
  {
    "objectID": "02.10 리스트와 반복문을 사용하여 계산하기.html",
    "href": "02.10 리스트와 반복문을 사용하여 계산하기.html",
    "title": "2.10 리스트와 반복문을 사용하여 계산하기",
    "section": "",
    "text": "반복문은 리스트 자료형 변수를 대상으로 여러 가지 계산을 할 때 많이 사용된다. 예를 들어 10번의 시험 성적을 담고 있는 a라는 변수가 있을 때 평균 성적은 다음과 같이 구할 수 있다.\na = [90, 85, 95, 80, 90, 100, 85, 75, 85, 80]\na\n\n[90, 85, 95, 80, 90, 100, 85, 75, 85, 80]\nlen(a)\n\n10\nsum = 0\nfor i in range(len(a)):\n    sum = sum + a[i]\naverage = sum / len(a)\naverage\n\n86.5\n만약 학생이 두 명이고 이런 성적 변수가 두 개 있을 때를 생각하자. 두 학생의 시험 성적의 합은 다음과 같이 구할 수 있다.\ns = []\na1 = [90, 85, 95, 80, 90, 100, 85, 75, 85, 80]\na2 = [95, 90, 90, 90, 95, 100, 90, 80, 95, 90]\nfor i in range(len(a1)):\n    s.append(a1[i] + a2[i])\ns\n\n[185, 175, 185, 170, 185, 200, 175, 155, 180, 170]"
  },
  {
    "objectID": "02.10 리스트와 반복문을 사용하여 계산하기.html#리스트의-원소를-직접-반복문에서-사용하기",
    "href": "02.10 리스트와 반복문을 사용하여 계산하기.html#리스트의-원소를-직접-반복문에서-사용하기",
    "title": "2.10 리스트와 반복문을 사용하여 계산하기",
    "section": "리스트의 원소를 직접 반복문에서 사용하기",
    "text": "리스트의 원소를 직접 반복문에서 사용하기\n지금까지는 for 반복문을 사용할 때 range 명령으로 리스트에 적용할 인덱스 정수를 만들어서 리스트의 원소 값을 찾았다. 하지만 for 반복문에서 리스트의 원소를 직접 뽑아 카운터 변수에 넣을 수도 있다.\n지금까지 반복문에서 사용해 온 range 명령은 사실 리스트를 만드는 명령이다.\n\nlist(range(5))\n\n[0, 1, 2, 3, 4]\n\n\n따라서 다음 코드는\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n다음 코드와 같다.\n\nfor i in [0, 1, 2, 3, 4]:\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n따라서 가장 위에서 보인 한 학생의 평균 계산 코드는 다음 코드와 동일하다.\n\nsum = 0\nfor ai in a:\n    sum = sum + ai\naverage = sum / len(a)\naverage\n\n86.5"
  },
  {
    "objectID": "02.10 리스트와 반복문을 사용하여 계산하기.html#enumerate-함수",
    "href": "02.10 리스트와 반복문을 사용하여 계산하기.html#enumerate-함수",
    "title": "2.10 리스트와 반복문을 사용하여 계산하기",
    "section": "enumerate 함수",
    "text": "enumerate 함수\n`enumerate`\n때로는 반복문에 정수 인덱스가 필요할 때도 있다. 예를 들어 반복문에서 append 메서드를 쓰면 계산 속도가 저하된다. 이때는 미리 저장 공간을 만들어 놓고 해당 위치에 계산 결과를 갱신해야 한다. 이때는 enumerate 명령을 쓸 수 있다. enumerate 명령은 리스트의 원소를 반복하면서 동시에 인덱스 값도 생성한다.\n\nfor i, e in enumerate([\"a\", \"b\", \"c\"]):\n    print(\"i = %d, e = %s\" % (i, e))\n\ni = 0, e = a\ni = 1, e = b\ni = 2, e = c\n\n\n\ns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\na1 = [90, 85, 95, 80, 90, 100, 85, 75, 85, 80]\na2 = [95, 90, 90, 90, 95, 100, 90, 80, 95, 90]\nfor i, (a1i, a2i) in enumerate(zip(a1, a2)):\n    s[i] = a1i + a2i\ns\n\n[185, 175, 185, 170, 185, 200, 175, 155, 180, 170]"
  },
  {
    "objectID": "02.10 리스트와 반복문을 사용하여 계산하기.html#리스트의-리스트",
    "href": "02.10 리스트와 반복문을 사용하여 계산하기.html#리스트의-리스트",
    "title": "2.10 리스트와 반복문을 사용하여 계산하기",
    "section": "리스트의 리스트",
    "text": "리스트의 리스트\n학생이 5명이고 각 학생이 10번의 시험에 대한 성적을 가진다면 다음과 같이 리스트의 리스트로 전체 시험 성적을 나타낼 수 있다.\n\nX = [[85,  90,  20,  50,  60,  25,  30,  75,  40,  55],\n     [70, 100,  70,  70,  55,  75,  55,  60,  40,  45],\n     [25,  65,  15,  25,  20,   5,  60,  70,  35,  10],\n     [80,  45,  80,  40,  75,  35,  80,  55,  70,  90],\n     [35,  50,  75,  25,  35,  70,  65,  50,  70,  10]]\n\n이 때 전체 평균 점수는 다음과 같이 구한다.\n\nsum = 0\nnum = 0\nfor i in range(len(X)):\n    for j in range(len(X[i])):\n        num = num + 1\n        sum = sum + X[i][j]\nsum / num\n\n52.7\n\n\n```utpfhfayruzl 연습 문제 2.10.1\n어떤 학생이 5개의 과목을 수강하여 다음과 같은 성적(grade)을 받았다. (4점이 만점)\n\\[ X = 4, 3, 2, 3, 4 \\]\n이 5개 과목의 이수 학점(credit hours)은 각각 다음과 같다.\n\\[ W = 3, 3, 1, 2, 2 \\]\n이 때 평균 평점(GPA)은 성적의 단순 평균이 아니라 이수 학점을 가중치(weight)로 써서 다음과 같이 가중 평균을 구해야 한다.\n\\[ \\dfrac{\\text{성적과 이수 학점을 곱한 값의 총합 즉, 가중합}}{\\text{이수 학점의 총합}} =  \n\\dfrac{3 \\times 4 + 3 \\times 3 + 1 \\times 2 + 2 \\times 3 + 2 \\times 4}{3 + 3 + 1 + 2 + 2}\\]\n\\(i\\)번째 과목의 성적을 \\(X_i\\)라고 하고 \\(i\\)번째 과목의 이수 학점을 \\(W_i\\)라고 하면 가중 평균은 다음과 같은 수식으로 나타낼 수도 있다.\n\\[ \\dfrac{W_1 X_1 + W_2 X_2 + W_3 X_3 + W_4 X_4 + W_5 X_5}{W_1 + W_2 + W_3 + W_4 + W_5} \\]\n이 학생의 평균 평점을 구하는 코드를 작성한다.\n\n```{admonition} 연습 문제 2.10.2\n\n자료의 분산(Variance)는 각 자료 값에서 자료의 평균값을 뺀 나머지를 제곱한 값의 평균을 말한다. 예를 들어 자료가 다음과 같다고 하자\n\n$$ X = 6, 5, 4, 7, 3, 5 $$\n\n이 자료의 평균은 다음과 같다.\n\n$$ \\dfrac{(6 + 5 + 4 + 7 + 3 + 5)}{6} = 5$$\n\n각 자료 값에서 자료의 평균값을 뺀 나머지를 제곱한 값을 모두 더한 값의 평균은 다음과 같이 구한다.\n\n$$ \\dfrac{(6 - 5)^2 + (5 - 5)^2 + (4 - 5)^2 + (7 - 5)^2 + (3 - 5)^2 + (5 - 5)^2}{6} $$\n\n이 자료의 분산을 구하는 코드를 작성한다."
  },
  {
    "objectID": "02.10 리스트와 반복문을 사용하여 계산하기.html#zip-함수",
    "href": "02.10 리스트와 반복문을 사용하여 계산하기.html#zip-함수",
    "title": "2.10 리스트와 반복문을 사용하여 계산하기",
    "section": "zip 함수",
    "text": "zip 함수\n`zip`\nzip 함수는 두 개의 리스트를 합쳐서 각 리스트 원소의 쌍을 원소로 가지는 하나의 리스트를 만든다. 파이썬 3에서는 명시적으로 list 명령을 사용해야 리스트가 된다.\n\na12 = list(zip(a1, a2))\na12\n\n[(90, 95),\n (85, 90),\n (95, 90),\n (80, 90),\n (90, 95),\n (100, 100),\n (85, 90),\n (75, 80),\n (85, 95),\n (80, 90)]\n\n\n튜플(tuple)\n이 때 소괄호로 표시된 묶음은 튜플(tuple)이라고 하며 리스트와 사용법이 거의 동일하다. 따라서 모든 학생의 두 과목 성적 합산을 구하는 코드는 다음과 같이 고칠 수 있다.\n\ns = []\na1 = [90, 85, 95, 80, 90, 100, 85, 75, 85, 80]\na2 = [95, 90, 90, 90, 95, 100, 90, 80, 95, 90]\nfor a1i, a2i in zip(a1, a2):\n    s.append(a1i + a2i)\ns\n\n[185, 175, 185, 170, 185, 200, 175, 155, 180, 170]\n\n\nzip 함수를 사용할 때 리스트의 리스트 인수를 하나만 넣고 인수의 앞에 * 기호를 붙이면 리스트 쌍을 바꾼다.\n\na12\n\n[(90, 95),\n (85, 90),\n (95, 90),\n (80, 90),\n (90, 95),\n (100, 100),\n (85, 90),\n (75, 80),\n (85, 95),\n (80, 90)]\n\n\n\na21 = list(zip(*a12))\na21\n\n[(90, 85, 95, 80, 90, 100, 85, 75, 85, 80),\n (95, 90, 90, 90, 95, 100, 90, 80, 95, 90)]\n\n\n\nlist(zip(*a21))\n\n[(90, 95),\n (85, 90),\n (95, 90),\n (80, 90),\n (90, 95),\n (100, 100),\n (85, 90),\n (75, 80),\n (85, 95),\n (80, 90)]\n\n\n````utpfhfayruzl 연습 문제 2.10.3\n다음은 학생 이름과 점수가 들어간 리스트의 리스트 변수다.\nx = [\n  [\"길동\", 90],\n  [\"철수\", 80],\n  [\"영수\", 70],\n  [\"방자\", 60],\n]\n복수 할당과 zip 명령을 사용하여 이 변수에서 학생 이름만 있는 변수를 만들어라. ````"
  },
  {
    "objectID": "02.08 여러 개의 자료를 한 변수에 담기.html",
    "href": "02.08 여러 개의 자료를 한 변수에 담기.html",
    "title": "2.8 여러 개의 자료를 한 변수에 담기",
    "section": "",
    "text": "지금까지는 하나의 변수에 하나의 자료를 저장했다. 그러나 파이썬에서는 하나의 변수에 여러 개의 자료를 한꺼번에 저장하고 필요한 때 꺼내 쓸 수도 있다. 파이썬에서 하나의 변수에 여러 개의 자료를 저장하고 쓰는 데는 크게 두 가지 방법을 사용한다."
  },
  {
    "objectID": "02.08 여러 개의 자료를 한 변수에 담기.html#자료의-순서만-가지는-리스트-자료형",
    "href": "02.08 여러 개의 자료를 한 변수에 담기.html#자료의-순서만-가지는-리스트-자료형",
    "title": "2.8 여러 개의 자료를 한 변수에 담기",
    "section": "자료의 순서만 가지는 리스트 자료형",
    "text": "자료의 순서만 가지는 리스트 자료형\n리스트\n리스트 자료형에는 여러개의 자료를 순서에 따라 저장할 수 있다. 리스트 자료형 변수는 다음처럼 만든다.\n리스트변수 = [자료1, 자료2, 자료3]\n이 때 자료의 개수는 얼마가 되든 상관없다.\n\nx = [88, 90, 100]\n\n\nx\n\n[88, 90, 100]"
  },
  {
    "objectID": "02.08 여러 개의 자료를 한 변수에 담기.html#인덱싱",
    "href": "02.08 여러 개의 자료를 한 변수에 담기.html#인덱싱",
    "title": "2.8 여러 개의 자료를 한 변수에 담기",
    "section": "인덱싱",
    "text": "인덱싱\n인덱싱\n리스트 자료형 변수에서 특정한 자료를 꺼내려면 인덱싱(indexing)이라는 연산을 사용한다. 인덱싱 연산을 하려면 다음과 같이 대괄호(bracket)를 변수 이름 끝에 붙이고, 그 안에 자료의 순서를 뜻하는 숫자를 넣는다.\n리스트변수[인덱스]\n인덱스\n이 때 자료의 순서를 뜻하는 숫자를 인덱스(index)라고 한다. 파이썬에서는 가장 첫번째 자료를 가리키는 인덱스는 1이 아니라 0이다.\n\nx[0]\n\n88\n\n\n\nx[1]\n\n90\n\n\n\n(x[0] + x[1]) / 2\n\n89.0\n\n\n```imtpjmqijgnm 연습 문제 1\n시험 성적을 나타내는 임의의 숫자 5개를 리스트 변수 score에 넣고 평균을 구한다.\n\n## 자료의 이름만 가지는 딕셔너리 자료형\n\n\n```{margin}\n딕셔너리\n딕셔너리 자료형에는 여러개의 자료를 이름을 붙여서 저장할 수 있다. 딕셔너리 자료형 변수는 다음과 같이 만든다.\n딕셔너리변수 = {자료이름1: 자료값1, 자료이름2: 자료값2, 자료이름3: 자료값3}\n이 때 자료의 개수는 얼마가 되든 상관없다.\n키, 값\n파이썬에서는 자료의 이름을 키(key)라고 하고 자료의 값을 값(value)라고 한다.\n\nb = {\"math\": 88, \"english\": 90, \"history\": 100}\n\n\nb\n\n{'math': 88, 'english': 90, 'history': 100}\n\n\n딕셔너리 자료형 변수에서 특정한 자료를 꺼낼 때도 마찬가지로 인덱싱(indexing) 연산을 한다. 딕셔너리 자료형 변수에서 인덱싱 연산을 할 때도 다음처럼 대괄호(bracket)를 변수 이름 끝에 붙이고 그 안에 자료의 키를 넣는다.\n\nb[\"math\"]\n\n88\n\n\n\nb[\"english\"]\n\n90\n\n\n\n(b[\"math\"] + b[\"english\"]) / 2\n\n89.0\n\n\n파이썬에서는 자료의 키는 무엇이든 가능하다. 즉, 숫자도 키가 될 수 있다.\n\nb2 = {1: 10, 2: 20}\n\n\nb2\n\n{1: 10, 2: 20}\n\n\n```imtpjmqijgnm 연습 문제 2\n\n윤년이 아닌 평년의 경우에 각 달의 날짜 수를 저장하는 변수 days를 만든다. 이 때 각 달을 표시하는 키는 두 글자짜리 문자열로 한다. 즉, 1월은 “01”, 2월은 “02”, 12월은 “12”로 한다.\n변수 days를 이용하여 짝수 달의 평균 날짜 수를 구한다.\n\n\n## 리스트와 딕셔너리에 들어가는 자료의 자료형\n\n리스트 변수에는 자료형이 같은 자료만 담을 수 있는 것은 아니고 자료형이 다른 자료들도 담을 수 있다. 예를 들어 정수형 자료와 실수형 자료, 그리고 문자열 자료를 한 리스트 변수에 넣을 수도 있다.\n\n::: {#cell-34 .cell school_cell_uuid='20cb4ab8a0264170b4a8f8a2a85cf986' execution_count=13}\n``` {.python .cell-code}\nd = [1, 3.14, \"pi\"]\n:::\n\nd[0]\n\n1\n\n\n\nd[1]\n\n3.14\n\n\n\nd[2]\n\n'pi'\n\n\n심지어 리스트 변수에 또 다른 리스트 변수나 딕셔너리 변수를 넣을 수도 있다.\n\ne = [[1, 10], [2, 20]]\n\n\ne[0]\n\n[1, 10]\n\n\n\ne[1]\n\n[2, 20]\n\n\n\ne[0][0]\n\n1\n\n\n\ne[0][1]\n\n10\n\n\n\ne[1][0]\n\n2\n\n\n\ne[1][1]\n\n20\n\n\n\nf = [{0: 0, 1: 10}, {0: 1, 1: 2}]\n\n\nf[0]\n\n{0: 0, 1: 10}\n\n\n\nf[1]\n\n{0: 1, 1: 2}\n\n\n딕셔너리 변수에도 여러가지 자료형의 자료를 넣을 수 있다.\n\ng = {\"a\": [1, 2, 3], \"b\": {0: 1, 1: 2}}\n\n\ng[\"a\"]\n\n[1, 2, 3]\n\n\n\ng[\"b\"]\n\n{0: 1, 1: 2}"
  },
  {
    "objectID": "02.06 파이썬 함수.html",
    "href": "02.06 파이썬 함수.html",
    "title": "2.6 파이썬 함수",
    "section": "",
    "text": "함수(function)\n함수(function)는 입력을 받아 그 입력에 해당하는 출력을 반환(return)하는 기계와 같다. 예를 들어 500원을 넣으면 생수가 나오고, 1000원을 넣으면 콜라가 나오는 자판기는 다음과 같은 함수이다.\n파이썬에는 def 키워드와 return 키워드를 사용하여 다음과 같이 함수를 만들 수 있다. 파이썬에는 def 키워드와 return 키워드를 사용하여 다음과 같이 함수를 만들 수 있다\n예를 들어 숫자 x를 입력하면 두 배가 되도록 하는 함수는 다음과 같다.\ndef twotimes(x):\n    y = 2 * x\n    return y\n이렇게 만들어진 함수를 사용하려면 함수 이름과 그 뒤에 괄호로 싸인 입력값을 넣으면 된다.\ntwotimes(2)\n\n4\ntwotimes(10)\n\n20\n```fotqqvgnnidh 연습 문제 2.6.1"
  },
  {
    "objectID": "02.06 파이썬 함수.html#입력이-여러-개인-함수",
    "href": "02.06 파이썬 함수.html#입력이-여러-개인-함수",
    "title": "2.6 파이썬 함수",
    "section": "입력이 여러 개인 함수",
    "text": "입력이 여러 개인 함수\n함수의 입력은 한 개가 아니라 여러 개가 되어도 상관없다. 입력 변수가 여러개이면 쉼표, 영어로 comma 를 사용하여 함수를 정의한다. 입력 변수는 원하는 만큼 얼마든지 만들 수 있다.\ndef 함수이름(입력변수1, 입력변수2, 입력변수3):\n   출력변수를 만드는 명령\n   return 출력변수이름\n\ndef add(x, y):\n    return x + y\n\n\nadd(1, 2)\n\n3\n\n\n\ndef sum(a, b, c):\n    s = a + b + c\n    return s\n\n\nsum(1, 2, 3)\n\n6\n\n\n````fotqqvgnnidh 연습 문제 2.6.3\n연도를 나타내는 숫자와 월을 나타내는 숫자를 입력하면 그 달의 날짜 수를 반환하는 함수 days2 를 만든다.\n사용 예는 다음과 같다.\n&gt;&gt;&gt; days2(2015, 1)\n31\n````"
  },
  {
    "objectID": "02.06 파이썬 함수.html#람다-함수",
    "href": "02.06 파이썬 함수.html#람다-함수",
    "title": "2.6 파이썬 함수",
    "section": "람다 함수",
    "text": "람다 함수\n람다 함수(lambda function)\n함수에 이름을 주지 않거나 코드를 짧게 줄여쓰는 방법으로 람다(lambda)함수라는 것이 있다. 예를 들어 다음 함수 f는\n\ndef f(x):\n    return 2 * x\n\n람다 함수로 정의하면 다음과 같다.\n\nf = lambda x : 2 * x\n\n\nf(2)\n\n4\n\n\n람다 함수는 함수 자체를 다른 함수의 인수로 넣을 때, 함수의 출력값을 함수로 받을 때 유용하게 사용된다."
  },
  {
    "objectID": "02.06 파이썬 함수.html#지역-변수",
    "href": "02.06 파이썬 함수.html#지역-변수",
    "title": "2.6 파이썬 함수",
    "section": "지역 변수",
    "text": "지역 변수\n지역 변수(local variable)\n함수에 넣은 입력 변수나 함수 안에서 만들어진 변수는 함수 바깥에서는 사용할 수 없다. 혹시 이름이 같은 변수가 있다고 하더라도 별개의 변수가 된다.\n따라서 함수 안에서 만들어지고 사용되는 함수를 지역 변수, 영어로 local variable 이라고 한다.\n실제로 확인해 보자. 일단 함수 바깥에 혹시라도 y라는 변수가 있으면 del 명령으로 지운다.\n\ndel y\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-11-aa8f3401fc42&gt; in &lt;module&gt;\n----&gt; 1 del y\n\nNameError: name 'y' is not defined\n\n\n\n기존에 y라는 변수가 없었으면 그런 변수가 없다는 오류가 나온다. 만약 기존에 y라는 변수가 있었으면 오류가 출력되지 않고 지워지기만 한다\n이제 다음과 같이 y라는 이름의 지역 변수를 가지는 함수를 만들고 실행시킨다.\n\ndef f(x):\n    y = 10 * x\n    print(\"y = \", y)\n    return y\n\n\nf(10)\n\ny =  100\n\n\n100\n\n\ny라는 변수가 생겨났는지 다시 확인한다.\n\ny\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-14-9063a9f0e032&gt; in &lt;module&gt;\n----&gt; 1 y\n\nNameError: name 'y' is not defined\n\n\n\n함수 안에서 만든 y라는 변수는 함수 밖에는 생성되지 않았다.\n이번에는 함수 바깥에서 y라는 변수를 사용해 보자.\n\ny = 1000\n\n\ny\n\n1000\n\n\n이제 함수를 실행시킨다.\n\nf(1)\n\ny =  10\n\n\n10\n\n\n다시 바깥에서 y값을 확인하면 이전과 같다.\n\ny\n\n1000\n\n\n즉, 함수 안에서 만들어지는 지역 변수는 함수 바깥에 아무런 영향을 주지 않는다.\n```fotqqvgnnidh 연습 문제 2.6.4\n3개의 숫자를 입력하면 “그 숫자들의 합”과 “그 숫자들을 제곱한 숫자들의 합”의 차이(큰 수에서 작을 수를 뺀 값)를 계산하는 함수 diffsum를 만든다. 큰 수에서 작은 수를 뺀 결과이므로 항상 0보다 크거나 0과 같아야 한다.\n\n## 전역 변수\n\n\n```{margin}\n전역 변수(global variable)\n하지만 지역 변수와 반대로 함수 바깥에서 만들어진 변수는 함수 안에서 사용할 수 있다. 이러한 변수를 전역 변수(global variable)이라고 한다.\n\nz = 3\n\ndef f2(x):\n    y = z * x\n    print(\"y =\", y)\n    print(\"z =\", z)\n    return y\n\n\nf2(10)\n\ny = 30\nz = 3\n\n\n30\n\n\n다만, 이때 바깥의 변수와 같은 이름의 변수를 함수 안에 만들면 안 된다. 만약 바깥의 변수와 같은 이름의 변수를 함수 안에 다시 만들면 함수 안에서는 그 지역 변수를 사용하다가 함수 바깥으로 나오면 지역 변수는 사라지고 원래의 변숫값으로 되돌아온다. 따라서 함수 안에서는 함수 바깥에 있는 변수의 값을 바꿀 수 없다.\n\nz = 3\n\ndef f3(x):\n    z = 99\n    y = z * x\n    print(\"y =\", y)\n    print(\"z =\", z)\n    return y\n\n\nf3(10)\n\ny = 990\nz = 99\n\n\n990\n\n\n함수 바깥에서는 z가 여전히 3이다.\n\nz\n\n3\n\n\n`global`\n만약 함수안에서 함수 바깥에 있는 변수의 값을 꼭 바꿔야만 한다면 다음과 같이 함수 이름 앞에 global 키워드를 선언해 주면 된다.\n\nz = 3\n\ndef f4(x):\n    global z\n    z = 99\n    y = z * x\n    print(\"y =\", y)\n    print(\"z =\", z)\n    return y\n\n\nf4(10)\n\ny = 990\nz = 99\n\n\n990\n\n\n\nz\n\n99\n\n\n함수 바깥의 z 값이 99로 바뀌어 있는 것을 확인할 수 있다.\n```fotqqvgnnidh 연습 문제 2.6.5\n함수 바깥에 m 이라는 전역 변수를 만들고 그 값을 0으로 놓는다. 앞에서 만든 diffsum 함수를 고쳐서 diffsum 함수와 같은 값을 반환하지만 함수를 실행할 때 마다 diffsum 함수에서 계산된 값이 원래 있던 m보다 크면 m을 계산된 값으로 바꾸는 함수 diffsum2 를 만든다. ```"
  },
  {
    "objectID": "02.04 파이썬의 문자열 형식화.html",
    "href": "02.04 파이썬의 문자열 형식화.html",
    "title": "2.4 파이썬의 문자열 형식화",
    "section": "",
    "text": "파이썬에서는 복잡한 문자열 출력을 위한 문자열 형식화(string formatting)를 지원한다. 문자열을 형식화하는 방법에는 % 기호를 사용한 방식과 format 메서드를 사용한 방식, 그리고 f 문자열을 사용하는 방식이 있다."
  },
  {
    "objectID": "02.04 파이썬의 문자열 형식화.html#기호를-사용한-문자열-형식화",
    "href": "02.04 파이썬의 문자열 형식화.html#기호를-사용한-문자열-형식화",
    "title": "2.4 파이썬의 문자열 형식화",
    "section": "% 기호를 사용한 문자열 형식화",
    "text": "% 기호를 사용한 문자열 형식화\n문자열 뒤에 % 기호를 붙이고 그 뒤에 다른 값을 붙이면 뒤에 붙은 값이 문자열 안으로 들어간다.\n\n\"문자열\" % 값\n\n이 때 문자열의 어느 위치에 값이 들어가는지를 표시하기 위해 문자열 안에 % 기호로 시작하는 형식지정 문자열(format specification string)을 붙인다. 대표적인 형식지정 문자열은 다음과 같다.\n\n\n\n형식지정 문자열\n의미\n\n\n\n\n%s\n문자열\n\n\n%d\n정수\n\n\n%f\n부동소수점 실수\n\n\n\n다음은 % 기호를 사용한 문자열 형식의 예이다.\n\n\"내 이름은 %s입니다.\" % \"홍길동\"\n\n\n\"나는 %d살 입니다.\" % 12\n\n'나는 12살 입니다.'\n\n\n\n\"원주율의 값은 %f입니다.\" % 3.141592\n\n'원주율의 값은 3.141592입니다.'\n\n\n만약 여러개의 값을 문자열 안에 넣어야 한다면 % 기호 뒤에 있는 값을 소괄호로 감싸야 한다.\n\n\"%d 곱하기 %d은 %d이다.\" % (2, 3, 6)\n\n'2 곱하기 3은 6이다.'\n\n\n\n\"%s의 %s 과목 점수는 %d점이다.\" % (\"철수\", \"수학\", 100)\n\n'철수의 수학 과목 점수는 100점이다.'\n\n\n````sdkskdkcfxxh 연습 문제 2.4.1\n\nname과 age라는 변수에 각각 이름과 나이를 넣고 다음과 같이 출력하는 코드를 만들어라\n\nTom is 13 years old\n\na, b 두 변수에 10과 3이라는 값을 대입하라. a, b 변수와 문자열 형식화를 사용하여 다음과 같은 문자열을 출력하는 코드를 만들어라.\n\n10 / 3 = 3.333 \n\n## 고급 형식지정 문자열\n\n형식지정 문자열은 여러가지 숫자 인수를 가질 수도 있다. `%` 기호 다음에 오는 정수는 값이 인쇄될 때 차지하는 공간의 길이를 뜻한다. 만약 공간의 길이가 인쇄될 값보다 크면 정수가 양수일 때는 값을 뒤로 보내고 공백을 앞에 채우거나 반대로 정수가 음수이면 값을 앞으로 보내고 공백을 뒤에 채운다. 만약 `%` 기호 다음에 소숫점이 있는 숫자가 오면 점 뒤의 숫자는 실수를 인쇄할 때 소숫점 아래로 그만큼의 숫자만 인쇄하라는 뜻이다.\n\n| 고급 형식지정 문자열 | 의미 |\n|-|-|\n| ``%20s`` | 전체 20칸을 차지하는 문자열(공백을 앞에 붙인다.) |\n| ``%-10d`` | 전체 10칸을 차지하는 숫자(공백을 뒤에 붙인다.) |\n| ``%.5f`` | 부동소수점의 소수점 아래 5자리까지 표시 |\n\n::: {#cell-16 .cell school_cell_uuid='ee4017b9633d4dcd91a756575d221f80' execution_count=6}\n``` {.python .cell-code}\n\"[%20s]\" % \"*\"   # [와 ] 사이에 20칸의 공백이 있다.\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'[                   *]'\n```\n:::\n:::\n\n\n::: {#cell-17 .cell school_cell_uuid='fe564c819b6541d8b0ca5f126981d88a' execution_count=7}\n``` {.python .cell-code}\n\"[%-20s]\" % \"A\"  # 20칸의 공백의 앞쪽에 A를 인쇄한다.\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'[A                   ]'\n```\n:::\n:::\n\n\n::: {#cell-18 .cell school_cell_uuid='4762e5493f2841c8995460547a101d70' execution_count=8}\n``` {.python .cell-code}\n\"[%20d]\" % 123  # 20칸의 공백의 뒷쪽에 123을 인쇄한다.\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'[                 123]'\n```\n:::\n:::\n\n\n::: {#cell-19 .cell school_cell_uuid='5d52b3ce630b47d181a4c691059aa72c' execution_count=9}\n``` {.python .cell-code}\n\"[%-20d]\" % 123  # 20칸의 공백의 앞쪽에 123을 인쇄한다.\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'[123                 ]'\n```\n:::\n:::\n\n\n::: {#cell-20 .cell school_cell_uuid='4523961e1ca64049b2e5bbec78f91d87' execution_count=10}\n``` {.python .cell-code}\nx = 1 / 3.0  # 값은 0.3333333....\n\"%.5f\" % x   # 소숫점 아래 5자리까지만 인쇄한다.\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'0.33333'\n```\n:::\n:::\n\n\n공백 크기와 소숫점 아래 자릿수를 같이 지정할 수도 있다.\n\n::: {#cell-22 .cell school_cell_uuid='ca60e6d2a30c4f00a62303c4bffd0916' execution_count=11}\n``` {.python .cell-code}\n\"[%-20.6f]\" % x  # 20칸의 공백의 앞쪽에 소숫점 아래 6자리 출력\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'[0.333333            ]'\n```\n:::\n:::\n\n\n````{admonition} 연습 문제 2.4.2\n\n(1) `a`, `b` 두 개의 변수에 3과 12라는 값을 넣고 이 변수를 사용하여 다음과 같이 세로셈으로 곱셈 결과를 출력하는 코드를 만들어라. \n\n    ```\n           3\n    x     12\n    --------\n          36\n    ```\n\n(2) `a`, `b` 두 개의 변수에 `123456`과 `7890`이라는 값을 넣고 이 변수를 사용하여 다음과 같이 세로셈으로 덧셈 결과를 출력하는 코드를 만들어라. 천의 자리 쉼표를 표시해야 한다.\n\n    ```\n       123,456\n    +    7,890 \n    ----------\n       131,346\n    ```"
  },
  {
    "objectID": "02.04 파이썬의 문자열 형식화.html#format-메서드를-사용한-문자열-형식화",
    "href": "02.04 파이썬의 문자열 형식화.html#format-메서드를-사용한-문자열-형식화",
    "title": "2.4 파이썬의 문자열 형식화",
    "section": "format 메서드를 사용한 문자열 형식화",
    "text": "format 메서드를 사용한 문자열 형식화\n`format`\nformat 메서드를 사용하여 문자열을 형식화하는 방법도 있다. 이 때는 % 기호로 시작하는 형식지정 문자열 대신 {} 기호를 사용한다. 또한 자료형을 표시할 필요가 없다. 문자열 내에서 { 문자를 출력하고 싶을 때는 {{라는 글자를 사용한다.\n\n\"내 이름은 {}입니다.\".format(\"홍길동\")\n\n'내 이름은 홍길동입니다.'\n\n\n\n\"내 이름은 {{{}}}입니다.\".format(\"홍길동\")\n\n'내 이름은 {홍길동}입니다.'\n\n\n{} 안에 값의 순서를 지정하는 숫자를 넣을 수도 있다. 가장 앞에 있는 값은 {0}, 그 뒤의 값은 {1}, 이런 식으로 지정한다. 이 방법을 사용하면 값의 순서를 바꾸거나 같은 값을 여러번 인쇄할 수도 있다.\n\n\"{2}의 {0} 점수는 {1}점입니다. {1}점! {1}점!\".format(\"수학\", 100, \"철수\")\n\n'철수의 수학 점수는 100점입니다. 100점! 100점!'\n\n\n순서를 나타내는 숫자 대신 인수 이름을 지정할 수도 있다.\n\n\"{a}점수: {x}점, {b}점수: {y}점\".format(a=\"영어\", b=\"수학\", x=100, y=90)\n\n'영어점수: 100점, 수학점수: 90점'\n\n\n만약 {}를 여러개 사용하면서 순서 숫자나 인수 이름을 지정하지 않으면 순서대로 입력된다.\n\n\"{}점수: {}점, {}점수: {}점\".format(\"영어\", 100, \"수학\", 90)\n\n'영어점수: 100점, 수학점수: 90점'\n\n\nformat 방식에서 공백의 크기를 지정하거나 부동소수점의 소수점 아래 숫자를 지정할 때는 {}안에 : 기호를 넣고 그 뒤에 고급 형식지정 문자열을 넣는다. : 뒤에 오는 숫자는 공백의 크기를 뜻한다. &lt;는 값을 앞쪽으로 붙이고 공백을 뒤로 붙인다. 반대로 &gt;는 값을 앞쪽으로 붙이고 공백을 뒤로 붙인다. 소숫점의 자릿수를 지정할 때는 .(점)과 숫자, 그리고 f 글자를 사용한다. , 기호를 넣으면 영미권에서 숫자를 쓸 때 천(1000)단위마다 붙이는 쉼표(thousand comma)를 붙인다.\n\n\n\n\n\n\n\n고급 형식지정 문자열\n의미\n\n\n\n\n{:&gt;10}\n전체 10칸을 차지하며 공백을 앞에 붙임 (문자열을 오른쪽에 붙여서 출력)\n\n\n{:&lt;10}\n전체 10칸을 차지하며 공백을 뒤에 붙임 (문자열을 왼쪽에 붙여서 출력)\n\n\n{:^10}\n전체 10칸을 차지하며 공백을 앞뒤에 붙임 (문자열을 중앙에 붙여서 출력)\n\n\n{:.5f}\n부동소수점의 소수점 아래 5자리까지 표시\n\n\n{:,}\n천단위 쉼표 표시\n\n\n\n\n\"[{:&lt;20}]\".format(\"*\")\n\n'[*                   ]'\n\n\n\n\"[{:&gt;20}]\".format(\"*\")\n\n'[                   *]'\n\n\n\n\"[{:^20}]\".format(\"*\")\n\n'[         *          ]'\n\n\n\n\"[{:20.5f}]\".format(1 / 3)\n\n'[             0.33333]'\n\n\n\n\"[{:20,}]\".format(1234567890)\n\n'[       1,234,567,890]'\n\n\n만약 &gt; 기호앞에 문자열을 쓰면 해당 문자열로 공백을 채운다.\n\n\n\n\n\n\n\n고급 형식지정 문자열\n의미\n\n\n\n\n{:*&gt;10}\n전체 10칸을 차지하며 “*“을 앞에 붙임 (문자열을 오른쪽에 붙여서 출력)\n\n\n{:*&lt;10}\n전체 10칸을 차지하며 “*“을 뒤에 붙임 (문자열을 왼쪽에 붙여서 출력)\n\n\n{:*^10}\n전체 10칸을 차지하며 “*“을 앞뒤에 붙임 (문자열을 중앙에 붙여서 출력)\n\n\n\n\n\"[{:-&lt;20}]\".format(\"*\")\n\n'[*-------------------]'\n\n\n\n\"[{:-&gt;20}]\".format(\"*\")\n\n'[-------------------*]'\n\n\n\n\"[{:-^20}]\".format(\"*\")\n\n'[---------*----------]'\n\n\nformat 방법의 또다른 특징은 {}안에서 리스트나 사전의 인덱싱을 할수 있다는 것이다.\n\nx = [10, 11, 12]\n\"리스트의 첫번째 원소={0[0]}\".format(x)\n\n'리스트의 첫번째 원소=10'\n\n\n\ny = {\"a\": 10, \"b\": 11, \"c\": 12}\n\"사전의 a키 값={0[a]}\".format(y)\n\n'사전의 a키 값=10'\n\n\n```sdkskdkcfxxh 연습 문제 2.4.3\n연습 문제 1, 2를 format 방법으로 다시 풀어라.\n\n## f 문자열 \n\n\n```{margin}\nf 문자열(f-string)\n파이썬 3.6부터는 f 문자열(f-string)이라는 것을 사용할 수 있다. f 문자열은 문자열의 앞에 f 글자를 붙인 문자열이다. f 문자열에서는 {} 안에 변수의 이름을 바로 사용할 수 있다.\n\nname = \"홍길동\"\nage = 32\nprint(f\"{name}의 나이는 {age}살이다.\")\n\n홍길동의 나이는 32살이다.\n\n\nf 문자열에서 공백의 크기 등을 지정할 때는 format 방법과 같은 고급 형식지정 문자열을 사용할 수 있다.\n\nnumber = 1234567\n\n\nf\"[{number:&lt;20}]\"\n\n'[1234567             ]'\n\n\n\nf\"[{number:&gt;20}]\"\n\n'[             1234567]'\n\n\n\nf\"[{number:^20}]\"\n\n'[      1234567       ]'\n\n\n\nf\"[{number:-&lt;20}]\"\n\n'[1234567-------------]'\n\n\n\nf\"[{number:-&gt;20}]\"\n\n'[-------------1234567]'\n\n\n\nf\"[{number:-^20}]\"\n\n'[------1234567-------]'\n\n\n\nf\"[{number:-^20,}]\"\n\n'[-----1,234,567------]'\n\n\n\nf_number = 3.141592\n\n\nf\"[{f_number:20.3f}]\"\n\n'[               3.142]'\n\n\n```sdkskdkcfxxh 연습 문제 2.4.4\n연습 문제 1, 2를 f 문자열 방법으로 다시 풀어라. ```"
  },
  {
    "objectID": "02.02 부동소수점 실수 자료형.html",
    "href": "02.02 부동소수점 실수 자료형.html",
    "title": "2.2 부동소수점 실수 자료형",
    "section": "",
    "text": "정수(integer)\n실수(real number)\n파이썬에서는 정수(integer)뿐 아니라 소숫점을 포함하는 실수(real number)도 다룰 수 있다. 정수 데이터에는 소숫점이 없고 실수 데이터에는 소수점이 붙어 있다.\n\n10  # 정수\n\n10\n\n\n\n10.0  # 실수\n\n10.0\n\n\n정수부가 0인 실수는 0을 생략할 수 있다.\n\n.1  # .1 = 0.1\n\n0.1\n\n\n숫자 계산을 하는 경우 계산에 쓰인 숫자 중 하나라도 소숫점이 있는 실수가 있으면 계산결과는 실수가 된다. 나눗셈 연산의 결과는 입력에 상관없이 항상 실수로 처리한다. 예를 들어 \\(10 \\times 5\\)는 정수로 취급하지만 \\(10.0 \\times 5\\)나 \\(10 \\div 5\\)는 실수로 취급한다.\n\n10 * 5  # 정수\n\n50\n\n\n\n10.0 * 5  # 실수\n\n50.0\n\n\n\n10 / 5  # 실수\n\n2.0\n\n\n부동소수점(floating point number)\n`int`\n`float`\n`type`\n정수와 실수는 컴퓨터 메모리에 저장되는 방식이 다르다. 이를 데이터의 자료형(type)이 다르다고 한다. 파이썬에서 정수는 int라는 정수 자료형으로 처리한다. 실수는 float라는 부동소수점(floating point number) 자료형으로 처리된다. 파이썬에서 데이터의 자료형을 알려면 type 명령을 사용한다.\n\ntype(10)\n\nint\n\n\n\ntype(10.0)\n\nfloat"
  },
  {
    "objectID": "02.02 부동소수점 실수 자료형.html#정수와-실수-자료형",
    "href": "02.02 부동소수점 실수 자료형.html#정수와-실수-자료형",
    "title": "2.2 부동소수점 실수 자료형",
    "section": "",
    "text": "정수(integer)\n실수(real number)\n파이썬에서는 정수(integer)뿐 아니라 소숫점을 포함하는 실수(real number)도 다룰 수 있다. 정수 데이터에는 소숫점이 없고 실수 데이터에는 소수점이 붙어 있다.\n\n10  # 정수\n\n10\n\n\n\n10.0  # 실수\n\n10.0\n\n\n정수부가 0인 실수는 0을 생략할 수 있다.\n\n.1  # .1 = 0.1\n\n0.1\n\n\n숫자 계산을 하는 경우 계산에 쓰인 숫자 중 하나라도 소숫점이 있는 실수가 있으면 계산결과는 실수가 된다. 나눗셈 연산의 결과는 입력에 상관없이 항상 실수로 처리한다. 예를 들어 \\(10 \\times 5\\)는 정수로 취급하지만 \\(10.0 \\times 5\\)나 \\(10 \\div 5\\)는 실수로 취급한다.\n\n10 * 5  # 정수\n\n50\n\n\n\n10.0 * 5  # 실수\n\n50.0\n\n\n\n10 / 5  # 실수\n\n2.0\n\n\n부동소수점(floating point number)\n`int`\n`float`\n`type`\n정수와 실수는 컴퓨터 메모리에 저장되는 방식이 다르다. 이를 데이터의 자료형(type)이 다르다고 한다. 파이썬에서 정수는 int라는 정수 자료형으로 처리한다. 실수는 float라는 부동소수점(floating point number) 자료형으로 처리된다. 파이썬에서 데이터의 자료형을 알려면 type 명령을 사용한다.\n\ntype(10)\n\nint\n\n\n\ntype(10.0)\n\nfloat"
  },
  {
    "objectID": "02.02 부동소수점 실수 자료형.html#부동소수점-실수",
    "href": "02.02 부동소수점 실수 자료형.html#부동소수점-실수",
    "title": "2.2 부동소수점 실수 자료형",
    "section": "부동소수점 실수",
    "text": "부동소수점 실수\n프로그래밍 언어는 IEEE 754라는 국제표준에 따라 실수를 부동소수점 방식으로 표현한다. 부동소수점 방식에서는 숫자를 정수로 된 유효숫자와 정수로 된 지수의 곱으로 표현한다. 예를 들어 십진수 부동소수점 방식에서 \\(123.456\\)이란 숫자는 \\(123456 \\times 10^{-3}\\) 이므로 \\(123456\\)이라는 정수 유효숫자와 \\(-3\\)이라는 정수 지수로 나타낼 수 있다.\n파이썬에서는 유효숫자e지수 라는 방법으로 부동소수점 형태를 직접 표현한다.\n\\[ \\text{유효숫자}e\\text{지수} = \\text{유효숫자} \\times 10^{\\text{지수}} \\]\n\n123e2  # 123e2 = 123.0 x 100 = 12300.0\n\n12300.0\n\n\n\n123e-2  # 123e-2 = 123.0 x 0.01 = 1.23\n\n1.23\n\n\n\n123.456e-3  # 123.456e-3 = 123.456 x 0.001 = 0.123456\n\n0.123456\n\n\n```wkrhfpnjremy 연습 문제 2.2.1\n유효숫자e지수 표현법으로 되어 있는 다음 숫자를 보통의 소숫점 표현으로 나타내라.\n\n5e8\n5.6e3\n-2.1e2\n-3.4e-1\n\n\n```{admonition} 연습 문제 2.2.2\n\n다음 숫자를 ``유효숫자e지수`` 표현법으로 나타내라. 유효숫자는 정수가 되어야 한다.\n\n1. 3.141592\n1. 2.718\n1. 1.4\n1. 1.73"
  },
  {
    "objectID": "02.02 부동소수점 실수 자료형.html#십진법과-이진법",
    "href": "02.02 부동소수점 실수 자료형.html#십진법과-이진법",
    "title": "2.2 부동소수점 실수 자료형",
    "section": "십진법과 이진법",
    "text": "십진법과 이진법\n컴퓨터는 십진법이 아닌 이진법을 사용한다. 십진법에서는 0, 1, 2, 3, 4, 5, 6, 7, 8, 9의 10개 숫자만 사용하고 10 이상의 수는 \\(10, 100, 1000, 10000, \\ldots\\) 자리를 나타내는 숫자를 나열하여 표현한다. 따라서 모든 십진법 숫자는 10의 제곱의 합으로 풀어서 나타낼 수 있다.\n\\[\n\\begin{eqnarray}\n12 &=&     & & 10 &+& 2 &=&               & & 1 \\times 10^1 &+& 2 \\times 10^0 \\\\\n123 &=& 100 &+& 20 &+& 3 &=& 1 \\times 10^2 &+& 2 \\times 10^1 &+& 3 \\times 10^0 \\\\\n\\end{eqnarray}\n\\]\n소수점이 있는 경우에는 소수점 아래의 숫자가 \\(10^{-1}, 10^{-2}, 10^{-3}, \\ldots\\) 자리를 나타내는 숫자이다.\n\\[\n\\begin{eqnarray}\n1.2  &=& 1 + 0.2                &=&   1 \\times 10^0 &+& 2 \\times 10^{-1} \\\\\n1.123 &=& 1 + 0.1 + 0.02 + 0.003 &=&   1 \\times 10^0 &+& 1 \\times 10^{-1} &+& 2 \\times 10^{-2} + 3 \\times 10^{-3} \\\\\n\\end{eqnarray}\n\\]\n```wkrhfpnjremy 연습 문제 2.2.3\n다음 십진법 숫자를 10의 제곱의 합으로 풀어서 나타내라.\n\n1234\n1010\n3.14\n0.023\n\n\n이진법에서는 0, 1의 2개 숫자만 사용하고 2 이상의 수는 $2, 4, 8, 16, 32, \\ldots$ 자리를 나타내는 숫자를 나열하여 표현한다.\n\n$$ \n\\begin{eqnarray}\n 1 &=&              & &              & &              & & 1 \\times 2^0 &=& 1_{(2)} \\\\\n 2 &=&              & &              & & 2 \\times 2^1 &+& 0 \\times 2^0 &=& 10_{(2)} \\\\\n 3 &=&              & &              & & 1 \\times 2^1 &+& 1 \\times 2^0 &=& 11_{(2)} \\\\\n 4 &=&              & & 1 \\times 2^2 &+& 0 \\times 2^1 &+& 0 \\times 2^0 &=& 100_{(2)} \\\\\n 5 &=&              & & 1 \\times 2^2 &+& 0 \\times 2^1 &+& 1 \\times 2^0 &=& 101_{(2)} \\\\\n15 &=& 1 \\times 2^3 &+& 1 \\times 2^2 &+& 1 \\times 2^1 &+& 1 \\times 2^0 &=& 1111_{(2)}  \\\\\n\\end{eqnarray}\n$$\n\n\n```{margin}\n`bin`\n파이썬의 bin 명령을 쓰면 정수인 십진수를 이진수로 변환할 수 있다. 이진수는 숫자 앞에 0b라는 접두사가 붙는다.\n\nbin(3)\n\n'0b11'\n\n\n\nbin(15)\n\n'0b1111'\n\n\n소수점이 있는 경우에도 다음처럼 풀어서 나타낼 수 있다.\n\\[\n\\begin{eqnarray}\n0.5   &=& 1 \\times 2^{-1} & &                 & &                 &=& 0.1_{(2)} \\\\\n0.25  &=& 0 \\times 2^{-1} &+& 1 \\times 2^{-2} & &                 &=& 0.01_{(2)} \\\\\n0.125 &=& 0 \\times 2^{-1} &+& 0 \\times 2^{-2} &+& 1 \\times 2^{-3} &=& 0.001_{(2)} \\\\\n0.75  &=& 1 \\times 2^{-1} &+& 1 \\times 2^{-2} & &                 &=& 0.11_{(2)} \\\\\n0.375 &=& 0 \\times 2^{-1} &+& 1 \\times 2^{-2} &+& 1 \\times 2^{-3} &=& 0.011_{(2)} \\\\\n0.875 &=& 1 \\times 2^{-1} &+& 1 \\times 2^{-2} &+& 1 \\times 2^{-3} &=& 0.111_{(2)} \\\\\n\\end{eqnarray}\n\\]\n```wkrhfpnjremy 연습 문제 2.2.4\n다음 이진법 숫자를 2의 제곱의 합으로 풀어서 나타내라.\n\n13\n129\n0.8\n1.25\n\n\n## 부동소수점 오차\n\n1보다 작은 수의 경우에는 십진법으로 간단히 표현되는 수도 이진법에서는 무한개의 유효숫자를 가질 수 있다. 예를 들어 $0.1$이라는 숫자는 십진수로는 간단히 표현되지만 이진수로 나타내면 다음과 같이 $0011_{(2)}$이 무한히 반복되는 실수가 된다.\n\n$$ 0.1 = 0.00011001100110011001100110011001100110011001100110011001100110011\\cdots_{(2)} $$\n\n그런데 컴퓨터에서는 하나의 숫자를 나타내기 위한 메모리 크기가 제한되어 있어서 특정 소수점 이하는 생략하고 가장 비슷한 숫자로 표현할 수 밖에 없다. $0.1$은 실제로는 가장 비슷한 다음과 같은 숫자로 저장된다.\n\n$$ 0.1 \\approx 0.1000000000000000055511151231257827021181583404541015625 $$\n\n그런데 파이썬 콘솔이나 주피터 노트북에서 0.1을 입력하면 다음과 같이 그냥 0.1로 나타난다.\n\n::: {#cell-42 .cell school_cell_uuid='c7e4456980074487b8193e5b93d408db' execution_count=14}\n``` {.python .cell-code}\n0.1\n\n0.1\n\n:::\n`%precision`\n그 이유는 파이썬 콘솔이나 주피터 노트북과 같은 REPL 인터페이스에서 값이 출력될 때는 편의상 일정 소수점 이하를 생략하고 보여주기 때문이다. 만약 소수점 이하 55자리까지 보고 싶으면 %precision 매직(magic) 명령어를 사용한다.\n\n# 소숫점 55자리까지 표현\n%precision 55   \n\n'%.55f'\n\n\n이 상태에서 다시 0.1이라고 입력하면 55자리까지의 유효숫자를 보여준다.\n\n0.1\n\n0.1000000000000000055511151231257827021181583404541015625\n\n\n다시 원래대로 돌아가려면 다음과 같이 입력한다.\n\n%precision %r\n\n'%r'\n\n\n\n0.1\n\n0.1\n\n\n이처럼 컴퓨터에서 실수를 계산할 때는 항상 미세한 오차를 가질 수 있으므로 실수의 계산을 할 때는 주의해야 한다. 예를 들어 \\(0.1+0.2=0.3\\) 이지만 파이썬에서 비교하면 다음처럼 양변이 다르다는 결과를 보인다.\n\n0.1 + 0.2 == 0.3\n\nFalse\n\n\n실제로 계산 결과를 보면 그 이유를 알 수 있다.\n\n0.1 + 0.2\n\n0.30000000000000004\n\n\n\n%precision 55\n\n'%.55f'\n\n\n\n0.3\n\n0.2999999999999999888977697537484345957636833190917968750\n\n\n\n%precision %r\n\n'%r'\n\n\n`round`\n따라서 실수를 비교할 때는 다음과 같이 round 명령을 사용하여 유효숫자를 지정한 반올림을 한 후에 비교해야 한다. round 명령은 두 번째 인수로 반올림할 소수점 이하의 유효숫자의 개수를 받는다. 다음 명령은 소수점 5자리까지 비교한다.\n\nround(0.1 + 0.2, 5) == round(0.3, 5)\n\nTrue\n\n\n또는\n\nround((0.1 + 0.2) - 0.3, 5) == 0.0\n\nTrue"
  },
  {
    "objectID": "02.02 부동소수점 실수 자료형.html#자료형-변환",
    "href": "02.02 부동소수점 실수 자료형.html#자료형-변환",
    "title": "2.2 부동소수점 실수 자료형",
    "section": "자료형 변환",
    "text": "자료형 변환\n실수를 정수로 변환하거나 정수를 실수로 변환하려면 int 명령과 float 명령을 사용한다.\n\nint(1.0)  # 실수를 정수로 변환\n\n1\n\n\n\nfloat(1)  # 정수를 실수로 변환\n\n1.0\n\n\n만약 정수형으로 변환하려는 숫자가 정확히 정수로 표현될 수 없으면 소숫점 이하의 숫자를 버린다.\n\nint(3.14)\n\n3\n\n\n\nint(3.9)\n\n3\n\n\n\nint(-3.9)\n\n-3"
  },
  {
    "objectID": "02.02 부동소수점 실수 자료형.html#nan과-inf",
    "href": "02.02 부동소수점 실수 자료형.html#nan과-inf",
    "title": "2.2 부동소수점 실수 자료형",
    "section": "NaN과 Inf",
    "text": "NaN과 Inf\n`NaN`\n`Inf`\nIEEE 754 표준에 따른 부동소수점 자료형은 특별한 두 가지 값을 표현할 수 있다. 하나가 NaN(Not a Number)이고 또 하나는 Inf(Infinity)이다. NaN는 “숫자가 아닌 것”, Inf는 “무한대”를 뜻한다. 파이썬에서는 다음과 같은 명령으로 표현한다.\n\nfloat(\"NaN\")\n\nnan\n\n\n\nfloat(\"Inf\")\n\ninf\n\n\n\nfloat(\"-Inf\")\n\n-inf"
  },
  {
    "objectID": "02.00 2장 파이썬 기초 문법.html",
    "href": "02.00 2장 파이썬 기초 문법.html",
    "title": "2장 파이썬 기초문법",
    "section": "",
    "text": "이 장에서는 파이썬을 처음 공부하는 사람을 위해 가장 기초적인 문법을 공부한다. 파이썬의 변수와 제어문, 자료구조를 잘 알고 있는 독자는 이 장을 건너뛰고 다음 장을 공부할 수 있다."
  },
  {
    "objectID": "02.00 2장 파이썬 기초 문법.html#학습-목표",
    "href": "02.00 2장 파이썬 기초 문법.html#학습-목표",
    "title": "2장 파이썬 기초문법",
    "section": "학습 목표",
    "text": "학습 목표\n\n파이썬으로 숫자를 다루는 법을 학습한다.\n파이썬으로 문자열을 다루는 법을 학습힌다.\nif 문을 사용한 기초적인 조건문을 사용할 수 있다.\nfor 문을 사용한 기초적인 반복문을 사용할 수 있다.\n파이썬 함수를 만들고 사용할 수 있다.\n파이썬 리스트, 딕셔너리 자료형을 사용할 수 있다.\n클래스를 사용한 객체지향 프로그래밍을 할 수 있다.\n파이썬에서 날짜와 시간을 다룰 수 있다."
  },
  {
    "objectID": "01.04 데이터 분석용 파이썬 패키지 소개.html",
    "href": "01.04 데이터 분석용 파이썬 패키지 소개.html",
    "title": "1.4 데이터 분석용 파이썬 패키지 소개",
    "section": "",
    "text": "파이썬은 여러 분야에 사용할 수 있는 다양한 패키지를 가지고 있다는 큰 장점이 있다. 그중 데이터 분석에 많이 사용되는 몇 가지 유명한 패키지를 소개한다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.4 데이터 분석용 파이썬 패키지 소개"
    ]
  },
  {
    "objectID": "01.04 데이터 분석용 파이썬 패키지 소개.html#numpy",
    "href": "01.04 데이터 분석용 파이썬 패키지 소개.html#numpy",
    "title": "1.4 데이터 분석용 파이썬 패키지 소개",
    "section": "NumPy",
    "text": "NumPy\nNumPy(“넘파이”라고 읽는다) 패키지는 파이썬에서 수치 해석, 특히 선형 대수(linear algebra) 계산 기능을 제공한다. 자료형이 고정된 다차원 배열 클래스(n-dimensional array)와 벡터화 연산(vectorized operation)을 지원하며 수학 연산을 위한 가장 기본적이고 중요한 패키지다.\n원래는 파이썬에서 MATLAB과 같은 기능을 구현하고자 Numeric이라는 이름으로 프로젝트가 시작되었으나, 2005년 Travis Oliphant에 의해 Numarray 패키지와 통합되며 NumPy라는 이름으로 바뀌었다. 내부적으로는 BLAS(Basic Linear Algebra Subprograms)와 LAPACK(Linear Algebra Package)이라는 오픈 소스 선형 대수 라이브러리에 의존하며 CPython에서만 동작한다.\n\n수치해석 라이브러리\n홈페이지: http://www.numpy.org/\n개발: 2005, Travis Oliphant",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.4 데이터 분석용 파이썬 패키지 소개"
    ]
  },
  {
    "objectID": "01.04 데이터 분석용 파이썬 패키지 소개.html#scipy",
    "href": "01.04 데이터 분석용 파이썬 패키지 소개.html#scipy",
    "title": "1.4 데이터 분석용 파이썬 패키지 소개",
    "section": "SciPy",
    "text": "SciPy\nSciPy(“사이파이”라고 읽는다) 패키지는 고급 수학 함수, 수치적 미적분, 미분 방정식 계산, 최적화, 신호 처리 등에 사용하는 다양한 과학 기술 계산 기능을 제공한다. SciPy 패키지는 Numeric 패키지에 기반을 두고 만들어진 다양한 수치 해석 패키지들을 2001년에 Travis Oliphant와 Pearu Peterson 등이 통합, 재정리하여 만들었다.\n\n과학기술 함수 라이브러리\n홈페이지: http://www.scipy.org/\n개발: 2001, Travis Oliphant, Pearu Peterson",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.4 데이터 분석용 파이썬 패키지 소개"
    ]
  },
  {
    "objectID": "01.04 데이터 분석용 파이썬 패키지 소개.html#sympy",
    "href": "01.04 데이터 분석용 파이썬 패키지 소개.html#sympy",
    "title": "1.4 데이터 분석용 파이썬 패키지 소개",
    "section": "SymPy",
    "text": "SymPy\nSymPy(“심파이”라고 읽는다) 패키지는 숫자를 더하거나 빼는 수치 연산이 아니라 인수 분해, 미분, 적분 등 심볼릭 연산 기능을 제공한다. SymPy 프로젝트는 파이썬의 Mathematica와 같은 심볼릭 연산 기능을 넣고자 하는 노력으로 2006년에 Ondrej Certik에 의해 시작되었다. SymPy의 기능은 http://live.sympy.org/ 또는 http://www.sympygamma.com/ 웹사이트를 방문하면 브라우저 상에서 바로 확인할 수 있다.\n\n심볼릭 연산 라이브러리\n홈페이지: http://www.sympy.org/\n개발: 2006, Ondřej Čertík",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.4 데이터 분석용 파이썬 패키지 소개"
    ]
  },
  {
    "objectID": "01.04 데이터 분석용 파이썬 패키지 소개.html#pandas",
    "href": "01.04 데이터 분석용 파이썬 패키지 소개.html#pandas",
    "title": "1.4 데이터 분석용 파이썬 패키지 소개",
    "section": "Pandas",
    "text": "Pandas\nPandas(“판다스”라고 읽는다) 패키지는 테이블 형태의 데이터를 다루는 데이터프레임(DataFrame) 자료형을 제공한다. 자료의 탐색이나 정리에 아주 유용하여 데이터 분석에 빠질 수 없는 필수 패키지다. 2008년도에 Wes McKinney에 의해 프로젝트가 시작되었다. 원래는 R 언어에서 제공하는 데이터프레임 자료형을 파이썬에서 제공할 수 있도록 하는 목적이었으나 더 다양한 기능이 추가되었다.\n\n데이터 분석 라이브러리. R의 data.frame 자료구조 구현\n홈페이지: http://pandas.pydata.org/\n개발: 2008, Wes McKinney (AQR Capital Management)",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.4 데이터 분석용 파이썬 패키지 소개"
    ]
  },
  {
    "objectID": "01.04 데이터 분석용 파이썬 패키지 소개.html#matplotlib",
    "href": "01.04 데이터 분석용 파이썬 패키지 소개.html#matplotlib",
    "title": "1.4 데이터 분석용 파이썬 패키지 소개",
    "section": "Matplotlib",
    "text": "Matplotlib\nMatplotlib(“맷플롯리브”라고 읽는다) 패키지는 파이썬에서 각종 그래프나 챠트 등을 그리는 시각화 기능을 제공한다. Tkinter, wxPython, Qt, GTK+ 등의 다양한 그래픽 엔진을 사용할 수 있다. 또한, MATLAB의 그래프 기능을 거의 동일하게 사용할 수 있는 pylab이라는 서브패키지를 제공하므로 MATLAB에 익숙한 사람들은 바로 Matplotlib을 사용할 수 있다.\n\n시각화 라이브러리, MATLAB 플롯 기능 구현\n홈페이지: http://matplotlib.org/\n개발: 2002, John D. Hunter",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.4 데이터 분석용 파이썬 패키지 소개"
    ]
  },
  {
    "objectID": "01.04 데이터 분석용 파이썬 패키지 소개.html#seaborn",
    "href": "01.04 데이터 분석용 파이썬 패키지 소개.html#seaborn",
    "title": "1.4 데이터 분석용 파이썬 패키지 소개",
    "section": "Seaborn",
    "text": "Seaborn\nSeaborn(“시본”이라고 읽는다) 패키지는 Matplotlib 패키지에서 지원하지 않는 고급 통계 차트를 그리는 통계용 시각화 기능을 제공한다.\n\n시각화 라이브러리. 통계용 챠트 및 컬러맵 추가\n홈페이지: http://seaborn.pydata.org/\n개발: 2012, Michael Waskom",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.4 데이터 분석용 파이썬 패키지 소개"
    ]
  },
  {
    "objectID": "01.04 데이터 분석용 파이썬 패키지 소개.html#패키지-설치",
    "href": "01.04 데이터 분석용 파이썬 패키지 소개.html#패키지-설치",
    "title": "1.4 데이터 분석용 파이썬 패키지 소개",
    "section": "패키지 설치",
    "text": "패키지 설치\n아나콘다 배포판을 설치하면 NumPy, SciPy, SymPy, Matplotlib, Seaborn 등은 자동으로 설치된다. 아나콘다 배포판을 사용하지 않는 경우에는 pip나 conda를 사용하여 직접 설치할 수 있다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.4 데이터 분석용 파이썬 패키지 소개"
    ]
  },
  {
    "objectID": "01.02 파이썬 처음 사용하기.html",
    "href": "01.02 파이썬 처음 사용하기.html",
    "title": "1.2 파이썬 처음 사용하기",
    "section": "",
    "text": "파이썬을 설치하였으면 이제부터 실제로 사용해보자. 파이썬은 다음과 같이 두 가지 방법으로 사용할 수 있다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.2 파이썬 처음 사용하기"
    ]
  },
  {
    "objectID": "01.02 파이썬 처음 사용하기.html#replreadevalprint-loop-방식",
    "href": "01.02 파이썬 처음 사용하기.html#replreadevalprint-loop-방식",
    "title": "1.2 파이썬 처음 사용하기",
    "section": "REPL(Read–Eval–Print Loop) 방식",
    "text": "REPL(Read–Eval–Print Loop) 방식\nREPL\nREPL(Read–Eval–Print Loop, ’레플’이라고 읽는다) 방식은 주피터 노트북이나 파이썬(또는 IPython) 콘솔을 실행해서 명령어를 한 줄씩 입력하며 실행 상황을 지켜보는 방식이다. 파이썬 프로그래밍을 공부하거나 코드의 초기 버전을 제작할 때 유용한 방식이다. 이 책에서는 모든 코드를 REPL 방식으로 실행하면서 공부한다.\n\n주피터 노트북 사용법\n앞절에서 설명한대로 주피터 노트북 서버를 실행한 후에 웹브라우저에 http://localhost:8888 주소를 입력하면 주피터 노트북 홈 화면이 나온다. 사용자의 홈 디렉터리에 있는 내용이 보여준다. 사용자마다 내용은 다를 것이다. 디렉터리를 클릭하면 해당 디렉터리로 이동한다.\n\n\n\njupyter_notebook_1.png\n\n\n홈 화면에서 오른쪽 위에 있는 New 버튼을 누르면 다음과 같이 실행할 수 있는 명령어 목록이 나온다.\n\n\n\njupyter_notebook_2.png\n\n\n여기에서 Python 3라고 되어 있는 명령을 선택하면 웹 브라우저의 새 탭에서 Untitled란 이름으로 주피터 노트북이 실행된다.\n\n\n\njupyter_notebook_3.png\n\n\n이렇게 노트북이 새로 만들어지면 원래의 홈 화면에는 다음과 같이 새로 만들어진 노트북이 표시된다. 이때 현재 가동 중인 노트북은 녹색 아이콘으로 표시되며 오른쪽에 녹색으로 Running이라는 글자가 표시된다.\n\n\n\njupyter_notebook_4.png\n\n\n새로 만든 Untitled 노트북을 마저 살펴보자. 노트북은 셀(cell)이라는 네모 칸들로 구성된다. 새로 만든 노트북에는 셀이 하나만 표시되어 있는데 이 셀에 파이썬 코드를 입력한다. 우선 다음과 같은 코드를 입력해보자.\n  print(\"Hello\")\n코드를 입력한 후에 shift + Enter 키를 누르면 현재 셀이 실행되며 결과가 출력된다. 또한, 다음 셀이 만들어지고 포커스는 다음 셀로 넘어간다. 실행된 셀의 프롬프트에는 실행 순서를 나타내는 번호가 붙는다. 만일 Enter 키만 누르면 다음 줄로 넘어가기만 하고 코드가 실행되지는 않는다.\n\n\n\njupyter_notebook_5.png\n\n\n이제 다음과 같은 명령을 한 줄씩 입력해보자. 한 줄을 입력할 때마다 shift+Enter 키를 누르고 해당 명령이 실행되는 것을 살펴보자. 변수 x에 1이라는 값을 넣고, 변수 y에 2를 넣은 후 변수 z에 변수 x와 y 변숫값을 더해서 넣자.\nx = 1\nshift+Enter\nx\nshift+Enter\ny = 2\nshift+Enter\ny\nshift+Enter\nz = x + y\nshift+Enter\nz\nshift+Enter\n\n\n\njupyter_notebook_6.png\n\n\n\n\n값과 변수의 표현\n표현(representation)\n위의 코드에서 두 번째 명령으로 나오는\nx\n는 변수 x 값을 표시하라는 뜻이다. 이때 표시되는 것을 그 값의 표현(representation)이라고 한다. 변수 이름을 입력했을 때 표현이 나오는 것은 REPL에서만 가능하고 이후에 설명할 스크립트 실행시에는 표시되지 않는다.\n이 방식이 REPL이라고 불리우는 것은 이렇게 명령을 하나 하나 입력하고(Read) 실행하면서(Evaluate) 변수의 값을 출력하여(Print) 살펴보는 것을 반복(Loop)하면서 코드를 만들기 때문이다.\n물론 위 명령을 셀 하나에 넣고 한꺼번에 실행할 수도 있다. 다만 변수 이름을 지정해서 변숫값을 살펴보는 것은 셀의 마지막 행(line)에서만 가능하다. 즉 아래 그림의 8번 셀에서 중간에 있는 x 등은 아무런 의미가 없으므로 8번 셀의 코드는 실제로 9번 셀과 같다.\n\n\n\njupyter_notebook_7.png\n\n\n노트북 사용이 끝나면 File &gt; Rename 명령을 실행하여 노트북의 이름을 Untitled가 아닌 다른 이름으로 바꾼 뒤, File &gt; Close and Halt 명령으로 파이썬 탭을 닫는다. 이 명령을 사용하지 않고 그냥 웹 브라우저를 닫으면 파이썬 콘솔이 배경에서 계속 실행된다. 반드시 Close and Halt 명령을 사용해 닫자.\n\n\n\njupyter_notebook_8.png",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.2 파이썬 처음 사용하기"
    ]
  },
  {
    "objectID": "01.02 파이썬 처음 사용하기.html#스크립트-실행-방식",
    "href": "01.02 파이썬 처음 사용하기.html#스크립트-실행-방식",
    "title": "1.2 파이썬 처음 사용하기",
    "section": "스크립트 실행 방식",
    "text": "스크립트 실행 방식\n스크립트(script)\n코드를 모두 완성한 후 전체 코드를 한 번에 실행하고 싶을 때는 코드를 .py 확장자 파일로 만든다. 이렇게 만든 코드 파일을 스크립트(script)라고 한다. 스크립트는 주피터 노트북이나 아이파이썬(IPython) 콘솔을 실행하지 않고 터미널에서 직접 실행할 수 있다.\n다만 스크립트에서는 변수 이름만 입력해서 변수의 값, 즉 표현(representation)이 표시되게 하는 것은 불가능하므로 화면에 무언가를 표시하려면 반드시 명시적으로 print 명령을 사용해야 한다.\n간단한 스크립트를 하나 만들어보자. 홈 화면의 오른쪽 위에 있는  버튼에서 [Text File]을 실행하여 파일 입력 탭을 생성한다.\n\n\n\njupyter_notebook_9.png\n\n\n[File → Rename] 명령을 선택하여 노트북의 이름을 test.py로 변경한다.\n\n\n\njupyter_notebook_10.png\n\n\n다음 그림과 같이 코드를 타이핑한다.\n\n\n\njupyter_notebook_12.png\n\n\n[File → Save] 명령을 선택하여 저장한다.\n\n\n\njupyter_notebook_13.png\n\n\n스크립트 방식은 애플리케이션(application)이나 반복하여 실행해야 하는 코드를 만들 때 주로 사용된다.\n이제 터미널을 열고 test.py가 저장된 폴더로 이동한 후 다음 명령을 입력한 후 엔터를 치자. 윈도우라면 아나콘다 프롬프트를 실행하여 터미널을 연다. 파이썬 스크립트가 실행되고 결과가 출력되는 것을 볼 수 있다.\n$ python test.py\n실행 결과는 다음과 같다.\n$ python test.py\n1\n2\n3",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.2 파이썬 처음 사용하기"
    ]
  },
  {
    "objectID": "01.00 1장 파이썬 설치와 설정.html",
    "href": "01.00 1장 파이썬 설치와 설정.html",
    "title": "1장 파이썬 설치와 설정",
    "section": "",
    "text": "이 장에서는 파이썬을 설치하고 설정하는 방법에 대해 설명한다. 처음으로 아나콘다 파이썬을 설치하여 파이썬과 아이파이썬, 주피터 노트북을 사용하는 경우에는 이 장을 읽고 익숙해져야 한다. 이미 파이썬 설치하여 사용하고 있는 독자는 이 장을 생략하고 다음 장부터 학습을 시작할 수 있다.",
    "crumbs": [
      "1장 파이썬 설치와 설정"
    ]
  },
  {
    "objectID": "01.00 1장 파이썬 설치와 설정.html#학습-목표",
    "href": "01.00 1장 파이썬 설치와 설정.html#학습-목표",
    "title": "1장 파이썬 설치와 설정",
    "section": "학습 목표",
    "text": "학습 목표\n\n파이썬의 종류와 버전에 대해 학습한다.\n아나콘다 파이썬 배포판을 받아 설치하는 방법을 배운다.\n파이썬, 아이파이썬, 파이썬 노트북을 실행하는 방법을 익힌다.\n아이파이썬을 위한 스타트업 파일을 설정해 본다.",
    "crumbs": [
      "1장 파이썬 설치와 설정"
    ]
  },
  {
    "objectID": "00.00 소개의 글.html#이-책의-구성",
    "href": "00.00 소개의 글.html#이-책의-구성",
    "title": "소개의 글",
    "section": "이 책의 구성",
    "text": "이 책의 구성\n\n1장 파이썬 설치와 설정\n\n\n2장 파이썬 기초 문법\n\n\n3장 넘파이(NumPy) 배열\n\n\n4장 판다스(Pandas) 데이터 분석\n\n\n5장 시각화",
    "crumbs": [
      "소개의 글"
    ]
  },
  {
    "objectID": "01.01 파이썬 설치하기.html",
    "href": "01.01 파이썬 설치하기.html",
    "title": "1.1 파이썬 설치하기",
    "section": "",
    "text": "여기에서는 사용자의 컴퓨터에 직접 파이썬을 설치하여 사용하는 방법을 살펴본다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.1 파이썬 설치하기"
    ]
  },
  {
    "objectID": "01.01 파이썬 설치하기.html#파이썬의-종류",
    "href": "01.01 파이썬 설치하기.html#파이썬의-종류",
    "title": "1.1 파이썬 설치하기",
    "section": "파이썬의 종류",
    "text": "파이썬의 종류\n파이썬을 설치한다는 것은 파이썬 언어를 를 읽고 해석하여 수행하는 인터프리터(interpreter)라는 프로그램을 설치한다는 뜻이다.\n최초의 파이썬 언어 인터프리터는 C 언어로 만들어졌다. C로 만든 파이썬은 CPython(씨 파이썬이라고 읽는다)이라고 한다. CPython은 C 혹은 C++ 언어로 된 바이너리 라이브러리를 직접 호출할 수 있기 때문에 수많은 C/C++ 라이브러리를 파이썬에서 쉽게 사용할 수 있는 장점이 있다. 수치 계산이나 데이터 분석용으로 파이썬을 사용할 때는 항상 씨파이썬(CPython)을 사용한다.\n\n\n씨파이썬(CPython)\n그 외에 자바(Java)로 구현된 자이썬(Jython), 닷넷(.NET)으로 구현된 아이언파이썬(IronPython) 등의 파이썬도 있다. 이러한 파이썬 인터프리터를 사용하면 자바 라이브러리나 닷넷 컴포넌트를 파이썬에서 직접 호출하여 사용할 수 있다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.1 파이썬 설치하기"
    ]
  },
  {
    "objectID": "01.01 파이썬 설치하기.html#파이썬-설치",
    "href": "01.01 파이썬 설치하기.html#파이썬-설치",
    "title": "1.1 파이썬 설치하기",
    "section": "파이썬 설치",
    "text": "파이썬 설치\n파이썬 종류와 버전을 알아보았으니 이제 파이썬을 설치해보자. 사용하는 컴퓨터의 운영체제가 리눅스나 맥OS인 경우에는 대부분에 파이썬이 이미 설치되어 있다. 윈도우를 사용한다면 파이썬 공식 웹사이트에서 파이썬 인터프리터를 내려받아 설치할 수 있다.\n그런데 리눅스와 맥OS에 기본 설치된 파이썬을 사용하거나, 공식 웹사이트에서 파이썬 인터프리터를 내려받아서 설치해 사용하면 파이썬 패키지 관리가 어렵고 여러 가지 다양한 추가 도구를 별도로 설치해야 하며 기존에 설치된 다른 파이썬과 충돌이 발생할 수도 있어 권장하지 않는다. 대신, 다음에 설명하는 파이썬 배포판(python distribution)을 이용하기를 권장한다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.1 파이썬 설치하기"
    ]
  },
  {
    "objectID": "01.01 파이썬 설치하기.html#파이썬-배포판",
    "href": "01.01 파이썬 설치하기.html#파이썬-배포판",
    "title": "1.1 파이썬 설치하기",
    "section": "파이썬 배포판",
    "text": "파이썬 배포판\n파이썬 배포판은 파이썬 인터프리터 이외에도 다양한 패키지와 개발 도구를 함께 제공하는 설치 프로그램이다. 여러 가지 배포판이 있으므로 사용하고자 하는 운영체제, 32/64비트 지원 여부, 무료/상용 여부를 잘 고려하여 선택해야 한다.\n\n\n파이썬 배포판\n여기에서 추천하는 파이썬 배포판은 ’미니포지(miniforge)’다. 미니포지 배포판은 용량이 작고 설치 속도가 빠르며 패키지 관리자인 pip, conda, mamba를 같이 설치해주므로 사용이 편하다.\n\n\n미니포지 배포판\n미니포지 배포판은 다음 웹사이트에서 자신이 사용하는 운영체제에 맞는 것을 선택하여 내려받는다.\n\nhttps://github.com/conda-forge/miniforge/releases\n\n대표적인 운영체제용 설치파일은 다음과 같다.\n\n윈도우즈용: Miniforge3-Windows-x86_64.exe\n맥OSX(인텔칩): Miniforge3-MacOSX-x86_64.sh\n맥OSX(실리콘칩): Miniforge3-MacOSX-arm64.sh\n리눅스(실리콘칩): Miniforge3-Linux-x86_64.sh",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.1 파이썬 설치하기"
    ]
  },
  {
    "objectID": "01.01 파이썬 설치하기.html#미니포지-설치",
    "href": "01.01 파이썬 설치하기.html#미니포지-설치",
    "title": "1.1 파이썬 설치하기",
    "section": "미니포지 설치",
    "text": "미니포지 설치\n미니포지 배포판을 설치하는 방법은 아주 쉽다. 윈도우에서는 내려받은 파일을 더블 클릭하면 설치가 쉽게 이루어진다. 모든 설정은 주어진 기본 설정으로 선택하면 된다. 맥OS나 리눅스에서는 받은 파일이 실행 파일이므로 터미널 창에서 bash 명령으로 실행한다.\n설치 중 설정을 변경하지 않았다면 파이썬 인터프리터는 다음 경로에 설치된다.\n\n윈도우: C:/Users/사용자계정이름/miniforge3/bin/python\n맥: /Users/사용자계정이름/miniforge3/bin/python\n리눅스: /home/사용자계정이름/miniforge3/bin/python",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.1 파이썬 설치하기"
    ]
  },
  {
    "objectID": "01.01 파이썬 설치하기.html#파이썬-설치-확인",
    "href": "01.01 파이썬 설치하기.html#파이썬-설치-확인",
    "title": "1.1 파이썬 설치하기",
    "section": "파이썬 설치 확인",
    "text": "파이썬 설치 확인\n이제 파이썬을 실행하여 정상적으로 설치되었는지 확인하자.\n맥이나 리눅스에서는 새로운 터미널을 시작하고 python이라고 입력한다. 미니포지를 설치한 터미널에서는 경로가 정상적으로 설정되지 않아 실행이 안될 수도 있으므로 반드시 새로운 터미널 창을 시작해야 한다.\n윈도우의 경우에는 파이썬 파일에 대한 경로가 지정되어 있지 않으므로 시작 메뉴에서 Minoforge3 프로그램 그룹을 선택하고 이 아래의 Miniforge Prompt를 클릭하면 파이썬 경로가 지정된 터미널 창이 시작된다.\n\n모든 프로그램 → Miniforge3 → Miniforge Prompt\n\n정상적으로 실행된다면 터미널이 뜨고 다음처럼 파이썬 버전 번호를 포함한 메시지와 &gt;&gt;&gt; 모양의 프롬프트가 나온다. 메시지 내용은 사용하는 컴퓨터나 파이썬 버전, 다운로드받은 시점에 따라 달라질 수 있다.\n$ python\nPython 3.12.8 | packaged by conda-forge | (main, Dec  5 2024, 14:25:12) [Clang 18.1.8 ] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n여기에서는 파이썬이 동작하는지 확인만 하고 구체적인 사용법은 나중에 공부하므로 이제 파이썬 인터프리터를 종료하자. 종료하려면 다음과 같이 &gt;&gt;&gt; 프롬프트 다음에 exit() 라고 입력한다. 그러면 파이썬 인터프리터가 종료되가 다시 터미널 화면으로 나오게 된다.\n$ python\nPython 3.12.8 | packaged by conda-forge | (main, Dec  5 2024, 14:25:12) [Clang 18.1.8 ] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n$",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.1 파이썬 설치하기"
    ]
  },
  {
    "objectID": "01.03 파이썬 패키지 설치하기.html",
    "href": "01.03 파이썬 패키지 설치하기.html",
    "title": "1.3 파이썬 패키지 설치하기",
    "section": "",
    "text": "라이브러리, 패키지\n집을 지을 때, 시멘트나 철근이 필요하다고 해서 집을 짓는 사람이 시멘트 제작이나 철광석 제련부터 할 수는 없다. 부품이나 재료는 이미 만들어진 것을 사서 쓰는 것이 효율적이다. 프로그램도 마찬가지어서 필요한 모든 부분을 한 사람이 만드는 경우는 거의 없으며 여러가지 프로그램에 공통적으로 사용되는 부분은 해당 분야의 전문가가 미리 만들어 놓은 프로그램을 가져다 사용하는 것이 현명한 선택이다. 이처럼 다른 프로그램 제작에 사용하기 위해 미리 만들어진 프로그램의 집합을 라이브러리(library)라고 한다. 파이썬에서는 라이브러리라는 용어 대신 패키지(package)라는 말을 주로 사용한다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.3 파이썬 패키지 설치하기"
    ]
  },
  {
    "objectID": "01.03 파이썬 패키지 설치하기.html#라이브러리와-패키지",
    "href": "01.03 파이썬 패키지 설치하기.html#라이브러리와-패키지",
    "title": "1.3 파이썬 패키지 설치하기",
    "section": "",
    "text": "라이브러리, 패키지\n집을 지을 때, 시멘트나 철근이 필요하다고 해서 집을 짓는 사람이 시멘트 제작이나 철광석 제련부터 할 수는 없다. 부품이나 재료는 이미 만들어진 것을 사서 쓰는 것이 효율적이다. 프로그램도 마찬가지어서 필요한 모든 부분을 한 사람이 만드는 경우는 거의 없으며 여러가지 프로그램에 공통적으로 사용되는 부분은 해당 분야의 전문가가 미리 만들어 놓은 프로그램을 가져다 사용하는 것이 현명한 선택이다. 이처럼 다른 프로그램 제작에 사용하기 위해 미리 만들어진 프로그램의 집합을 라이브러리(library)라고 한다. 파이썬에서는 라이브러리라는 용어 대신 패키지(package)라는 말을 주로 사용한다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.3 파이썬 패키지 설치하기"
    ]
  },
  {
    "objectID": "01.03 파이썬 패키지 설치하기.html#패키지-설치",
    "href": "01.03 파이썬 패키지 설치하기.html#패키지-설치",
    "title": "1.3 파이썬 패키지 설치하기",
    "section": "패키지 설치",
    "text": "패키지 설치\n일부 패키지는 파이썬을 설치할 때 함께 설치되는데 이러한 패키지를 표준 패키지(standard package)라고 한다. 그러나 대부분의 패키지는 파이썬을 설치한 후에 별도로 설치한다. 아나콘다 배포판을 설치하면 다양한 패키지들을 추가로 기본 설치해준다. 그러나 그 외에 추가로 패키지를 더 사용해야 할 때는 사용자가 수동으로 설치해야 한다.\nC, C++, 자바 같은 언어는 새로운 라이브러리를 설치할 때 그 라이브러리를 제공하는 웹사이트를 일일이 방문하여 소스코드나 바이너리를 내려받아야 한다. 반면 파이썬은 모든 패키지를 한 서버에 등록해서 간단한 명령어만으로 패키지를 쉽게 내려받아 설치할 수 있다.\n기본적으로 모든 파이썬 패키지는 PyPI 서버(https://pypi.org/) 라는 공식 패키지 서버에 등록된다. 하지만 아나콘다 배포판의 경우에는 PyPI가 아닌 독자적인 패키지 서버(https://anaconda.org/)를 운영하고 있으며 운영체제별로 미리 컴파일된 패키지를 제공하는 대신 PyPI보다는 제공하는 패키지의 수가 적다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.3 파이썬 패키지 설치하기"
    ]
  },
  {
    "objectID": "01.03 파이썬 패키지 설치하기.html#패키지-관리자",
    "href": "01.03 파이썬 패키지 설치하기.html#패키지-관리자",
    "title": "1.3 파이썬 패키지 설치하기",
    "section": "패키지 관리자",
    "text": "패키지 관리자\n패키지를 설치하기 위한 프로그램을 패키지 관리자라고 한다. 파이썬에서는 pip라고 하는 패키지 관리자를 기본으로 제공하지만, 아나콘다 배포판에서는 conda라고 하는 아나콘다 전용 패키지 관리자도 제공한다. conda는 아나콘다 배포판이 설치될 때 자동으로 함께 설치된다.\npip 패키지 관리자",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.3 파이썬 패키지 설치하기"
    ]
  },
  {
    "objectID": "01.03 파이썬 패키지 설치하기.html#pip를-사용하여-설치된-패키지를-확인하기",
    "href": "01.03 파이썬 패키지 설치하기.html#pip를-사용하여-설치된-패키지를-확인하기",
    "title": "1.3 파이썬 패키지 설치하기",
    "section": "pip를 사용하여 설치된 패키지를 확인하기",
    "text": "pip를 사용하여 설치된 패키지를 확인하기\npip 패키지 관리자를 사용할 때는 pip list 명령으로 설치된 패키지 목록을 볼 수 있다.\n$ pip list\nPackage                            Version\n---------------------------------- ---------------------------\nabsl-py                            0.7.1\nalabaster                          0.7.12\nanaconda-clean                     1.0\nanaconda-client                    1.7.2\nanaconda-navigator                 1.9.7\nanaconda-project                   0.8.2\n... (이하 생략)\n\nconda 패키지 관리자",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.3 파이썬 패키지 설치하기"
    ]
  },
  {
    "objectID": "01.03 파이썬 패키지 설치하기.html#conda를-사용하여-설치된-패키지를-확인하기",
    "href": "01.03 파이썬 패키지 설치하기.html#conda를-사용하여-설치된-패키지를-확인하기",
    "title": "1.3 파이썬 패키지 설치하기",
    "section": "conda를 사용하여 설치된 패키지를 확인하기",
    "text": "conda를 사용하여 설치된 패키지를 확인하기\nconda 패키지 관리자를 사용할 때는 conda list 명령으로 설치된 패키지 목록을 볼 수 있다.\n$ conda list\n# packages in environment at /home/dockeruser/anaconda3:\n#\n# Name                    Version                   Build  Channel\n_ipyw_jlab_nb_ext_conf    0.1.0                    py37_0\n_py-xgboost-mutex         2.0                       cpu_0    conda-forge\nabsl-py                   0.7.1                    pypi_0    pypi\nalabaster                 0.7.12                   py37_0\nanaconda                  custom                   py37_0\n... (이하 생략)",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.3 파이썬 패키지 설치하기"
    ]
  },
  {
    "objectID": "01.03 파이썬 패키지 설치하기.html#pip를-이용하여-패키지를-설치하기",
    "href": "01.03 파이썬 패키지 설치하기.html#pip를-이용하여-패키지를-설치하기",
    "title": "1.3 파이썬 패키지 설치하기",
    "section": "pip를 이용하여 패키지를 설치하기",
    "text": "pip를 이용하여 패키지를 설치하기\npip 패키지 관리자를 이용하여 패키지를 설치하려면 콘솔 창에서 다음과 같이 입력한다.\npip install 패키지이름\n예를 들어 quandl이라는 이름의 패키지를 설치하려면 pip install quandl 이라고 명령한다.\n~$ pip install quandl\nCollecting quandl\n  Downloading https://files.pythonhosted.org/packages/12/64/6314547cb01fa75697ddba6d6d43a9f1d023c1730ffc6abf3db7a0c89222/Quandl-3.4.8-py2.py3-none-any.whl\nCollecting more-itertools&lt;=5.0.0 (from quandl)\n\n...(중략)...\n\nInstalling collected packages: more-itertools, inflection, ndg-httpsclient, quandl\n  Found existing installation: more-itertools 7.0.0\n    Uninstalling more-itertools-7.0.0:\n      Successfully uninstalled more-itertools-7.0.0\nSuccessfully installed inflection-0.3.1 more-itertools-5.0.0 ndg-httpsclient-0.5.1 quandl-3.4.8\ndockeruser@7f62df393a47:~$\n대부분의 패키지는 내부적으로는 다른 패키지의 기능을 사용한다. 예를 들어 만약 패키지 A가 패키지 B의 기능을 사용하고 있다면 패키지 B가 설치되어 있을 때만 패키지 A를 사용할 수 있다. 이때 패키지 A가 패키지 B에 의존(depend)한다고 말한다. pip로 패키지를 설치하면 그 패키지가 의존하는 다른 패키지도 자동으로 설치한다. 위에서 quandl 패키지를 설치하였더니 more-itertools, ndg-httpsclient를 같이 설치한 것을 볼 수 있다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.3 파이썬 패키지 설치하기"
    ]
  },
  {
    "objectID": "01.03 파이썬 패키지 설치하기.html#conda를-이용하여-패키지를-설치하기",
    "href": "01.03 파이썬 패키지 설치하기.html#conda를-이용하여-패키지를-설치하기",
    "title": "1.3 파이썬 패키지 설치하기",
    "section": "conda를 이용하여 패키지를 설치하기",
    "text": "conda를 이용하여 패키지를 설치하기\n아나콘다 배포판에서 제공하는 conda 패키지 관리자는 의존성 관리 성능이 pip보다 뛰어나다. 설치하거나 제거할 패키지간의 의존성을 파악하고 만약 설치하고자 하는 패키지가 의존하고 있는 다른 패키지가 설치되어 있지 않거나 버전이 맞지 않으면 필요한 패키지를 설치해 주는 것 이외에도 기존의 패키지를 자동으로 업그레이드하거나 다운그레이드해 준다.\nconda를 이용하여 패키지를 설치하는 명령어는 다음과 같다.\nconda install 패키지이름\n예를 들어 flake8이라는 이름의 패키지를 설치하려면 다음과 같이 conda install flake8이라고 명령한다.\n중간에 Proceed ([y]/n)?라고 진행여부를 물어보면 y 키를 누르면 된다.\n$ conda install flake8\nCollecting package metadata: done\nSolving environment: |\n\n## Package Plan ##\n\n  environment location: /home/dockeruser/anaconda3\n\n  added / updated specs:\n    - flake8\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    conda-4.6.14               |           py37_0         2.1 MB\n    flake8-3.7.7               |           py37_0         131 KB\n    ------------------------------------------------------------\n                                           Total:         2.2 MB\n\nThe following NEW packages will be INSTALLED:\n\n  flake8             pkgs/main/linux-64::flake8-3.7.7-py37_0\n\nThe following packages will be SUPERSEDED by a higher-priority channel:\n\n  ca-certificates    conda-forge::ca-certificates-2019.3.9~ --&gt; pkgs/main::ca-certificates-2019.1.23-0\n  conda                                         conda-forge --&gt; pkgs/main\n  openssl            conda-forge::openssl-1.1.1b-h14c3975_1 --&gt; pkgs/main::openssl-1.1.1b-h7b6447c_1\n\nProceed ([y]/n)?\n\nDownloading and Extracting Packages\nflake8-3.7.7         | 131 KB    | ####################################################### | 100%\nconda-4.6.14         | 2.1 MB    | ####################################################### | 100%\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\nconda 패키지 관리자가 flake8 설치에 필요한 다른 패키지까지도 자동으로 설치하거나 업그레이드 해 주는 것을 볼 수 있다. 패키지를 설치할 때는 되도록 conda 패키지 관리자를 사용하고 anaconda 서버에 해당 패키지가 없을 때문 pip 패키지 관리자를 사용하기를 권장한다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.3 파이썬 패키지 설치하기"
    ]
  },
  {
    "objectID": "01.05 아이파이썬 및 주피터 설정.html",
    "href": "01.05 아이파이썬 및 주피터 설정.html",
    "title": "1.5 아이파이썬 및 주피터 설정",
    "section": "",
    "text": "이 절에서는 아이파이썬과 주피터 노트북을 사용할 때 사용자의 편의를 위해 사용자 설정(user customization)을 하는 방법을 소개한다. 이 책에서는 여기에서 설명하는 설정이 되어 있다고 가정하고 진행하므로 반드시 이 설정을 따라하기를 추천한다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.5 아이파이썬 및 주피터 설정"
    ]
  },
  {
    "objectID": "01.05 아이파이썬 및 주피터 설정.html#아이파이썬-및-주피터-설정-디렉터리",
    "href": "01.05 아이파이썬 및 주피터 설정.html#아이파이썬-및-주피터-설정-디렉터리",
    "title": "1.5 아이파이썬 및 주피터 설정",
    "section": "아이파이썬 및 주피터 설정 디렉터리",
    "text": "아이파이썬 및 주피터 설정 디렉터리\n아이파이썬, 주피터 노트북이 설치되면 사용자 홈 디렉터리 아래에 .ipython 이라는 디렉터리가 생기는데, 이곳이 설정 디렉터리다. 주피터라는 이름으로 바뀌기 전에는 아이파이썬이라는 이름을 공통으로 사용했는데, 이름이 바뀐 지금도 설정 디렉터리 이름을 그대로 사용하고 있다.\n탐색기에서 .ipython 디렉터리가 보이지 않을 때는 다음처럼 실행한다.\n\n윈도우에서는 탐색기에서 [보기 → 옵션 → “폴더 및 검색 옵션 변경”]을 눌러 폴더 옵션 창을 띄운 뒤 “보기” 탭에서 “숨긴 파일, 폴더 및 드라이브 표시”에 체크한다.\n맥 OS에서는 Finder에서 홈 디렉터리로 이동한 뒤 키보드에서 shift + command + . 키를 누른다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.5 아이파이썬 및 주피터 설정"
    ]
  },
  {
    "objectID": "01.05 아이파이썬 및 주피터 설정.html#프로필-작성",
    "href": "01.05 아이파이썬 및 주피터 설정.html#프로필-작성",
    "title": "1.5 아이파이썬 및 주피터 설정",
    "section": "프로필 작성",
    "text": "프로필 작성\n프로필(profile)\n아이파이썬 또는 주피터 관련 설정을 하려면 프로필(profile)이 필요하다. 프로필은 .ipython 설정 디렉터리 아래에 디렉터리 형태로 저장되는데 기본으로 만들어지는 프로필 디렉터리는 profile_default다.\n프로필 디렉터리는 다음 위치다.\n\n사용자홈디렉터리/.ipython/profile_default/\n\n만약 이 프로필 디렉터리가 없다면 터미널에서 다음 명령으로 만들 수 있다.\n$ ipython profile create",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.5 아이파이썬 및 주피터 설정"
    ]
  },
  {
    "objectID": "01.05 아이파이썬 및 주피터 설정.html#사용자-설정-파일",
    "href": "01.05 아이파이썬 및 주피터 설정.html#사용자-설정-파일",
    "title": "1.5 아이파이썬 및 주피터 설정",
    "section": "사용자 설정 파일",
    "text": "사용자 설정 파일\n사용자 설정은 다음 두 파일을 이용하며 설정 내용은 모든 아이파이썬과 주피터 노트북에 공통으로 적용된다.\n\n스타트업 파일\nipython_config.py 파일",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.5 아이파이썬 및 주피터 설정"
    ]
  },
  {
    "objectID": "01.05 아이파이썬 및 주피터 설정.html#스타트업-파일",
    "href": "01.05 아이파이썬 및 주피터 설정.html#스타트업-파일",
    "title": "1.5 아이파이썬 및 주피터 설정",
    "section": "스타트업 파일",
    "text": "스타트업 파일\n스타트업 파일(startup file)\n스타트업(startup) 파일은 아이파이썬과 주피터 노트북을 이용한 콘솔이 시작되기 전에 실행되는 파일이다. 스타트업 파일은 따로 정해진 이름이 있는 것이 아니라 프로필 디렉터리 아래의 startup 폴더 아래의 .py 확장자를 가진 모든 파이썬 스크립트가 스타트업 파일이며 파일 이름의 알파벳 순서로 실행된다.\n이 책에서는 매번 주피터 노트북을 실행할 때마다 반복해서 패키지 임포트 명령을 치지 않아도 되도록 자주 사용되는 패키지를 미리 임포트한다.\n스타트업 파일이 있는 디렉터리는 다음과 같다.\n\n사용자홈디렉터리/.ipython/profile_default/startup/\n\n보통 가장 먼저 실행되어야 하는 파일 이름을 00.py, 그 다음으로 실행되는 파일 이름을 01.py과 같이 설정한다. 이 디렉터리에 00.py이라는 이름으로 파일을 하나 만들고 다음과 같이 내용을 입력하여 저장한다.\n# 경고 무시\nimport warnings\nwarnings.simplefilter('ignore')\n\n# 자주 사용하는 패키지를 임포트\nimport matplotlib as mpl\nimport matplotlib.pylab as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nimport statsmodels.api as sm\nimport sklearn as sk\n\n# matplotlib 설정\nmpl.use('Agg')\n\n# seaborn 설정\nsns.set()\nsns.set_style(\"whitegrid\")\nsns.set_color_codes()\n단, 이 스타트업 파일이 정상 실행되려면 임포트할 패키지가 미리 설치되어 있어야 한다. 따라서 위 스타업 파일에서 임포트하는 다음 패키지가 설치되어 있는지 conda list 명령으로 확인하고 만약 설치되어 있지 않다면 ’파이썬 패키지 설치하기’의 내용을 참조하여 패키지를 설치한다.",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.5 아이파이썬 및 주피터 설정"
    ]
  },
  {
    "objectID": "01.05 아이파이썬 및 주피터 설정.html#ipython_config.py-설정-파일",
    "href": "01.05 아이파이썬 및 주피터 설정.html#ipython_config.py-설정-파일",
    "title": "1.5 아이파이썬 및 주피터 설정",
    "section": "ipython_config.py 설정 파일",
    "text": "ipython_config.py 설정 파일\nipython_config.py 설정파일\n일부 파이썬 명령은 하나의 스크립트 안에서만 실행되므로 스타트업 파일에 적어 놓아도 실제 아이파이썬 콘솔에는 적용되지 않는다. 예를 들어 mpl.rc 계열의 임포트 명령은 하나의 스크립트 안에서만 영향을 미친다. 이때는 ipython_config.py 설정 파일 안에서 c.InteractiveShellApp.exec_lines 설정 항목을 다음처럼 지정하면 된다. 이 항목은 파이썬이 시작한 직후 스스로 실행할 명령어로 이루어진 문자열 목록이다.\n다음은 저자가 사용하는 ipython_config.py 설정 파일의 예다.\nc = get_config()\n\nc.InteractiveShellApp.exec_lines = [\n    \"mpl.rc('font', family='NanumGothic')\",  # 나눔고딕 폰트 사용\n    \"mpl.rc('axes', unicode_minus=False)\", # 유니코드 음수 기호 사용\n    \"mpl.rc('figure', figsize=(8, 5))\",  # 그림 크기 (단위: 인치)\n    \"mpl.rc('figure', dpi=300)\",  # 그림 해상도\n]\n저자는 맷플롯리브(Matplotlib) 패키지로 그림을 그릴 때 나눔고딕 폰트를 사용하므로 그에 맞도록 설정했다. 이 파일이 정상 실행되려면 나눔고딕 폰트가 미리 설치되어 있어야 한다. 나눔고딕 폰트는 다음 웹페이지에서 내려받을 수 있다.\n\nhttps://hangeul.naver.com/font\n\n리눅스에서 나눔고딕 폰트를 설치하려면 다음과 같이 실행한다.\nsudo apt install -y fonts-nanum*\nsudo fc-cache -fv\nrm ~/.cache/matplotlib -rf\n나눔고딕 폰트가 정상적으로 설치되면 파이썬 혹은 아이파이썬 콘솔을 실행하여 다음 코드를 실행한다. 이 코드는 설치된 폰트 중 이름이 “N”으로 시작하는 폰트의 목록을 보여준다. 출력된 폰트 이름 중에 ’NanumGothic’이라는 이름이 보이면 정상적으로 설치된 것이다.\n\nimport matplotlib.font_manager\n\nmatplotlib.font_manager._rebuild()\nsorted([f.name for f in matplotlib.font_manager.fontManager.ttflist if f.name.startswith(\"Nanum\")])\n\n['Nanum Brush Script',\n 'Nanum Pen Script',\n 'NanumBarunGothic',\n 'NanumBarunGothic',\n 'NanumBarunGothic',\n 'NanumBarunGothic',\n 'NanumBarunpen',\n 'NanumBarunpen',\n 'NanumGothic',\n 'NanumGothic',\n 'NanumGothic',\n 'NanumGothic',\n 'NanumGothic Eco',\n 'NanumGothic Eco',\n 'NanumGothic Eco',\n 'NanumGothicCoding',\n 'NanumGothicCoding',\n 'NanumMyeongjo',\n 'NanumMyeongjo',\n 'NanumMyeongjo',\n 'NanumMyeongjo Eco',\n 'NanumMyeongjo Eco',\n 'NanumMyeongjo Eco',\n 'NanumSquare',\n 'NanumSquare',\n 'NanumSquare',\n 'NanumSquare',\n 'NanumSquareRound',\n 'NanumSquareRound',\n 'NanumSquareRound',\n 'NanumSquareRound']\n\n\n위에서 적용한 설정은 모두 아이파이썬, 주피터 노트북과 같은 상호작용 콘솔에서만 적용되고, 파이썬 인터프리터를 직접 실행하여 파이썬 스크립트를 가동하는방식의 실행시에는 적용되지 않는다.\n이제부터 나오는 모든 파이썬 예제 코드는 스타트업 파일과 ipython_config.py 설정 파일이 앞에서 작성한 대로 설정되어 있다는 가정하에 작성한다. 따라서 각자 사용하는 파이썬 환경을 미리 설정 파일에 적용해두기 바란다.\n위 파일들은 다음 링크에서 다운로드받을 수도 있다.\n\nhttps://raw.githubusercontent.com/datascienceschool/docker_rpython/master/02_rpython/00.py\nhttps://raw.githubusercontent.com/datascienceschool/docker_rpython/master/02_rpython/ipython_config.py",
    "crumbs": [
      "1장 파이썬 설치와 설정",
      "1.5 아이파이썬 및 주피터 설정"
    ]
  },
  {
    "objectID": "02.01 파이썬을 계산기로 사용하기.html",
    "href": "02.01 파이썬을 계산기로 사용하기.html",
    "title": "2.1 파이썬을 계산기로 사용하기",
    "section": "",
    "text": "가장 간단한 프로그래밍은 파이썬을 계산기로 사용하는 것이다. 여기에 나오는 모든 코드 예제는 주피터 노트북에서 실행하는 것을 가정하고 있다. 하지만 아이파이썬이나 일반 파이썬 콘솔에서도 실행할 수 있다."
  },
  {
    "objectID": "02.01 파이썬을 계산기로 사용하기.html#정수-연산",
    "href": "02.01 파이썬을 계산기로 사용하기.html#정수-연산",
    "title": "2.1 파이썬을 계산기로 사용하기",
    "section": "정수 연산",
    "text": "정수 연산\n주피터 노트북 셸이나 (아이)파이썬 콘솔에서 다음처럼 입력해보자. 계산 결과가 출력되는 것을 볼 수 있다.\n\n1 + 1\n\n2\n\n\n띄어쓰기가 위와 달라도 계산은 된다. 하지만 파이썬에서 다음 코드처럼 띄어쓰는 것은 권장하지 않는다. 일반적인 띄어 쓰기 규칙은 다음과 같다.\n\n코드의 처음과 마지막에는 빈칸을 넣지 않는다.\n빈칸은 항상 하나만 넣는다.\n숫자나 연산 기호 사이는 한 칸을 띄운다.\n괄호를 연 직후나 닫기 직전에는 빈칸을 넣지 않는다.\n\n\n1+1  # 모두 붙여쓰지 않는다.\n\n2\n\n\n\n1 + 1   # 너무 많이 띄우지 않는다. 한 칸만 띄운다.\n\n2\n\n\n주석(comment)\n위 코드에서 # 기호는 주석(설명문, comment)을 뜻하는 기호이다. 주석 기호 다음의 글자들은 사람을 위한 것이다. 컴퓨터는 주석 기호 다음의 글자를 무시한다. 따라서 연습할 때는 주석은 입력하지 않아도 된다.\n파이썬에서는 정수의 덧셈, 뺄셈, 곱셈, 나눗셈 등을 할 수 있다. 하지만 연산 기호는 수학에서 사용하는 것과 조금 다를 수 있다. 특히 나눗셈 연산은 두 가지 종류가 있다는 점에 주의한다.\n\n\\(+\\) : 키보드 +\n\\(-\\) : 키보드 -\n\\(\\times\\) : 키보드 *\n\\(\\div\\) (몫을 구하기) : 키보드 // (두 글자로 된 연산기호이므로 띄우지 않고 연속해서 기호를 타이핑한다.)\n\\(\\div\\) (소수점까지 나누기) : 키보드 /\n나머지 : 키보드 %\n제곱 : 키보드 **\n\n\n2 + 4 - 5\n\n1\n\n\n\n2 * 4\n\n8\n\n\n\n8 // 4  # 8을 4로 나눈 몫은 2\n\n2\n\n\n\n11 // 4  # 11을 4로 나눈 몫은 2\n\n2\n\n\n\n11 % 4  # 11을 4로 나눈 나머지는 3\n\n3\n\n\n\n10 / 4  # 10/4 = 2.5\n\n2.5\n\n\n\n2 ** 3  # 2의 세제곱은 8\n\n8\n\n\n\n2 ** -1  # 음수 제곱은 역수. 2^(-1) = 1/2\n\n0.5\n\n\n\n1000 ** 0  # 모든 수의 0제곱은 1\n\n1\n\n\n```yvinhoeqonwx 연습 문제 2.1.1\n파이썬으로 계산기로 사용하여 다음 연산을 한다.\n\n\\[ 3 \\times 2 - 8 \\div 4 \\]\n\\[ 25 \\times 6 \\div 3 + 17 \\]\n\\[ 39021 - 276920 \\div 12040 \\]\n\\[ 2^{6} - 10 \\; \\% \\; 6 \\]\n\n위 식에서 \\(\\%\\)는 나머지를 구하는 연산이다.\n\n## 연산 순서와 괄호\n\n파이썬에서도 일반 수학의 연산 순서를 따른다. 즉, 곱셈과 나눗셈을 덧셈이나 뺄셈보다 먼저 한다. \n\n::: {#cell-24 .cell outputId='f89e3d50-b6af-4b10-8660-a6a11f4c78bb' school_cell_uuid='224f1520295643a286b3a4f00cae92fd'}\n``` {.python .cell-code}\n3 + 2 * 4\n\n11\n\n:::\n\n3 + (2 * 4)\n\n11\n\n\n\n(3 + 2) * 4\n\n20\n\n\n괄호가 있으면 괄호안을 먼저 계산한다. 하지만 파이썬은 소괄호, 중괄호, 대괄호를 구분하지 않고 모두 소괄호 기호를 사용한다. 예를 들어 아래 수식을 파이썬 코드로 나타내면 다음과 같다.\n\\[ 100 \\div \\Big[ 3 \\times \\big\\{ 10 - (3 \\times 2) \\big\\} + 8 \\Big]\\]\n\n100 / (3 * (10 - (3 * 2)) + 8)\n\n5.0\n\n\n```yvinhoeqonwx 연습 문제 2.1.2\n파이썬을 계산기로 사용하여 다음 연산을 한다.\n\n\\[ 12 - (5 \\times 7  +  1)  \\]\n\\[ 5 \\times \\big\\{ 8 + (10 - 6) \\div 2 \\big\\} \\]\n\\[ 48320 - \\big\\{ (365 - 5 \\times 9) \\div 16 \\big\\} \\times 987 \\]\n\\[ ((3^4 - 3 \\times 7) \\; \\% \\; 5 + 4 )^ 2 \\]\n\n\n## 부등식의 참과 거짓 계산\n\n\n```{margin}\n`True`, `False`\n파이썬은 참과 거짓을 계산하는 부등식 연산도 할 수 있다. 파이썬에서는 참과 거짓을 True 또는 False 라는 값으로 나타낸다. 등호 기호는 변수에 값을 할당하는데 사용되므로 비교 연산을 할 때는 등호 기호가 두 개 반복되는 기호를 사용한다는 점에 주의한다.\n\n$ &gt; $ : 키보드 &gt;\n$ &lt; $ : 키보드 &lt;\n$ = $ : 키보드 ==\n$ $ : 키보드 !=\n$ $ : 키보드 &gt;=\n$ $ : 키보드 &lt;=\n\n\n2 &gt; 1\n\nTrue\n\n\n\n2 &gt; 2\n\nFalse\n\n\n\n2 == 2\n\nTrue\n\n\n\n2 != 1\n\nTrue\n\n\n\n3 &lt;= 3\n\nTrue\n\n\n```yvinhoeqonwx 연습문제 2.1.3\n\n파이썬으로 계산기로 사용하여 답이 True 인 부등식을 3개를 만든다.\n파이썬으로 계산기로 사용하여 답이 False 인 부등식을 3개를 만든다.\n\n\n## 부울리언 대수\n\n\n```{margin}\n부울리언 대수\n파이썬에서는 참과 거짓에 대해 & (AND) 라는 연산과 | (OR) 라는 부울리언 대수(Boolean algebra) 연산도 할 수 있다.\n\n& (AND) 연산은 두 값이 모두 참일 때만 답이 참이 된다. 즉, 하나라도 거짓이면 답은 거짓이다.\n| (OR) 연산은 두 값이 모두 거짓일 때만 답이 거짓이 된다. 즉, 하나라도 참이면 답은 참이다.\n\n참고로 | 기호는 키보드 오른쪽 위의 원화(Korean Won) 표시 키를 shift 키와 동시에 눌러서 입력할 수 있다.\n\nTrue & True\n\nTrue\n\n\n\nTrue & False\n\nFalse\n\n\n\nFalse & True\n\nFalse\n\n\n\nFalse & False\n\nFalse\n\n\n\nTrue | True\n\nTrue\n\n\n\nTrue | False\n\nTrue\n\n\n\nFalse | True\n\nTrue\n\n\n\nFalse | False\n\nFalse\n\n\n부등식 연산과 부울리언 대수를 결합하면 다음과 같은 계산도 할 수 있다.\n\n(2 &gt; 0) & (2 &lt; 3)\n\nTrue\n\n\n\n(2 &gt; 2) | (2 &lt; 3)\n\nTrue\n\n\n```yvinhoeqonwx 연습문제 2.1.4\n다음 식의 값이 참인지 거짓인지 손으로 계산한 후에 파이썬으로 답을 확인한다.\n\n\\[ (5 \\leq 6 ) \\; \\& \\; ( 3 = 4 ) \\]\n\\[ (2 \\neq 1 ) \\; | \\; ( 3 \\geq 4 ) \\]\n\\[ (5 \\leq 6 ) \\; \\& \\; (( 0 = 0 ) \\; | \\; ( 3 &lt; 4 )) \\]\n\n\n## 변수 사용하기\n\n어떤 값을 계속 사용할 때는 그 값을 변수(variable)에 담아두었다가 사용할 수 있다. 변수에 값을 넣는 것을 할당(assignment)한다고 이야기한다. 변수에 값을 할당할 때는 등호 기호를 사용하고 좌변에는 할당할 변수 이름을, 우변에는 할당할 값을 쓴다.\n\n변수이름 = 변수값\n\n변수의 이름은 알파벳으로 시작하며 뒤에는 숫자가 올 수 있다. 파이썬에서는 변수 이름의 대문자와 소문자를 구분하므로 주의하여야 한다. 즉, `apple` 과 `Apple` 과 `APPLE` 은 모두 서로 다른 변수이다.\n\n::: {#cell-57 .cell outputId='7ef183a7-5e59-49b7-930d-c3d567d09df4' school_cell_uuid='37e200af60df4adba20a4678a77184a2'}\n``` {.python .cell-code}\na = 2\nb = 3\na * b\n\n6\n\n:::\n\na = 4\n(a &gt; 0) & (a &lt;= 10)\n\nTrue\n\n\n```yvinhoeqonwx 연습문제 2.1.5\n변수들의 값을 바꾸어 가면서 다음 수식을 계산해 보자.\n\n\\[ (2x - 1)^2 + 1 \\]\n\\[ x^{2y}\\cdot(z + 10) \\]\n\\[ (( j = 0 ) \\; \\& \\; ( 0 &lt; k )) \\; | \\; (i \\leq 100 ) \\]\n\n```"
  },
  {
    "objectID": "02.03 파이썬으로 글자를 출력하기.html",
    "href": "02.03 파이썬으로 글자를 출력하기.html",
    "title": "2.3 파이썬으로 글자를 출력하기",
    "section": "",
    "text": "문자열(string)\n파이썬과 같은 프로그래밍 언어에서는 글자를 문자열(string)이라고 부른다. 파이썬에서 문자열을 만들 때는 따옴표를 사용한다. 따옴표에는 큰 따옴표와 작은 따옴표가 있으며 시작 따옴표와 종료 따옴표만 같으면 어느 것을 사용해도 상관없다.\n문자열을 출력하려면 print 명령을 사용한다.\nprint(\"Hello!\")\n\nHello!\nprint('한글도 쓸 수 있어요.')\n\n한글도 쓸 수 있어요."
  },
  {
    "objectID": "02.03 파이썬으로 글자를 출력하기.html#문자열-연산",
    "href": "02.03 파이썬으로 글자를 출력하기.html#문자열-연산",
    "title": "2.3 파이썬으로 글자를 출력하기",
    "section": "문자열 연산",
    "text": "문자열 연산\n문자열도 숫자처럼 덧셈과 곱셈 연산을 할 수 있다. 덧셈 연산은 두 문자열을 붙이고 곱셈 연산은 문자열을 반복한다.\n\nprint(\"내 이름은 \" + \"홍길동\" + \"입니다.\")\n\n내 이름은 홍길동입니다.\n\n\n\nprint(\"*\" * 10)\n\n**********"
  },
  {
    "objectID": "02.03 파이썬으로 글자를 출력하기.html#숫자를-문자열로-바꾸기",
    "href": "02.03 파이썬으로 글자를 출력하기.html#숫자를-문자열로-바꾸기",
    "title": "2.3 파이썬으로 글자를 출력하기",
    "section": "숫자를 문자열로 바꾸기",
    "text": "숫자를 문자열로 바꾸기\n`str`\n숫자를 문자열과 더하려면 str 명령을 써서 숫자를 문자열 자료형으로 바꾸어야 한다.\n\nn = 10\nprint(\"별표를 \" + str(n) + \"번 출력합니다.\")\nprint(\"*\" * n)\n\n별표를 10번 출력합니다.\n**********"
  },
  {
    "objectID": "02.03 파이썬으로 글자를 출력하기.html#한-줄-띄우기",
    "href": "02.03 파이썬으로 글자를 출력하기.html#한-줄-띄우기",
    "title": "2.3 파이썬으로 글자를 출력하기",
    "section": "한 줄 띄우기",
    "text": "한 줄 띄우기\nprint 명령은 한 번 호출할 때마다 한 줄씩 출력한다. 만약 print 명령을 한 번만 쓰면서 여러 줄에 걸쳐 출력을 하고 싶으면 문자열에 “다음 줄 넘기기(line feed) 기호”인 \\n를 넣어야 한다.\n\nprint(\"한 줄 쓰고\\n그 다음 줄을 쓴다.\")\n\n한 줄 쓰고\n그 다음 줄을 쓴다."
  },
  {
    "objectID": "02.03 파이썬으로 글자를 출력하기.html#줄을-바꾸지-않고-이어서-출력하기",
    "href": "02.03 파이썬으로 글자를 출력하기.html#줄을-바꾸지-않고-이어서-출력하기",
    "title": "2.3 파이썬으로 글자를 출력하기",
    "section": "줄을 바꾸지 않고 이어서 출력하기",
    "text": "줄을 바꾸지 않고 이어서 출력하기\n반대로 print 명령을 여러번 쓰면서 줄은 바꾸지 않고 싶다면 다음과 같이 print 명령에 end=\"\"이라는 인수를 추가한다.\n\nprint(\"한 줄 쓰고 \", end=\"\")\nprint(\"이어서 쓴다.\")\n\n한 줄 쓰고 이어서 쓴다."
  },
  {
    "objectID": "02.03 파이썬으로 글자를 출력하기.html#문자열-값을-가지는-변수",
    "href": "02.03 파이썬으로 글자를 출력하기.html#문자열-값을-가지는-변수",
    "title": "2.3 파이썬으로 글자를 출력하기",
    "section": "문자열 값을 가지는 변수",
    "text": "문자열 값을 가지는 변수\n변수에는 숫자뿐만 아니라 문자열도 넣을 수 있다.\n\nname = \"홍길동\"\nprint(\"내 이름은 \" + name + \"입니다.\")\n\n내 이름은 홍길동입니다.\n\n\n\nmark = \"$\"\nn = 20\nprint(mark + \" 기호를 \" + str(n) + \"번 출력합니다.\")\nprint(mark * n)\n\n$ 기호를 20번 출력합니다.\n$$$$$$$$$$$$$$$$$$$$"
  },
  {
    "objectID": "02.03 파이썬으로 글자를 출력하기.html#따옴표를-출력하기",
    "href": "02.03 파이썬으로 글자를 출력하기.html#따옴표를-출력하기",
    "title": "2.3 파이썬으로 글자를 출력하기",
    "section": "따옴표를 출력하기",
    "text": "따옴표를 출력하기\n파이썬에서 두 가지 종류의 다른 따옴표를 쓸 수 있는 이유는 문자열이 따옴표를 포함하는 경우가 있기 때문이다. 만약 따옴표로 둘러싸인 문자열에 따옴표가 포함되어 있다면 파이썬은 그 부분에서 문자열이 끝난다고 인식하여 오류가 발생한다. 이처럼 문자열 안에 큰따옴표가 있어야 할 때는 전체 문자열을 작은따옴표로 둘러싸면 된다.\n\nprint('둘리가 \"호이!\"하고 말했어요.')\n\n둘리가 \"호이!\"하고 말했어요.\n\n\n반대로 문자열 안에 작은 따옴표가 있어야 할 때는 전체 문자열을 큰 따옴표로 둘러싼다.\n\nprint(\"둘리가 '이제 어디로 가지?'하고 생각했어요.\")\n\n둘리가 '이제 어디로 가지?'하고 생각했어요."
  },
  {
    "objectID": "02.03 파이썬으로 글자를 출력하기.html#여러-줄의-문자열-출력하기",
    "href": "02.03 파이썬으로 글자를 출력하기.html#여러-줄의-문자열-출력하기",
    "title": "2.3 파이썬으로 글자를 출력하기",
    "section": "여러 줄의 문자열 출력하기",
    "text": "여러 줄의 문자열 출력하기\n파이썬에서 여러 줄의 문자열을 출력하거나 변수에 할당하려면, \"문자\" 나 '문자' 대신 \"\"\" 여러 줄의 문자열 \"\"\" 혹은 '''여러 줄의 문자열''' 을 사용하면 된다.\n\nmulti_line_string = \"\"\"\n파이썬(영어: Python)은 1991년 프로그래머인 \n귀도 반 로섬(Guido van Rossum)이 발표한 고급 프로그래밍 언어로,\n플랫폼 독립적이며 인터프리터식, 객체지향적, 동적 타이핑(dynamically typed) \n대화형 언어이다. 파이썬이라는 이름은 귀도가 좋아하는 코미디 〈Monty Python's Flying \nCircus〉에서 따온 것이다.\"\"\"\n\nprint(multi_line_string)\n\n\n파이썬(영어: Python)은 1991년 프로그래머인 \n귀도 반 로섬(Guido van Rossum)이 발표한 고급 프로그래밍 언어로,\n플랫폼 독립적이며 인터프리터식, 객체지향적, 동적 타이핑(dynamically typed) \n대화형 언어이다. 파이썬이라는 이름은 귀도가 좋아하는 코미디 〈Monty Python's Flying \nCircus〉에서 따온 것이다.\n\n\n````vaxavswnowai 연습 문제 2.3.1\n\n다음 문장을 출력해 본다.\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\n\n문자열 변수 하나, 정수형 변수 하나 그리고 문자열의 덧셈과 곱셈 연산을 사용하여 다음 문자열을 출력한다.\n\n@@@@@@\n@    @\n@    @\n@    @\n@@@@@@\n\n## 문자열 치환\n\n문자열에서 특정 문자를 다른 문자로 바꾸려면 `replace` 메서드를 사용한다.\n\n::: {#cell-36 .cell execution_count=1}\n``` {.python .cell-code}\n\"2020.10.23\".replace(\".\", \"-\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'2020-10-23'\n```\n:::\n:::\n\n\n문자열의 공백을 없애려면 `\" \"` 공백 문자열을 `\"\"` 빈 문자열로 바꾸면 된다.\n\n::: {#cell-38 .cell execution_count=2}\n``` {.python .cell-code}\n\"word with space\".replace(\" \", \"\")\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'wordwithspace'\n```\n:::\n:::\n\n\n````{admonition} 연습 문제 2.3.2\n\n다음 문자열을\n\n```\n\"2020-12-25\"\n```\n\n다음과 같이 바꾸어라.\n```\n\"20201225\"\n```"
  },
  {
    "objectID": "02.05 파이썬 조건문 기초.html",
    "href": "02.05 파이썬 조건문 기초.html",
    "title": "2.5 파이썬 조건문 기초",
    "section": "",
    "text": "`if ~ else`\nif ~ else 명령을 사용하면 조건에 따라 다른 명령을 수행할 수 있다. if ~ else 명령은 다음과 같이 만든다.\nif 참 또는 거짓을 가지는 값:\n    조건이 참일 때 실행되는 명령들\nelse:\n    조건이 거짓일 때 실행되는 명령들\n조건(condition)\n“참 또는 거짓을 가지는 값”은 조건(condition)이라고 부른다. 예를 들어, 어떤 수가 짝수인지 홀수인지는 알려주는 조건은 그 수를 2로 나눈 나머지가 0인가 아닌가이다.\n들여쓰기(indentation)\n참 또는 거짓일 때 실행되는 명령들은 빈칸을 4칸 띄우고 써야 한다. 이를 들여쓰기(indentation)라고 한다.\n\na = 1\n\nif a % 2 == 0:\n    print(\"짝수\")\nelse:\n    print(\"홀수\")\n\n홀수\n\n\n만약 어떤 수가 2자리 수의 짝수인지 알고 싶다면 다음과 같이 조건문을 사용한다.\n\nb = 55\n\nif (b &gt;= 10) & (b &lt; 100) & (b % 2 == 0):\n    print(\"2자리 수의 짝수이다.\")\nelse:\n    print(\"2자리 수의 짝수가 아니다.\")\n\n2자리 수의 짝수가 아니다.\n\n\n```dwvnnpgmlens 연습 문제 2.5.1\n\na 를 짝수로 하여 위의 코드를 다시 실행한다.\nb 를 다른 수로 하여 위의 코드를 다시 실행한다.\n\n\n```{admonition} 연습 문제 2.5.2\n\n변수 y의 값이 윤년이면 \"윤년입니다\"를 출력하고 아니라면 \"윤년이 아닙니다\"라고 출력하는 프로그램을 만든다. 윤년은 2월 29일이 있는 해로 다음과 같이 정해진다.\n\n* 서력 기원 연수가 4로 나누어 떨어지는 해는 윤년으로 한다(2004년, 2008년, 2012년, 2016년, 2020년, 2024년, …). \n* 이 중에서 100으로 나누어 떨어지는 해는 평년으로 한다(1900년, 2100년, 2200년, 2300년, 2500년, …). \n* 이 중에서 400으로 나누어 떨어지는 해는 윤년으로 둔다(1600년, 2000년, 2400년, …)."
  },
  {
    "objectID": "02.05 파이썬 조건문 기초.html#if-else-명령",
    "href": "02.05 파이썬 조건문 기초.html#if-else-명령",
    "title": "2.5 파이썬 조건문 기초",
    "section": "",
    "text": "`if ~ else`\nif ~ else 명령을 사용하면 조건에 따라 다른 명령을 수행할 수 있다. if ~ else 명령은 다음과 같이 만든다.\nif 참 또는 거짓을 가지는 값:\n    조건이 참일 때 실행되는 명령들\nelse:\n    조건이 거짓일 때 실행되는 명령들\n조건(condition)\n“참 또는 거짓을 가지는 값”은 조건(condition)이라고 부른다. 예를 들어, 어떤 수가 짝수인지 홀수인지는 알려주는 조건은 그 수를 2로 나눈 나머지가 0인가 아닌가이다.\n들여쓰기(indentation)\n참 또는 거짓일 때 실행되는 명령들은 빈칸을 4칸 띄우고 써야 한다. 이를 들여쓰기(indentation)라고 한다.\n\na = 1\n\nif a % 2 == 0:\n    print(\"짝수\")\nelse:\n    print(\"홀수\")\n\n홀수\n\n\n만약 어떤 수가 2자리 수의 짝수인지 알고 싶다면 다음과 같이 조건문을 사용한다.\n\nb = 55\n\nif (b &gt;= 10) & (b &lt; 100) & (b % 2 == 0):\n    print(\"2자리 수의 짝수이다.\")\nelse:\n    print(\"2자리 수의 짝수가 아니다.\")\n\n2자리 수의 짝수가 아니다.\n\n\n```dwvnnpgmlens 연습 문제 2.5.1\n\na 를 짝수로 하여 위의 코드를 다시 실행한다.\nb 를 다른 수로 하여 위의 코드를 다시 실행한다.\n\n\n```{admonition} 연습 문제 2.5.2\n\n변수 y의 값이 윤년이면 \"윤년입니다\"를 출력하고 아니라면 \"윤년이 아닙니다\"라고 출력하는 프로그램을 만든다. 윤년은 2월 29일이 있는 해로 다음과 같이 정해진다.\n\n* 서력 기원 연수가 4로 나누어 떨어지는 해는 윤년으로 한다(2004년, 2008년, 2012년, 2016년, 2020년, 2024년, …). \n* 이 중에서 100으로 나누어 떨어지는 해는 평년으로 한다(1900년, 2100년, 2200년, 2300년, 2500년, …). \n* 이 중에서 400으로 나누어 떨어지는 해는 윤년으로 둔다(1600년, 2000년, 2400년, …)."
  },
  {
    "objectID": "02.05 파이썬 조건문 기초.html#if-elif-else-명령",
    "href": "02.05 파이썬 조건문 기초.html#if-elif-else-명령",
    "title": "2.5 파이썬 조건문 기초",
    "section": "if ~ elif ~ else 명령",
    "text": "if ~ elif ~ else 명령\n`if ~ elif ~ else`\n조건으로 나누어야 할 경우의 수가 두 가지가 아니라 여러 가지일 때는 다음과 같이 if ~ elif ~ else 명령을 사용할 수 있다.\nif 조건1:\n    조건1이 참일 때 실행되는 명령\nelif 조건2:\n    조건1이 거짓이고 조건2가 참일 때 실행되는 명령\nelif 조건3:\n    조건1과 조건2가 거짓이고 조건3가 참일 때 실행되는 명령\n\n...(생략)...\n\n\nelse:\n    지금까지의 어떤 조건도 참이 아니면 실행되는 명령\n만약 10문제를 보는 시험에서 8개 이상을 맞으면 성적이 “A”, 8개 미만이고 5개 이상을 맞으면 “B”, ” 5개 미만을 맞으면 “C”가 된다면 점수는 다음과 같이 계산할 수 있다.\n\nc = 6\n\nif c &gt;= 8:\n    print(\"A\")\nelif c &gt;= 5:\n    print(\"B\")\nelse:\n    print(\"C\")\n\nB\n\n\n```dwvnnpgmlens 연습 문제 2.5.3\n위의 시험 성적 예제에서 c를 다른 수로 하여 다시 실행한다.\n\n```{admonition} 연습 문제 2.5.4\n\n어떤 농장에서는 수박이 10kg이 넘으면 1등급, 그렇지 않고 7kg이 넘으면 2등급,, 그렇지 않고 4kg이 넘으면 3등급, 나머지는 4등급을 준다고 한다. 이 수박의 등급을 정하는 파이썬 코드를 작성한다."
  },
  {
    "objectID": "02.05 파이썬 조건문 기초.html#중첩-조건문",
    "href": "02.05 파이썬 조건문 기초.html#중첩-조건문",
    "title": "2.5 파이썬 조건문 기초",
    "section": "중첩 조건문",
    "text": "중첩 조건문\n중첩(nesting)\n때로는 조건문 안에 조건문이 포함된 형태도 있다. 이러한 형태를 중첩(nesting)이라고 한다. 조건문 내부에 다시 조건문을 중첩하면 4칸을 더 들여써야 한다.\nif 조건1:\n    조건1이 참일 때 실행되는 명령\n    if 조건2:\n        조건1과 조건2가 모두 참일 때 실행되는 명령\n    else:\n        조건1은 참이고 조건2는 거짓일 때 실행되는 명령\nelse:\n    조건1이 거짓일 때 실행되는 명령\n예를 들어 중학교에서 팔굽혀펴기 시험을 보는데 남자는 10번 이상을 해야 합격(Pass)이고 아니면 불합격(Fail)이다. 여자는 5번 이상을 해야 합격이라면 다음과 같이 프로그램을 만들 수 있다.\n\nsex = \"boy\"\npushup = 8\n\nif sex == \"boy\":\n    if pushup &gt;= 10:\n        grade = \"Pass\"\n    else:\n        grade = \"Fail\"\nelse:\n    if pushup &gt;= 10:\n        grade = \"Pass\"\n    else:\n        grade = \"Fail\"\n\nprint(grade)\n\nFail\n\n\n```dwvnnpgmlens 연습 문제 2.5.5\n죄수의 딜레마는 게임 이론의 유명한 사례이다\n\nhttps://ko.wikipedia.org/wiki/죄수의_딜레마\n\n두 명의 범죄자 A, B가 체포되어 서로 다른 취조실에서 격리되어 심문을 받고 있다. 이들에게 자백 여부에 따라 다음의 선택이 가능하다.\n\n둘 중 하나가 배신하여 죄를 자백하면 자백한 사람은 즉시 풀어주고 나머지 한 명이 10년을 복역해야 한다.\n둘 모두 서로를 배신하여 죄를 자백하면 둘 다 5년을 복역한다.\n둘 모두 죄를 자백하지 않으면 둘 다 1년을 복역한다.\n\n죄수를 나타내는 변수 XA, XB는 자백하면 True, 그렇지 않으면 False를 가지는 값이다. 이때 변수 XA, XB 값에 따라 각각이 복역해야 하는 연 수를 변수 YA, YB라고 할 때 YA, YB를 계산하는 프로그램을 만든다. ```"
  },
  {
    "objectID": "02.07 파이썬 for 반복문.html",
    "href": "02.07 파이썬 for 반복문.html",
    "title": "2.7 파이썬 for 반복문",
    "section": "",
    "text": "다음과 같이 문자열을 반복해서 출력해야 하는 경우를 생각해보자.\nprint(\"=1=\")\nprint(\"=2=\")\nprint(\"=3=\")\nprint(\"=4=\")\nprint(\"=5=\")\nprint(\"=6=\")\nprint(\"=7=\")\nprint(\"=8=\")\nprint(\"=9=\")\n\n=1=\n=2=\n=3=\n=4=\n=5=\n=6=\n=7=\n=8=\n=9="
  },
  {
    "objectID": "02.07 파이썬 for 반복문.html#for-반복문",
    "href": "02.07 파이썬 for 반복문.html#for-반복문",
    "title": "2.7 파이썬 for 반복문",
    "section": "for 반복문",
    "text": "for 반복문\n`for`\n파이썬에서는 이렇게 명령이 반복될 수 있게 하는 for 반복문(loop)을 사용할 수 있다. for 반복문은 다음과 같이 사용한다.\nfor 카운터변수 in range(반복횟수):\n    반복해서 실행할 명령\n이 때 반복횟수는 10, 100과 같은 양의 정수이어야 한다.\n카운터 변수(counter variable)\n현재 몇 번째 반복인지를 알려주는 변수를 카운터 변수(counter variable)이라고 한다. 카운터 변수의 이름은 아무거나 쓸 수 있다. 하지만 전문 프로그래머들은 보통 i 또는 j 라는 변수 이름을 자주 사용한다.\n\nfor i in range(10):\n    print(\"=\")\n\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n\n\n카운터 변수는 반복 실행될 때마다 현재의 실행 횟수에 해당하는 숫자가 들어가게 되는데, 가장 처음 실행할 때는 아직 한 번도 실행한 적이 없기 때문에 0이 된다.\n\nfor i in range(10):\n    print(i)\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n따라서 시작 부분에서 나타낸 프로그램은 반복문을 쓰면 다음과 같이 짧은 프로그램으로 바꿀 수 있다.\n\nfor i in range(10):\n    print(\"=\" + str(i) + \"=\")\n\n=0=\n=1=\n=2=\n=3=\n=4=\n=5=\n=6=\n=7=\n=8=\n=9=\n\n\n그런데 시작이 0이라서 우리가 원하는 결과와 달라졌다. 그래서 프로그램을 다음과 같이 고쳐야 한다.\n\nfor i in range(9):\n    print(\"=\" + str(i + 1) + \"=\")\n\n=1=\n=2=\n=3=\n=4=\n=5=\n=6=\n=7=\n=8=\n=9=\n\n\n카운터 변수는 항상 0부터 시작하므로 1부터 시작하는 것처럼 보이게 하려면 1을 더해주어야 한다. 또 1부터 9까지 9번만 실행하면 되기 때문에 반복횟수도 10이 아니라 9가 되었다.\n````ugxzlitervqc 연습 문제 2.7.1\nfor 반복문과 문자열 연산을 사용하여 다음과 같이 출력한다.\n*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n**********\n\n````{admonition} 연습 문제 2.7.2\n\n`for` 반복문과 문자열 연산을 사용하여 다음과 같이 출력한다.\n\n```\n**********\n*********\n********\n*******\n******\n*****\n****\n***\n**\n*\n```\n````ugxzlitervqc 연습 문제 2.7.3\nfor 반복문과 문자열 연산, if 조건문을 사용하여 다음과 같이 출력한다.\n*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n**********\n*********\n********\n*******\n******\n*****\n****\n***\n**\n*\n\n````{admonition} 연습 문제 2.7.4\n\n`for` 반복문과 문자열 연산, `if` 조건문을 사용하여 다음과 같이 출력한다.\n\n```\n     * \n    ***\n   *****\n  *******\n *********\n***********\n *********\n  *******\n   *****\n    ***\n     *\n```"
  },
  {
    "objectID": "02.07 파이썬 for 반복문.html#중첩-for-반복문",
    "href": "02.07 파이썬 for 반복문.html#중첩-for-반복문",
    "title": "2.7 파이썬 for 반복문",
    "section": "중첩 for 반복문",
    "text": "중첩 for 반복문\n때로는 반복문 안에서 다시 반복문을 실행해야 할 때가 있을 수 있다. 예를 들어 다음과 같이 출력해야 할 때를 생각해 보자.\n0 1 2 3 \n1 2 3 4 \n2 3 4 5 \n3 4 5 6 \n여러가지 방법이 있을 수 있지만 다음과 같이 for 반복문 안에 다시 for 반복문을 사용하는 중첩 반복문(nested loop)를 사용할 수도 있다.\n\nfor i in range(4):\n    for j in range(4):\n        print(i + j, end=\" \")\n    print()\n\n0 1 2 3 \n1 2 3 4 \n2 3 4 5 \n3 4 5 6 \n\n\n중첩 반복문을 사용할 때는 각각의 반복문에서 쓰고 있는 카운터 변수의 이름이 겹치지 않도록 주의해야 한다. 앞의 예에서는 바깥쪽 반복문의 카운터 변수는 i를 사용하였고 안쪽 반복문의 카운터 변수는 j를 사용하여 카운터 변수의 이름이 겹치지 않도록 하였다.\n경우의 수를 구하는 데도 중첩 반복문을 사용할 수 있다. 예를 들어 1부터 6까지의 눈금이 있는 주사위를 두 번 던져서 나온 숫자들은 다음과 같이 구한다.\n\nfor i in range(6):\n    n1 = i + 1\n    for j in range(6):\n        n2 = j + 1\n        print(n1, n2)\n\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n\n\n만약 주사위를 두 번 던져서 나온 숫자들의 합이 4의 배수가 되는 경우만 구해야 한다면 다음과 같이 if 조건문을 추가한다.\n\nfor i in range(6):\n    n1 = i + 1\n    for j in range(6):\n        n2 = j + 1\n        n = n1 + n2\n        if n % 4 == 0:\n            print(n1, n2)\n\n1 3\n2 2\n2 6\n3 1\n3 5\n4 4\n5 3\n6 2\n6 6\n\n\n````ugxzlitervqc 연습 문제 2.7.5\n어떤 주식의 가격은 매일 한 번 동전을 던져서 앞면이 나오면 전날 가격의 2배가 되고, 뒷면이 나오면 전날 가격의 절반이 된다. 1일에 주식의 가격이 1,024원이었을 때, 4일 주식의 가격이 나올 수 있는 경우를 모두 구한다. (힌트: for 반복문이 3개 중첩되어야 한다)\n\n````{admonition} 연습 문제 2.7.6\n\n프랑스의 수학자 페르마(Ferma)의 마지막 정리는 다음과 같다.\n\n&gt; n이 2보다 큰 자연수인 경우에, $a^n + b^n = c^n$ 이 되는 자연수 $a$, $b$, $c$는 존재하지 않는다.\n\nn이 3이고 a, b, c 가 1부터 10까지의 자연수일 때 페르마의 마지막 정리가 사실임을 중첩 반복문을 써서 보인다. (힌트: 1부터 10까지 반복되는 for 반복문이 3개 중첩되어야 한다.)"
  },
  {
    "objectID": "02.07 파이썬 for 반복문.html#카운터-변수가-변하는-경우",
    "href": "02.07 파이썬 for 반복문.html#카운터-변수가-변하는-경우",
    "title": "2.7 파이썬 for 반복문",
    "section": "카운터 변수가 변하는 경우",
    "text": "카운터 변수가 변하는 경우\n반복문에서 가장 복잡한 형태는 안쪽 반복문의 반복 횟수가 바깥쪽 반복문의 카운터 변수에 따라 변하는 상황이다. 예를 들어 1부터 5까지의 합은 다음과 같이 하나의 반복문으로 구할 수 있다.\n\nn = 5\n\nsum = 0\nfor i in range(n):\n    sum = sum + (i + 1)\nprint(sum)\n\n15\n\n\n1부터 1까지의 합, 1부터 2까지의 합, 1부터 3까지의 합, 이런 식으로 1부터 10까지의 합을 모두 구해야 한다면 반복문을 다음과 같이 중첩해야 한다.\n\nfor j in range(10):\n    sum = 0\n    for i in range(j + 1):\n        sum = sum + (i + 1)\n    print(sum)\n\n1\n3\n6\n10\n15\n21\n28\n36\n45\n55\n\n\n````ugxzlitervqc 연습 문제 2.7.7\n다음과 같은 수열이 있을 경우에 \\(n\\)번째 수열의 값을 구한다.\n\\[\n1\n\\]\n\\[\n1 + (1 + 2)\n\\]\n\\[\n1 + (1 + 2) + (1 + 2 + 3)\n\\]\n\\[\n1 + (1 + 2) + (1 + 2 + 3) + (1 + 2 + 3 + 4)\n\\]\n\\[ \\vdots \\] \\[\n1 + (1 + 2) + (1 + 2 + 3) + (1 + 2 + 3 + 4) + \\cdots + (1 + \\cdots + n)\n\\] ````"
  },
  {
    "objectID": "02.09 파이썬에서 리스트 자료형 다루기.html",
    "href": "02.09 파이썬에서 리스트 자료형 다루기.html",
    "title": "2.9 파이썬에서 리스트 자료형 다루기",
    "section": "",
    "text": "`len`\n리스트 변수에 자료가 몇 개 들어가 있는지 알기 위해서는 len이라는 명령을 사용한다.\n\na = [1, 2, 3]\n\n\nlen(a)\n\n3"
  },
  {
    "objectID": "02.09 파이썬에서 리스트 자료형 다루기.html#자료의-개수",
    "href": "02.09 파이썬에서 리스트 자료형 다루기.html#자료의-개수",
    "title": "2.9 파이썬에서 리스트 자료형 다루기",
    "section": "",
    "text": "`len`\n리스트 변수에 자료가 몇 개 들어가 있는지 알기 위해서는 len이라는 명령을 사용한다.\n\na = [1, 2, 3]\n\n\nlen(a)\n\n3"
  },
  {
    "objectID": "02.09 파이썬에서 리스트 자료형 다루기.html#수열-생성하기",
    "href": "02.09 파이썬에서 리스트 자료형 다루기.html#수열-생성하기",
    "title": "2.9 파이썬에서 리스트 자료형 다루기",
    "section": "수열 생성하기",
    "text": "수열 생성하기\n`range`\n0부터 n-1까지 1씩 증가하는 n개의 숫자를 가지는 수열 리스트는 range 명령으로 생성한다. 파이썬 버전 2에서는 range 명령만 쓰면 되지만 파이썬 버전 3에서는 range 명령으로 만들어진 값을 list 명령을 사용하여 명시적으로 리스트로 바꾸어야 한다.\n\nb = list(range(10))\nb\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n만약 0이 아닌 다른 수부터 증가하게 하려면 다음과 같이 range 명령에 두 개의 숫자를 넣는다. range 명령은 두 숫자 x, y 에 대해 x보다 같거나 크고(이상), y보다 작은(미만) 수열을 만든다. 즉 x는 시작값(start), y는 포함되지 않는 끝값(end) 역할을 한다.\n\nc = list(range(1, 10))\nc\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n만약 1씩 증가하는 것이 아니라 2 혹은 3씩 증가하는 수열을 만들고 싶다면 range 명령에 세 개의 숫자를 넣는다. 세번째 숫자는 건너 뛰기 숫자(step) 역할을 한다.\n\nd = list(range(1, 10, 3))\nd\n\n[1, 4, 7]"
  },
  {
    "objectID": "02.09 파이썬에서 리스트 자료형 다루기.html#값을-바꾸기",
    "href": "02.09 파이썬에서 리스트 자료형 다루기.html#값을-바꾸기",
    "title": "2.9 파이썬에서 리스트 자료형 다루기",
    "section": "값을 바꾸기",
    "text": "값을 바꾸기\n특정한 원소의 값을 다른 값으로 바꾸는 것을 갱신(update)이라고 한다. 리스트에서 특정 원소의 값을 갱신하려면 다음과 같이 인덱싱한 값에 새로운 값을 대입하면 된다.\n\nd[0] = 100\nd\n\n[100, 4, 7]"
  },
  {
    "objectID": "02.09 파이썬에서 리스트 자료형 다루기.html#자료-추가하기",
    "href": "02.09 파이썬에서 리스트 자료형 다루기.html#자료-추가하기",
    "title": "2.9 파이썬에서 리스트 자료형 다루기",
    "section": "자료 추가하기",
    "text": "자료 추가하기\n`append`\n메서드(method)\n리스트 변수의 마지막에 자료를 더 추가하려면 다음과 같이 append 메서드를 사용한다. 이 때 메서드(method)란 변수 다음에 점(.)을 찍고 쓰는 명령을 말한다.\n\ne = list(range(4))\ne\n\n[0, 1, 2, 3]\n\n\n\ne.append(4)\ne\n\n[0, 1, 2, 3, 4]\n\n\n\ne.append(10)\ne\n\n[0, 1, 2, 3, 4, 10]"
  },
  {
    "objectID": "02.09 파이썬에서 리스트 자료형 다루기.html#자료-삭제하기",
    "href": "02.09 파이썬에서 리스트 자료형 다루기.html#자료-삭제하기",
    "title": "2.9 파이썬에서 리스트 자료형 다루기",
    "section": "자료 삭제하기",
    "text": "자료 삭제하기\n`del`\n리스트에서 자료를 하나 삭제하려면 다음과 같이 del 명령을 사용한다.\n\nf = list(range(5))\nf\n\n[0, 1, 2, 3, 4]\n\n\n\nf[0]\n\n0\n\n\n\ndel f[0]\nf\n\n[1, 2, 3, 4]\n\n\n\nf[2]\n\n3\n\n\n\ndel f[2]\nf\n\n[1, 2, 4]"
  },
  {
    "objectID": "02.09 파이썬에서 리스트 자료형 다루기.html#슬라이싱",
    "href": "02.09 파이썬에서 리스트 자료형 다루기.html#슬라이싱",
    "title": "2.9 파이썬에서 리스트 자료형 다루기",
    "section": "슬라이싱",
    "text": "슬라이싱\n슬라이싱(slicing)\n리스트에서 자료를 하나만 가져오는 것이 아니라 특정 범위의 자료를 모두 가져오고 싶다면 슬라이싱(slicing)이라는 방법을 사용한다. 슬라이싱은 콜론(:) 기호를 사용하여 리스트의 자료 범위를 나타내는 연산이다. 예를 들어 20개의 숫자가 있는 리스트에서 앞의 5개만 가져오고 싶으면 다음과 같이 입력한다.\n\ng = list(range(20))\ng\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n\n\n\ng[0:5]\n\n[0, 1, 2, 3, 4]\n\n\n이 때 앞의 0이라는 숫자는 생략할 수 있다.\n\ng[:5]\n\n[0, 1, 2, 3, 4]\n\n\n만약 11 번째에서 15번째까지의 자료라면 다음과 같다.\n\ng[10:15]\n\n[10, 11, 12, 13, 14]"
  },
  {
    "objectID": "02.09 파이썬에서 리스트 자료형 다루기.html#역-인덱싱음수-인덱싱",
    "href": "02.09 파이썬에서 리스트 자료형 다루기.html#역-인덱싱음수-인덱싱",
    "title": "2.9 파이썬에서 리스트 자료형 다루기",
    "section": "역 인덱싱(음수 인덱싱)",
    "text": "역 인덱싱(음수 인덱싱)\n역 인덱싱(음수 인덱싱)\n음수 인덱스를 사용하면 뒤에서부터 원소를 가리키게 된다. 이때 가장 뒤의 원소는 0이 아니라 -1 이라는 인덱스를 사용한다.\n\ng[-1]\n\n19\n\n\n음수 인덱스를 사용할 때도 슬라이싱을 할 수 있다. 두 번째 인덱스가 생략되면 끝까지를 의미한다(-1을 쓸 때와 다르다).\n\ng[-5:-2]\n\n[15, 16, 17]\n\n\n\ng[-3:]\n\n[17, 18, 19]\n\n\n\ng[-3:-1]\n\n[17, 18]\n\n\n```mznhukjnwcmy 연습 문제 2.9.1\n\n리스트에는 숫자 뿐 아니라 문자 등 어떤 값도 넣을 수 있다. 10명으로 이루어진 반의 학생 이름을 생각하여 리스트 변수로 만들어 본다.\n전학생이 왔다고 가정하여 리스트에 이름을 추가한다.\n한 명이 전학을 갔다고 가정하고 리스트에서 이름을 삭제한다.\n슬라이싱으로 5번 학생(1번 학생은 가장 처음에 있는 학생이다.)부터 9번 학생까지 5명의 이름을 담은 새로운 리스트를 만든다.\n\n\n## 복수 할당\n\n\n```{margin}\n복수 할당\n리스트의 각 원소값을 여러개의 변수에 나누어 넣고 싶을 때는 쉼표를 사용한 복수 할당(multiple/unpack assignment)을 사용한다. 할당 기호의 왼쪽에 쉼표로 구분된 변수를 여러개 넣으면 오른쪽에 있는 리스트의 각 원소값이 들어간다.\n\nh = [1, 2, 3]\nh1, h2, h3 = h\n\n\nh1\n\n1\n\n\n\nh2\n\n2\n\n\n\nh3\n\n3\n\n\n단 복수 할당을 할 때는 값이 들어갈 변수의 개수와 리스트의 길이가 같아야 한다. 그렇지 않으면 오류가 발생한다.\n\nh1, h2 = h\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-5-78eb5c6f0f34&gt; in &lt;module&gt;\n----&gt; 1 h1, h2 = h\n\nValueError: too many values to unpack (expected 2)"
  },
  {
    "objectID": "02.11 파이썬에서 딕셔너리 자료형 다루기.html",
    "href": "02.11 파이썬에서 딕셔너리 자료형 다루기.html",
    "title": "2.11 파이썬에서 딕셔너리 자료형 다루기",
    "section": "",
    "text": "리스트 자료형과 마찬가지로 딕셔너리 자료형의 원소의 개수도 len 명령으로 구할 수 있다.\n\nx = {\"a\": 10, \"b\": 20}\n\n\nlen(x)\n\n2"
  },
  {
    "objectID": "02.11 파이썬에서 딕셔너리 자료형 다루기.html#자료의-개수",
    "href": "02.11 파이썬에서 딕셔너리 자료형 다루기.html#자료의-개수",
    "title": "2.11 파이썬에서 딕셔너리 자료형 다루기",
    "section": "",
    "text": "리스트 자료형과 마찬가지로 딕셔너리 자료형의 원소의 개수도 len 명령으로 구할 수 있다.\n\nx = {\"a\": 10, \"b\": 20}\n\n\nlen(x)\n\n2"
  },
  {
    "objectID": "02.11 파이썬에서 딕셔너리 자료형 다루기.html#자료의-갱신-추가-삭제",
    "href": "02.11 파이썬에서 딕셔너리 자료형 다루기.html#자료의-갱신-추가-삭제",
    "title": "2.11 파이썬에서 딕셔너리 자료형 다루기",
    "section": "자료의 갱신, 추가, 삭제",
    "text": "자료의 갱신, 추가, 삭제\n딕셔너리 자료에서 특정한 키 값을 다른 값으로 바꾸려면 인덱싱 결과에 바꾸고자 하는 값을 대입한다.\n\nx[\"a\"]\n\n10\n\n\n\nx[\"a\"] = 30\n\n\nx\n\n{'a': 30, 'b': 20}\n\n\n딕셔너리 자료에 새로운 키와 이에 대응하는 값을 추가하려면 현재는 자료 갱신과 마찬가지로 인덱싱 결과에 값을 대입한다. 다만 이 때는 현재 존재하지 않는 키를 인덱스로 사용한다.\n\nx[\"c\"] = 40\n\n\nx\n\n{'a': 30, 'b': 20, 'c': 40}\n\n\n특정한 키와 이에 해당하는 값을 없애려면 del 명령을 사용한다.\n\ndel x[\"b\"]\n\n\nx\n\n{'a': 30, 'c': 40}"
  },
  {
    "objectID": "02.11 파이썬에서 딕셔너리 자료형 다루기.html#키-확인",
    "href": "02.11 파이썬에서 딕셔너리 자료형 다루기.html#키-확인",
    "title": "2.11 파이썬에서 딕셔너리 자료형 다루기",
    "section": "키 확인",
    "text": "키 확인\n`in`\n딕셔너리 자료에 특정한 키가 있는지 없는지 알기 위해서는 in 명령을 사용한다. 만약 해당 키가 존재하면 True를, 존재하지 않으면 False를 반환한다.\n\n\"a\" in x\n\nTrue\n\n\n\n\"d\" in x\n\nFalse"
  },
  {
    "objectID": "02.11 파이썬에서 딕셔너리 자료형 다루기.html#딕셔너리-자료형의-반복",
    "href": "02.11 파이썬에서 딕셔너리 자료형 다루기.html#딕셔너리-자료형의-반복",
    "title": "2.11 파이썬에서 딕셔너리 자료형 다루기",
    "section": "딕셔너리 자료형의 반복",
    "text": "딕셔너리 자료형의 반복\n리스트 자료형처럼 딕셔너리 자료형에 있는 데이터도 for 반복문에 넣을 수 있다. 이 때 딕셔너리 자료형은 내부적으로 자료의 순서를 보장하지 않으므로 특정한 순서로 반복될 것을 기대하면 안된다는 점에 주의한다.\nfor 반복문에서 딕셔너리 자료형을 사용하는 방법에는 다음 세가지가 있다.\n\n키만 반복하는 경우\n값만 반복하는 경우\n키와 값 쌍을 반복하는 경우\n\n\n딕셔너리 자료형의 키 반복\n딕셔너리 자료의 키를 반복하려면 리스트와 마찬가지로 for 반복문의 in 다음에 딕셔너리 자료형 변수를 넣으면 된다.\n\nfor k in x:\n    print(k)\n\na\nc\n\n\n`keys`\nkeys 메서드는 딕셔너리 자료의 키 목록을 리스트로 반환하므로 반복문에 이를 사용할 수도 있다.\n\nx.keys()\n\ndict_keys(['a', 'c'])\n\n\n\nfor k in x.keys():\n    print(k)\n\na\nc\n\n\n\n\n딕셔너리 자료형의 값 반복\n`values`\n딕셔너리 자료의 키를 반복하려면 딕셔너리 자료의 값 목록을 리스트로 반환하는 values 메서드를 사용한다.\n\nx.values()\n\ndict_values([30, 40])\n\n\n\nfor v in x.values():\n    print(v)\n\n30\n40\n\n\n\n\n딕셔너리 자료형의 키와 값의 쌍 반복\n`items`\n딕셔너리 자료의 키와 값을 쌍으로 하여 반복하려면 items 메서드를 사용한다. 이 때 for 다음의 카운터 변수를 다음과 같이 두 개 지정해야 한다. 첫번째 카운터 변수에는 키가, 두번째 카운터 변수에는 값이 들어가게 된다.\n\nfor k, v in x.items():\n    print(\"key [%s] =&gt; value [%d]\" % (k, v))\n\nkey [a] =&gt; value [30]\nkey [c] =&gt; value [40]\n\n\n````rzuwihsaxbdt 연습 문제 2.11.1\n딕셔너리에 저장된 자료가 다음과 같다.\ndata = {\n    \"철수\": 98,\n    \"영희\": 80,\n    \"순이\": 100,\n    \"돌이\": 70,\n}\nfor문을 사용하여 다음과 같이 출력하는 코드를 만들어라.\n철수        98\n영희        80\n순이       100\n돌이        70\n================\n평균        87\n````"
  },
  {
    "objectID": "02.13 파이썬 패키지 사용하기.html",
    "href": "02.13 파이썬 패키지 사용하기.html",
    "title": "2.13 파이썬 패키지 사용하기",
    "section": "",
    "text": "임포트(import)\n패키지가 설치되어 있다고 바로 파이썬에서 사용할 수 있는 것은 아니다. 패키지를 사용하려면 해당 패키지를 파이썬에서 사용할 수 있도록 설정하는 명령을 실행해야 한다. 파이썬에서 패키지를 사용하도록 설정하는 것을 패키지 임포트(import)라고 한다. 패키지를 임포트하려면 다음 명령을 실행한다.\nimport 패키지이름\n이 때 주의할 점은 임포트할 때 사용하는 패키지 이름은 일반적으로 부르는 패키지 이름과 다를 수 있다. 예를 들어 Scikit-Learn 패키지는 sklearn이라는 이름으로 임포트해야 한다.\n패키지 이름은 추후 패키지 안의 함수들을 사용할 때 계속 쓰인다. 그래서 패키지 이름이 너무 길면 import ~ as ~ 명령을 사용하여 짧은 패키지 별명을 사용할 수도 있다.\nimport 패키지이름 as 패키지별명\n예를 들어 Scikit-Learn 은 보통 sk라는 별명으로 임포트한다.\n\nimport sklearn as sk"
  },
  {
    "objectID": "02.13 파이썬 패키지 사용하기.html#패키지-임포트",
    "href": "02.13 파이썬 패키지 사용하기.html#패키지-임포트",
    "title": "2.13 파이썬 패키지 사용하기",
    "section": "",
    "text": "임포트(import)\n패키지가 설치되어 있다고 바로 파이썬에서 사용할 수 있는 것은 아니다. 패키지를 사용하려면 해당 패키지를 파이썬에서 사용할 수 있도록 설정하는 명령을 실행해야 한다. 파이썬에서 패키지를 사용하도록 설정하는 것을 패키지 임포트(import)라고 한다. 패키지를 임포트하려면 다음 명령을 실행한다.\nimport 패키지이름\n이 때 주의할 점은 임포트할 때 사용하는 패키지 이름은 일반적으로 부르는 패키지 이름과 다를 수 있다. 예를 들어 Scikit-Learn 패키지는 sklearn이라는 이름으로 임포트해야 한다.\n패키지 이름은 추후 패키지 안의 함수들을 사용할 때 계속 쓰인다. 그래서 패키지 이름이 너무 길면 import ~ as ~ 명령을 사용하여 짧은 패키지 별명을 사용할 수도 있다.\nimport 패키지이름 as 패키지별명\n예를 들어 Scikit-Learn 은 보통 sk라는 별명으로 임포트한다.\n\nimport sklearn as sk"
  },
  {
    "objectID": "02.13 파이썬 패키지 사용하기.html#패키지-내용-살펴보기",
    "href": "02.13 파이썬 패키지 사용하기.html#패키지-내용-살펴보기",
    "title": "2.13 파이썬 패키지 사용하기",
    "section": "패키지 내용 살펴보기",
    "text": "패키지 내용 살펴보기\n`dir`\n임포트된 패키지 안의 내용을 살펴보려면 다음 명령을 사용한다.\ndir(패키지이름 또는 패키지별명)\n예를 들어 Scikit-Learn 패키지를 sk라는 별명으로 임포트하였으면 다음처럼 패키지 안에 포함된 함수 등을 출력할 수 있다.\n\ndir(sk)\n\n['_ASSUME_FINITE',\n '__SKLEARN_SETUP__',\n '__all__',\n '__builtins__',\n '__cached__',\n '__check_build',\n '__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__path__',\n '__spec__',\n '__version__',\n '_contextmanager',\n 'base',\n 'clone',\n 'config_context',\n 'exceptions',\n 'externals',\n 'get_config',\n 'logger',\n 'logging',\n 'os',\n 're',\n 'set_config',\n 'setup_module',\n 'sys',\n 'utils',\n 'warnings']\n\n\n대부분의 패키지는 그 안에 하위 패키지를 가지고 있다. 이러한 하위 패키지 중에는 상위 패키지를 임포트할 때 자동으로 임포트되는 것도 있지만 자동으로 임포트되지 않는 것도 있다. 자동으로 임포트되지 않는 하위 패키지는 다음처럼 수동으로 임포트 해야 한다.\n\nimport sklearn.preprocessing\n\n\ndir(sklearn.preprocessing)\n\n['Binarizer',\n 'FunctionTransformer',\n 'Imputer',\n 'KernelCenterer',\n 'LabelBinarizer',\n 'LabelEncoder',\n 'MaxAbsScaler',\n 'MinMaxScaler',\n 'MultiLabelBinarizer',\n 'Normalizer',\n 'OneHotEncoder',\n 'PolynomialFeatures',\n 'QuantileTransformer',\n 'RobustScaler',\n 'StandardScaler',\n '__all__',\n '__builtins__',\n '__cached__',\n '__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__path__',\n '__spec__',\n '_function_transformer',\n 'add_dummy_feature',\n 'binarize',\n 'data',\n 'imputation',\n 'label',\n 'label_binarize',\n 'maxabs_scale',\n 'minmax_scale',\n 'normalize',\n 'quantile_transform',\n 'robust_scale',\n 'scale']"
  },
  {
    "objectID": "02.13 파이썬 패키지 사용하기.html#패키지에-포함된-함수-등을-사용하기",
    "href": "02.13 파이썬 패키지 사용하기.html#패키지에-포함된-함수-등을-사용하기",
    "title": "2.13 파이썬 패키지 사용하기",
    "section": "패키지에 포함된 함수 등을 사용하기",
    "text": "패키지에 포함된 함수 등을 사용하기\n패키지에 포함된 함수 등을 사용할 때는 앞에 패키지 이름(import ~ as ~ 명령을 사용하였을 때는 패키지 별명)과 마침표(.)을 붙인 후 사용해야 한다. IPython이나 Jupyter 등을 사용할 때는 마침표까지만 입력하고 탭(TAB)키를 누르면 자동 완성 기능을 지원한다.\n\nimport numpy as np\nnp.arange(10)\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
  },
  {
    "objectID": "02.13 파이썬 패키지 사용하기.html#선택적-임포트",
    "href": "02.13 파이썬 패키지 사용하기.html#선택적-임포트",
    "title": "2.13 파이썬 패키지 사용하기",
    "section": "선택적 임포트",
    "text": "선택적 임포트\n선택적 임포트\n패키지를 임포트할 때 다음과 같이 특정한 명령어들만 선택적으로 임포트할 수도 있다.\nfrom 패키지이름 import 명령어\n또는\nfrom 패키지이름 import 명령어1, 명령어2, 명령어3\n선택적으로 임포트했을 때는 패키지 이름과 마침표 없이 바로 명령어를 사용할 수 있다.\n\nfrom numpy import arange\narange(10)\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n와일드 임포트\n패키지 안의 모든 명령을 선택적 임포트할 때는 명령어 이름 대신 * 기호를 사용하는데 이를 와일드 임포트(wild import)라고 한다. 와일드 임포트할 때는 뜻하지 않게 기존의 변수나 함수를 덮어 쓸 때가 있을 수 있으므로 특별한 상황이 아니면 사용하지 말아야 한다.\n예를 들어 f라는 이름의 함수를 정의한 후에 SciPy 패키지의 stats 서브패키지를 와일드 임포트하면 F 분포를 나타내는 f 명령이 새롭게 임포트되면서 기존의 함수를 없애버릴 수 있다.\n\ndef f():\n    print(\"I am f function!\")\n\n\nf()\n\nI am f function!\n\n\n\nfrom scipy.stats import *\n\n\nf()\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-10-c43e34e6d405&gt; in &lt;module&gt;()\n----&gt; 1 f()\n\n~/anaconda3/lib/python3.6/site-packages/scipy/stats/_distn_infrastructure.py in __call__(self, *args, **kwds)\n    770 \n    771     def __call__(self, *args, **kwds):\n--&gt; 772         return self.freeze(*args, **kwds)\n    773     __call__.__doc__ = freeze.__doc__\n    774 \n\n~/anaconda3/lib/python3.6/site-packages/scipy/stats/_distn_infrastructure.py in freeze(self, *args, **kwds)\n    767 \n    768         \"\"\"\n--&gt; 769         return rv_frozen(self, *args, **kwds)\n    770 \n    771     def __call__(self, *args, **kwds):\n\n~/anaconda3/lib/python3.6/site-packages/scipy/stats/_distn_infrastructure.py in __init__(self, dist, *args, **kwds)\n    435 \n    436         # a, b may be set in _argcheck, depending on *args, **kwds. Ouch.\n--&gt; 437         shapes, _, _ = self.dist._parse_args(*args, **kwds)\n    438         self.dist._argcheck(*shapes)\n    439         self.a, self.b = self.dist.a, self.dist.b\n\nTypeError: _parse_args() missing 2 required positional arguments: 'dfn' and 'dfd'"
  },
  {
    "objectID": "02.15 파이썬에서 날짜와 시간 다루기.html",
    "href": "02.15 파이썬에서 날짜와 시간 다루기.html",
    "title": "2.15 파이썬에서 날짜와 시간 다루기",
    "section": "",
    "text": "날짜와 시간은 파이썬에서 기본으로 제공하는 자료형에는 포함되어 있지 않지만 데이터 분석에 있어 빠질 수 없는 중요한 자료형이다. 여기에서는 날짜와 시간을 다루기 위한 패키지를 소개한다. 날짜 및 시간과 관련된 기능을 제공하는 패키지는 다음과 같은 것들이 있다."
  },
  {
    "objectID": "02.15 파이썬에서 날짜와 시간 다루기.html#datetime-패키지",
    "href": "02.15 파이썬에서 날짜와 시간 다루기.html#datetime-패키지",
    "title": "2.15 파이썬에서 날짜와 시간 다루기",
    "section": "datetime 패키지",
    "text": "datetime 패키지\n`datetime` 패키지\ndatetime 패키지에서는 날짜와 시간을 함께 저장하는 datetime 클래스, 날짜만 저장하는 date 클래스, 시간만 저장하는 time 클래스, 시간 구간 정보를 저장하는 timedelta 클래스 등을 제공한다.\n먼저 datetime 패키지를 다음과 같이 임포트한다.\n\nimport datetime as dt"
  },
  {
    "objectID": "02.15 파이썬에서 날짜와 시간 다루기.html#datetime-클래스",
    "href": "02.15 파이썬에서 날짜와 시간 다루기.html#datetime-클래스",
    "title": "2.15 파이썬에서 날짜와 시간 다루기",
    "section": "datetime 클래스",
    "text": "datetime 클래스\n`datetime` 클래스\n우선 datetime 클래스부터 알아보자. 패키지 이름과 클래스 이름이 datetime으로 같기 때문에 사용할 때 주의해야 한다. 또한 다른 클래스와 달리 클래스 이름이 대문자로 시작하지 않는다. datetime 클래스에는 객체를 생성하지 않고도 바로 클래스에서 사용할 수 있는 클래스 메서드라는 것을 제공한다. 가장 대표적인 것이 현재 시각을 출력하는 now() 메서드이다.\n`now` \n\nx = dt.datetime.now()\nx\n\ndatetime.datetime(2020, 10, 2, 15, 27, 4, 517207)\n\n\nnow 클래스 메서드는 컴퓨터의 현재 시각을 datetime 클래스 객체로 만들어 반환한다. datetime 클래스 객체는 다음과 같은 속성을 가진다.\n\nyear: 연도\nmonth: 월\nday: 일\nhour: 시\nminute: 분\nsecond: 초\nmicrosecond: 마이크로초(micro seconds, 백만분의 일초)\n\n\nx.year, x.month, x.day, x.hour, x.minute, x.second, x.microsecond\n\n(2020, 10, 2, 15, 27, 4, 517207)\n\n\n다음과 같은 메서드도 제공한다.\n\nweekday: 요일 반환 (0:월, 1:화, 2:수, 3:목, 4:금, 5:토, 6:일)\nstrftime: 문자열 반환\ndate: 날짜 정보만 가지는 date 클래스 객체 반환\ntime: 시간 정보만 가지는 time 클래스 객체 반환\n\n\nx.weekday()  # {0:월, 1:화, 2:수, 3:목, 4:금, 5:토, 6:일}\n\n4\n\n\n`strftime`\n이 중 특히 많이 사용되는 것이 날짜와 시간 정보를 문자열로 바꿔주는 strftime 메서드다. 이 메서드는 어떤 형식으로 문자열을 만들지 결정하는 형식 문자열을 인수로 받는다. 형식 문자열은 날짜 및 시간 지정 문자열을 포함한다. 다음은 많이 사용되는 날짜 및 시간 지정 문자열이다.\n\n\n\n날짜 및 시간 지정 문자열\n의미\n\n\n\n\n%Y\n앞의 빈자리를 0으로 채우는 4자리 연도 숫자\n\n\n%m\n앞의 빈자리를 0으로 채우는 2자리 월 숫자\n\n\n%d\n앞의 빈자리를 0으로 채우는 2자리 일 숫자\n\n\n%H\n앞의 빈자리를 0으로 채우는 24시간 형식 2자리 시간 숫자\n\n\n%M\n앞의 빈자리를 0으로 채우는 2자리 분 숫자\n\n\n%S\n앞의 빈자리를 0으로 채우는 2자리 초 숫자\n\n\n%A\n영어로 된 요일 문자열\n\n\n%B\n영어로 된 월 문자열\n\n\n\n이밖의 다른 날짜 및 시간 지정 문자열에 대해서는 다음 링크를 참조한다.\n\nhttps://docs.python.org/3.8/library/datetime.html#strftime-and-strptime-format-codes\n\n예를 들어 위에서 저장한 변수 x의 시간 정보는 다음처럼 문자열로 바꿀 수 있다.\n\nx.strftime(\"%A %d. %B %Y\")\n\n'Friday 02. October 2020'\n\n\n\nprint(x.strftime(\"%H시 %M분 %S초\"))\n\n15시 27분 04초\n\n\n`strptime`\n반대로 문자열로부터 날짜와 시간 정보를 읽어서 datetime 클래스 객체를 만들 수도 있다. 이 때는 strptime 클래스 메서드를 사용한다. 첫 번째 인수로는 날짜와 시간 정보를 가진 문자열을, 두번째 인수로는 그 문자열을 해독할 수 있는 형식 문자열을 넣는다.\n\ndt.datetime.strptime(\"2017-01-02 14:44\", \"%Y-%m-%d %H:%M\")\n\ndatetime.datetime(2017, 1, 2, 14, 44)\n\n\n````wghitztgtphj 연습 문제 2.15.1\nstrftime 메서드를 사용하여 자신의 생일을 “xxxx년 xx월 xx일 x요일”과 같은 형식으로 출력해보자.\n\n````{admonition} 연습 문제 2.15.2\n\n자신의 생일을 나타내는 datetime 클래스 객체를 만들고 오늘 자신의 만 나이를 구하라\n(힌트: YYYYMMDD 형식의 숫자를 만들고 빼기 연산을 한다.)"
  },
  {
    "objectID": "02.15 파이썬에서 날짜와 시간 다루기.html#dateutil-패키지",
    "href": "02.15 파이썬에서 날짜와 시간 다루기.html#dateutil-패키지",
    "title": "2.15 파이썬에서 날짜와 시간 다루기",
    "section": "dateutil 패키지",
    "text": "dateutil 패키지\n`dateutil` 패키지\n`parse`\nstrptime 클래스 메서드를 사용할 때는 문자열에 맞는 형식 문자열을 사용자가 제공해야 한다. 그러나 dateutil 패키지의 parse 함수를 쓰면 자동으로 형식 문자열을 찾아 datetime 클래스 객체를 만들어 준다.\n\nfrom dateutil.parser import parse\n\n\nparse('2016-04-16')\n\ndatetime.datetime(2016, 4, 16, 0, 0)\n\n\n\nparse(\"Apr 16, 2016 04:05:32 PM\")\n\ndatetime.datetime(2016, 4, 16, 16, 5, 32)\n\n\n다만 월과 일이 모두 12보다 작은 숫자일 때는 먼저 나오는 숫자를 월로 나중에 나오는 숫자를 일로 판단한다.\n\nparse('6/7/2016')\n\ndatetime.datetime(2016, 6, 7, 0, 0)"
  },
  {
    "objectID": "02.15 파이썬에서 날짜와 시간 다루기.html#날짜시간-연산",
    "href": "02.15 파이썬에서 날짜와 시간 다루기.html#날짜시간-연산",
    "title": "2.15 파이썬에서 날짜와 시간 다루기",
    "section": "날짜/시간 연산",
    "text": "날짜/시간 연산\n날짜나 시간의 간격을 구할 때는 두 개의 datetime 클래스 객체의 차이를 구한다. 이 결과는 timedelta 클래스 객체로 반환된다.\n\ndt1 = datetime.datetime(2016, 2, 19, 14)\ndt2 = datetime.datetime(2016, 1, 2, 13)\ntd = dt1 - dt2\ntd\n\ndatetime.timedelta(days=48, seconds=3600)\n\n\ntimedelta 클래스는 다음과 같은 속성과 메서드를 가진다.\n\n속성\ndays: 일수\nseconds: 초 (0 ~ 86399)\nmicroseconds: 마이크로초 (0 and 999999)\n메서드\ntotal_seconds: 모든 속성을 초단위로 모아서 변환\n\n\ntd.days, td.seconds, td.microseconds\n\n(48, 3600, 0)\n\n\n\ntd.total_seconds()\n\n4150800.0\n\n\n반대로 datetime 클래스 객체에 timedelta 클래스 객체를 더해서 새로운 시간을 구할 수도 있다.\n\nt0 = datetime.datetime(2018, 9, 1, 13)\nd = datetime.timedelta(days=90, seconds=3600)\n\n\nt0 + d\n\ndatetime.datetime(2018, 11, 30, 14, 0)\n\n\n````wghitztgtphj 연습 문제 2.15.3\n\n자신의 내년 생일까지 남은 날 수를 계산하라.\n자신의 내년 생일까지 남은 시간을 분 단위로 계산하라. ````\n\ntimedelta의 단점은 날짜와 초 단위로만 연산을 할 수 있다는 점이다. 이를 보완하기 위해 dateutil 패키지는 월 단위의 계산을 지원하는 relativedelta 클래스를 제공한다.\n예를 들어 특정일의 2달 후 날짜를 구하려면 다음과 같이 실행한다.\n\nfrom dateutil.relativedelta import relativedelta\n\nt0 + relativedelta(months=2)\n\ndatetime.datetime(2018, 11, 1, 13, 0)\n\n\n```wghitztgtphj 연습 문제 2.15.4\n\nrelativedelta를 사용하여 2000년이 윤년인지 확인하라\n2000년 2월의 마지막 날로부터 1년 후의 날짜를 계산하라.\n\n\n## `time` 패키지\n\n`time` 패키지는 실행을 잠시 멈추는 `sleep` 함수를 제공한다. `sleep` 함수에 n이라는 숫자를 인수로 주면 n초만큼 쉬었다가 다음 코드를 실행한다. \n\n::: {#cell-53 .cell execution_count=44}\n``` {.python .cell-code}\nimport time\n\nprint(1)\n\ntime.sleep(5)\n\nprint(2)\n\ntime.sleep(5)\n\nprint(3)\n\ntime.sleep(5)\n\nprint(4)\n\n1\n2\n3\n4\n\n:::\n위 코드를 실행하면 1, 2, 3, 4 이라는 숫자가 시간차를 두고 나타나는 것을 알 수 있다."
  },
  {
    "objectID": "03.01 넘파이 배열.html",
    "href": "03.01 넘파이 배열.html",
    "title": "3.1 넘파이 배열",
    "section": "",
    "text": "넘파이(NumPy)\n많은 숫자 데이터를 하나의 변수에 넣고 관리 할 때 리스트는 속도가 느리고 메모리를 많이 차지하는 단점이 있다. 배열(array)을 사용하면 적은 메모리로 많은 데이터를 빠르게 처리할 수 있다. 배열은 리스트와 비슷하지만 다음과 같은 점에서 다르다.\n파이썬은 자체적으로 배열 자료형을 제공하지 않는다. 따라서 배열을 구현한 다른 패키지를 임포트해야 한다. 파이썬에서 배열을 사용하기 위한 표준 패키지는 넘파이(NumPy)다.\n넘파이는 수치해석용 파이썬 패키지이다. 다차원의 배열 자료구조 클래스인 ndarray 클래스를 지원하며 벡터와 행렬을 사용하는 선형대수 계산에 주로 사용된다. 내부적으로는 BLAS 라이브러리와 LAPACK 라이브러리를 사용하고 있으며 C로 구현된 CPython에서만 사용할 수 있다.\n넘파이의 배열 연산은 C로 구현된 내부 반복문을 사용하기 때문에 파이썬 반복문에 비해 속도가 빠르며 벡터화 연산(vectorized operation)을 이용하여 간단한 코드로도 복잡한 선형 대수 연산을 수행할 수 있다. 또한 배열 인덱싱(array indexing)을 사용한 질의(Query) 기능을 이용하여 간단한 코드로도 복잡한 수식을 계산할 수 있다."
  },
  {
    "objectID": "03.01 넘파이 배열.html#넘파이-패키지-임포트",
    "href": "03.01 넘파이 배열.html#넘파이-패키지-임포트",
    "title": "3.1 넘파이 배열",
    "section": "넘파이 패키지 임포트",
    "text": "넘파이 패키지 임포트\n배열을 사용하기 위해서는 우선 다음과 같이 넘파이 패키지를 임포트한다. 넘파이는 np라는 이름으로 임포트하는 것이 관례이다.\n\nimport numpy as np"
  },
  {
    "objectID": "03.01 넘파이 배열.html#차원-배열-만들기",
    "href": "03.01 넘파이 배열.html#차원-배열-만들기",
    "title": "3.1 넘파이 배열",
    "section": "1차원 배열 만들기",
    "text": "1차원 배열 만들기\n`array`\n넘파이의 array 함수에 리스트를 넣으면 ndarray 클래스 객체 즉, 배열로 변환해 준다. 따라서 1 차원 배열을 만드는 방법은 다음과 같다.\n\nar = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nar\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n리스트와 비슷해 보이지만 type 명령으로 자료형을 살펴보면 ndarray임을 알 수 있다.\n\ntype(ar)\n\nnumpy.ndarray\n\n\n만들어진 ndarray 객체의 표현식(representation)을 보면 바깥쪽에 array()란 것이 붙어 있을 뿐 리스트와 동일한 구조처럼 보인다. 그러나 배열 객체와 리스트 객체는 많은 차이가 있다.\n우선 리스트 클래스 객체는 각각의 원소가 다른 자료형이 될 수 있다. 그러나 배열 객체 객체는 C언어의 배열처럼 연속적인 메모리 배치를 가지기 때문에 모든 원소가 같은 자료형이어야 한다. 이러한 제약사항이 있는 대신 원소에 대한 접근과 반복문 실행이 빨라진다."
  },
  {
    "objectID": "03.01 넘파이 배열.html#벡터화-연산",
    "href": "03.01 넘파이 배열.html#벡터화-연산",
    "title": "3.1 넘파이 배열",
    "section": "벡터화 연산",
    "text": "벡터화 연산\n벡터화 연산(vectorized operation)\n배열 객체는 배열의 각 원소에 대한 반복 연산을 하나의 명령어로 처리하는 벡터화 연산(vectorized operation)을 지원한다. 예를 들어 다음처럼 여러개의 데이터를 모두 2배 해야 하는 경우를 생각하자.\n\ndata = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nfor 반복문을 사용하면 다음과 같이 구현할 수 있다.\n\nanswer = []\nfor di in data:\n    answer.append(2 * di)\nanswer\n\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n\n하지만 벡터화 연산을 사용하면 다음과 같이 for 반복문이 없이 한번의 연산으로 할 수 있다. 계산 속도도 반복문을 사용할 때 보다 훨씬 빠르다.\n\nx = np.array(data)\nx\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\n2 * x\n\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n\n\n참고로 일반적인 리스트 객체에 정수를 곱하면 객체의 크기가 정수배 만큼으로 증가한다.\n\nL = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(2 * L)\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n벡터화 연산은 비교 연산과 논리 연산을 포함한 모든 종류의 수학 연산에 대해 적용된다. 선형 대수에 적용되는 벡터화 연산에 대해서는 나중에 보다 자세히 설명한다.\n\na = np.array([1, 2, 3])\nb = np.array([10, 20, 30])\n\n\n2 * a + b\n\narray([12, 24, 36])\n\n\n\na == 2\n\narray([False,  True, False])\n\n\n\nb &gt; 10\n\narray([False,  True,  True])\n\n\n\n(a == 2) & (b &gt; 10)\n\narray([False,  True, False])"
  },
  {
    "objectID": "03.01 넘파이 배열.html#차원-배열-만들기-1",
    "href": "03.01 넘파이 배열.html#차원-배열-만들기-1",
    "title": "3.1 넘파이 배열",
    "section": "2차원 배열 만들기",
    "text": "2차원 배열 만들기\nndarray 는 N-dimensional Array의 약자이다. 이름 그대로 1차원 배열 이외에도 2차원 배열, 3차원 배열 등의 다차원 배열 자료 구조를 지원한다. 2차원 배열은 행렬(matrix)이라고 하는데 행렬에서는 가로줄을 행(row)이라고 하고 세로줄을 열(column)이라고 부른다.\n다음과 같이 리스트의 리스트(list of list)를 이용하면 2차원 배열을 생성할 수 있다. 안쪽 리스트의 길이는 행렬의 열의 수 즉, 가로 크기가 되고 바깥쪽 리스트의 길이는 행렬의 행의 수, 즉 세로 크기가 된다. 예를 들어 2개의 행과 3개의 열을 가지는 2 x 3 배열은 다음과 같이 만든다.\n\nc = np.array([[0, 1, 2], [3, 4, 5]])  # 2 x 3 array\nc\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n2차원 배열의 행과 열의 갯수는 다음처럼 구한다.\n\n# 행의 갯수\nlen(c)\n\n2\n\n\n\n# 열의 갯수\nlen(c[0])\n\n3\n\n\n````wmfanlylobbz 연습 문제 1\n넘파이를 사용하여 다음과 같은 행렬을 만든다.\n10 20 30 40\n50 60 70 80\n\n## 3차원 배열 만들기\n\n리스트의 리스트의 리스트를 이용하면 3차원 배열도 생성할 수 있다. 크기를 나타낼 때는 가장 바깥쪽 리스트의 길이부터 가장 안쪽 리스트 길이의 순서로 표시한다. 예를 들어 2 x 3 x 4 배열은 다음과 같이 만든다.\n\n::: {#cell-43 .cell school_cell_uuid='fedd59bc2e414e72a285d8d9aee29faf' execution_count=17}\n``` {.python .cell-code}\nd = np.array([[[1, 2, 3, 4],\n               [5, 6, 7, 8],\n               [9, 10, 11, 12]],\n              [[11, 12, 13, 14],\n               [15, 16, 17, 18],\n               [19, 20, 21, 22]]])   # 2 x 3 x 4 array\n```\n:::\n\n\n3차원 배열의 깊이, 행, 열은 다음과 같이 구할 수 있다.\n\n::: {#cell-45 .cell school_cell_uuid='228226e0146340f3b4d170833fa561a5' execution_count=18}\n``` {.python .cell-code}\nlen(d), len(d[0]), len(d[0][0])\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n(2, 3, 4)\n```\n:::\n:::\n\n\n## 배열의 차원과 크기 알아내기\n\n\n```{margin}\n`ndim`\n```\n\n```{margin}\n`shape`\n```\n\n\n배열의 차원 및 크기를 구하는 더 간단한 방법은 배열의 `ndim` 속성과 `shape` 속성을 이용하는 것이다. `ndim` 속성은 배열의 차원, `shape` 속성은 배열의 크기를 반환한다.\n\n::: {#cell-50 .cell school_cell_uuid='0fb769f05ec249cf9e7d2c20941c37b9' execution_count=19}\n``` {.python .cell-code}\n# a = np.array([1, 2, 3])\nprint(a.ndim)\nprint(a.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n(3,)\n```\n:::\n:::\n\n\n::: {#cell-51 .cell school_cell_uuid='2ccbbe5bccd140a181e95e16b97799e6' execution_count=20}\n``` {.python .cell-code}\n# c = np.array([[0, 1, 2], [3, 4, 5]])\nprint(c.ndim)\nprint(c.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n(2, 3)\n```\n:::\n:::\n\n\n::: {#cell-52 .cell school_cell_uuid='ef5aa51881654bbfb1efb1d3e9b27b55' execution_count=21}\n``` {.python .cell-code}\nprint(d.ndim)\nprint(d.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n(2, 3, 4)\n```\n:::\n:::\n\n\n## 배열의 인덱싱\n\n일차원 배열의 인덱싱은 리스트의 인덱싱과 같다. \n\n::: {#cell-55 .cell school_cell_uuid='f7a6485287dc428c80fd57426c8bbffa' execution_count=22}\n``` {.python .cell-code}\na = np.array([0, 1, 2, 3, 4])\n```\n:::\n\n\n::: {#cell-56 .cell school_cell_uuid='19a6dcba1b9b4a719a192a6dd4daea0d' execution_count=23}\n``` {.python .cell-code}\na[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n2\n```\n:::\n:::\n\n\n::: {#cell-57 .cell school_cell_uuid='c34f99447c0a495aa1a5ffd62a07dd84' execution_count=24}\n``` {.python .cell-code}\na[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n4\n```\n:::\n:::\n\n\n\n```{margin}\n축(axis)\n```\n\n\n다차원 배열일 때는 다음과 같이 콤마(comma ,)를 사용하여 접근할 수 있다. 콤마로 구분된 차원을 축(axis)이라고도 한다. 그래프의 x축과 y축을 떠올리면 될 것이다.\n\n::: {#cell-60 .cell school_cell_uuid='9576398b7fcf4e4e95739ba9643f782c' execution_count=25}\n``` {.python .cell-code}\na = np.array([[0, 1, 2], [3, 4, 5]])\na\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\narray([[0, 1, 2],\n       [3, 4, 5]])\n```\n:::\n:::\n\n\n::: {#cell-61 .cell school_cell_uuid='3db29f4a615749fbbe5d95c211ff8b44' execution_count=26}\n``` {.python .cell-code}\na[0, 0]  # 첫번째 행의 첫번째 열\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n0\n```\n:::\n:::\n\n\n::: {#cell-62 .cell school_cell_uuid='5c1286972e914d98a09fed0e20443a2c' execution_count=27}\n``` {.python .cell-code}\na[0, 1]  # 첫번째 행의 두번째 열\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n1\n```\n:::\n:::\n\n\n::: {#cell-63 .cell school_cell_uuid='83fac0298f70445c9d7a65a373c4780a' execution_count=28}\n``` {.python .cell-code}\na[-1, -1]  # 마지막 행의 마지막 열\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n5\n```\n:::\n:::\n\n\n## 배열 슬라이싱\n\n배열 객체로 구현한 다차원 배열의 원소 중 복수 개를 접근하려면 일반적인 파이썬 슬라이싱(slicing)과 comma(,)를 함께 사용하면 된다.\n\n::: {#cell-66 .cell school_cell_uuid='1ea4a86c5ab34105bfaf76fb7eb56e86' execution_count=29}\n``` {.python .cell-code}\na = np.array([[0, 1, 2, 3], [4, 5, 6, 7]])\na\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n```\n:::\n:::\n\n\n::: {#cell-67 .cell school_cell_uuid='bfea4995adda4a0382bada20bc976a78' execution_count=30}\n``` {.python .cell-code}\na[0, :]  # 첫번째 행 전체\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\narray([0, 1, 2, 3])\n```\n:::\n:::\n\n\n::: {#cell-68 .cell school_cell_uuid='54129ca14dfa46acb37258649dc4fbf0' execution_count=31}\n``` {.python .cell-code}\na[:, 1]  # 두번째 열 전체\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\narray([1, 5])\n```\n:::\n:::\n\n\n::: {#cell-69 .cell school_cell_uuid='feb44b302247499eb76a58b904231483' execution_count=32}\n``` {.python .cell-code}\na[1, 1:]  # 두번째 행의 두번째 열부터 끝열까지\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\narray([5, 6, 7])\n```\n:::\n:::\n\n\n::: {#cell-70 .cell school_cell_uuid='feb44b302247499eb76a58b904231483' execution_count=33}\n``` {.python .cell-code}\na[:2, :2]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\narray([[0, 1],\n       [4, 5]])\n```\n:::\n:::\n\n\n````{admonition} 연습 문제 2\n\n다음 행렬과 같은 행렬이 있다.\n\n```\nm = np.array([[ 0,  1,  2,  3,  4],\n            [ 5,  6,  7,  8,  9],\n            [10, 11, 12, 13, 14]])\n```\n\n1. 이 행렬에서 값 7 을 인덱싱한다.\n2. 이 행렬에서 값 14 을 인덱싱한다.\n3. 이 행렬에서 배열 [6, 7] 을 슬라이싱한다.\n4. 이 행렬에서 배열 [7, 12] 을 슬라이싱한다.\n5. 이 행렬에서 배열 [[3, 4], [8, 9]] 을 슬라이싱한다."
  },
  {
    "objectID": "03.01 넘파이 배열.html#배열-인덱싱",
    "href": "03.01 넘파이 배열.html#배열-인덱싱",
    "title": "3.1 넘파이 배열",
    "section": "배열 인덱싱",
    "text": "배열 인덱싱\n배열 인덱싱(array indexing)\n넘파이 배열 객체의 또다른 강력한 기능은 팬시 인덱싱(fancy indexing)이라고도 부르는 배열 인덱싱(array indexing) 방법이다. 인덱싱이라는 이름이 붙었지만 사실은 데이터베이스의 질의(Query) 기능을 수행한다. 배열 인덱싱에서는 대괄호(Bracket, [])안의 인덱스 정보로 숫자나 슬라이스가 아니라 위치 정보를 나타내는 또 다른 ndarray 배열을 받을 수 있다. 여기에서는 이 배열을 편의상 인덱스 배열이라고 부르겠다. 배열 인덱싱의 방식에은 불리언(Boolean) 배열 방식과 정수 배열 방식 두가지가 있다.\n먼저 불리안 배열 인덱싱 방식은 인덱스 배열의 원소가 True, False 두 값으로만 구성되며 인덱스 배열의 크기가 원래 ndarray 객체의 크기와 같아야 한다.\n예를 들어 다음과 같은 1차원 ndarray에서 짝수인 원소만 골라내려면 짝수인 원소에 대응하는 인덱스 값이 True이고 홀수인 원소에 대응하는 인덱스 값이 False인 인덱스 배열을 넣으면 된다.\n\na = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nidx = np.array([True, False, True, False, True,\n               False, True, False, True, False])\na[idx]\n\narray([0, 2, 4, 6, 8])\n\n\n조건문 연산을 사용하면 다음과 같이 간단히 쓸 수 있다.\n\na % 2\n\narray([0, 1, 0, 1, 0, 1, 0, 1, 0, 1], dtype=int32)\n\n\n\na % 2 == 0\n\narray([ True, False,  True, False,  True, False,  True, False,  True,\n       False])\n\n\n\na[a % 2 == 0]\n\narray([0, 2, 4, 6, 8])\n\n\n정수 배열 인덱싱에서는 인덱스 배열의 원소 각각이 원래 ndarray 객체 원소 하나를 가리키는 인덱스 정수이여야 한다. 예를 들어 1차원 배열에서 홀수번째 원소만 골라내는 것은 다음과 같다\n\na = np.array([11, 22, 33, 44, 55, 66, 77, 88, 99])\nidx = np.array([0, 2, 4, 6, 8])\na[idx]\n\narray([11, 33, 55, 77, 99])\n\n\n이 때는 배열 인덱스의 크기가 원래의 배열 크기와 달라도 상관없다. 같은 원소를 반복해서 가리키는 경우에는 배열 인덱스가 원래의 배열보다 더 커지기도 한다.\n\na = np.array([11, 22, 33, 44, 55, 66, 77, 88, 99])\nidx = np.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2])\na[idx]\n\narray([11, 11, 11, 11, 11, 11, 22, 22, 22, 22, 22, 33, 33, 33, 33, 33])\n\n\n배열 인덱싱은 다차원 배열의 각 차원에 대해서도 할 수 있다.\n\na = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\na\n\narray([[ 1,  2,  3,  4],\n       [ 5,  6,  7,  8],\n       [ 9, 10, 11, 12]])\n\n\n\na[:, [True, False, False, True]]\n\narray([[ 1,  4],\n       [ 5,  8],\n       [ 9, 12]])\n\n\n\na[[2, 0, 1], :]\n\narray([[ 9, 10, 11, 12],\n       [ 1,  2,  3,  4],\n       [ 5,  6,  7,  8]])\n\n\n````wmfanlylobbz 연습 문제 3\n다음 행렬과 같은 배열이 있다.\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n             11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\n이 배열에서 3의 배수를 찾아라.\n이 배열에서 4로 나누면 1이 남는 수를 찾아라.\n이 배열에서 3으로 나누면 나누어지고 4로 나누면 1이 남는 수를 찾아라. ````"
  },
  {
    "objectID": "03.03 배열의 연산.html",
    "href": "03.03 배열의 연산.html",
    "title": "3.3 배열의 연산",
    "section": "",
    "text": "벡터화 연산\n앞서 넘파이가 벡터화 연산(vectorized operation)을 지원한다고 이야기하였다. 벡터화 연산을 쓰면 명시적으로 반복문을 사용하지 않고도 배열의 모든 원소에 대해 반복연산을 할 수 있다. 벡터화 연산의 또다른 장점은 선형 대수 공식과 동일한 아주 간단한 파이썬 코드를 작성할 수 있다는 점이다.\n예를 들어 선형 대수에서 두 벡터의 합은 다음과 같이 구한다.\n\\[\nx = \\begin{bmatrix}1 \\\\ 2 \\\\ 3 \\\\ \\vdots \\\\ 10000 \\end{bmatrix}, \\;\\;\\;\\;\ny = \\begin{bmatrix}10001 \\\\ 10002 \\\\ 10003 \\\\ \\vdots \\\\ 20000 \\end{bmatrix},\n\\]\n일 때, 두 벡터의 합\n\\[ z = x + y \\]\n은 다음과 같이 구한다.\n\\[\n\\begin{bmatrix}1 \\\\ 2 \\\\ 3 \\\\ \\vdots \\\\ 10000 \\end{bmatrix} +\n\\begin{bmatrix}10001 \\\\ 10002 \\\\ 10003 \\\\ \\vdots \\\\ 20000 \\end{bmatrix}\n= \\begin{bmatrix}1+10001 \\\\ 2+10002 \\\\ 3+10003 \\\\ \\vdots \\\\ 10000+20000 \\end{bmatrix}\n= \\begin{bmatrix}10002 \\\\ 10004 \\\\ 10006 \\\\ \\vdots \\\\ 30000 \\end{bmatrix}\n\\]\n`%%time`\n만약 벡터화 연산을 사용하지 않는다면 이 연산은 반복문을 사용하여 다음과 같이 만들어야 한다. 이 코드에서 %%time은 셀 코드의 실행시간을 측정하는 아이파이썬(IPython) 매직(magic) 명령이다.\n\nx = np.arange(1, 10001)\ny = np.arange(10001, 20001)\n\n\n%%time\nz = np.zeros_like(x)\nfor i in range(10000):\n    z[i] = x[i] + y[i]\n\nCPU times: user 0 ns, sys: 0 ns, total: 0 ns\nWall time: 5.84 ms\n\n\n\nz[:10]\n\narray([10002, 10004, 10006, 10008, 10010, 10012, 10014, 10016, 10018,\n       10020])\n\n\n그러나 벡터화 연산을 사용하면 덧셈 연산 하나로 끝난다. 위에서 보인 선형 대수의 벡터 기호를 사용한 연산과 결과가 완전히 동일하다. 연산 속도도 벡터화 연산이 훨씬 빠르다.\n\n%%time\nz = x + y\n\nCPU times: user 0 ns, sys: 0 ns, total: 0 ns\nWall time: 562 µs\n\n\n\nz[:10]\n\narray([10002, 10004, 10006, 10008, 10010, 10012, 10014, 10016, 10018,\n       10020])\n\n\n사칙 연산뿐 아니라 비교 연산과 같은 논리 연산도 벡터화 연산이 가능하다.\n\na = np.array([1, 2, 3, 4])\nb = np.array([4, 2, 2, 4])\n\n\na == b\n\narray([False,  True, False,  True])\n\n\n\na &gt;= b\n\narray([False,  True,  True,  True])\n\n\n만약 배열의 각 원소들을 일일히 비교하는 것이 아니라 배열의 모든 원소가 다 같은지 알고 싶다면 all 명령을 사용하면 된다.\n\na = np.array([1, 2, 3, 4])\nb = np.array([4, 2, 2, 4])\nc = np.array([1, 2, 3, 4])\n\n\nnp.all(a == b)\n\nFalse\n\n\n\nnp.all(a == c)\n\nTrue\n\n\n지수 함수, 로그 함수 등의 수학 함수도 벡터화 연산을 지원한다.\n\na = np.arange(5)\na\n\narray([0, 1, 2, 3, 4])\n\n\n\nnp.exp(a)\n\narray([ 1.        ,  2.71828183,  7.3890561 , 20.08553692, 54.59815003])\n\n\n\n10 ** a\n\narray([    1,    10,   100,  1000, 10000])\n\n\n\nnp.log(a + 1)\n\narray([0.        , 0.69314718, 1.09861229, 1.38629436, 1.60943791])"
  },
  {
    "objectID": "03.03 배열의 연산.html#벡터화-연산",
    "href": "03.03 배열의 연산.html#벡터화-연산",
    "title": "3.3 배열의 연산",
    "section": "",
    "text": "벡터화 연산\n앞서 넘파이가 벡터화 연산(vectorized operation)을 지원한다고 이야기하였다. 벡터화 연산을 쓰면 명시적으로 반복문을 사용하지 않고도 배열의 모든 원소에 대해 반복연산을 할 수 있다. 벡터화 연산의 또다른 장점은 선형 대수 공식과 동일한 아주 간단한 파이썬 코드를 작성할 수 있다는 점이다.\n예를 들어 선형 대수에서 두 벡터의 합은 다음과 같이 구한다.\n\\[\nx = \\begin{bmatrix}1 \\\\ 2 \\\\ 3 \\\\ \\vdots \\\\ 10000 \\end{bmatrix}, \\;\\;\\;\\;\ny = \\begin{bmatrix}10001 \\\\ 10002 \\\\ 10003 \\\\ \\vdots \\\\ 20000 \\end{bmatrix},\n\\]\n일 때, 두 벡터의 합\n\\[ z = x + y \\]\n은 다음과 같이 구한다.\n\\[\n\\begin{bmatrix}1 \\\\ 2 \\\\ 3 \\\\ \\vdots \\\\ 10000 \\end{bmatrix} +\n\\begin{bmatrix}10001 \\\\ 10002 \\\\ 10003 \\\\ \\vdots \\\\ 20000 \\end{bmatrix}\n= \\begin{bmatrix}1+10001 \\\\ 2+10002 \\\\ 3+10003 \\\\ \\vdots \\\\ 10000+20000 \\end{bmatrix}\n= \\begin{bmatrix}10002 \\\\ 10004 \\\\ 10006 \\\\ \\vdots \\\\ 30000 \\end{bmatrix}\n\\]\n`%%time`\n만약 벡터화 연산을 사용하지 않는다면 이 연산은 반복문을 사용하여 다음과 같이 만들어야 한다. 이 코드에서 %%time은 셀 코드의 실행시간을 측정하는 아이파이썬(IPython) 매직(magic) 명령이다.\n\nx = np.arange(1, 10001)\ny = np.arange(10001, 20001)\n\n\n%%time\nz = np.zeros_like(x)\nfor i in range(10000):\n    z[i] = x[i] + y[i]\n\nCPU times: user 0 ns, sys: 0 ns, total: 0 ns\nWall time: 5.84 ms\n\n\n\nz[:10]\n\narray([10002, 10004, 10006, 10008, 10010, 10012, 10014, 10016, 10018,\n       10020])\n\n\n그러나 벡터화 연산을 사용하면 덧셈 연산 하나로 끝난다. 위에서 보인 선형 대수의 벡터 기호를 사용한 연산과 결과가 완전히 동일하다. 연산 속도도 벡터화 연산이 훨씬 빠르다.\n\n%%time\nz = x + y\n\nCPU times: user 0 ns, sys: 0 ns, total: 0 ns\nWall time: 562 µs\n\n\n\nz[:10]\n\narray([10002, 10004, 10006, 10008, 10010, 10012, 10014, 10016, 10018,\n       10020])\n\n\n사칙 연산뿐 아니라 비교 연산과 같은 논리 연산도 벡터화 연산이 가능하다.\n\na = np.array([1, 2, 3, 4])\nb = np.array([4, 2, 2, 4])\n\n\na == b\n\narray([False,  True, False,  True])\n\n\n\na &gt;= b\n\narray([False,  True,  True,  True])\n\n\n만약 배열의 각 원소들을 일일히 비교하는 것이 아니라 배열의 모든 원소가 다 같은지 알고 싶다면 all 명령을 사용하면 된다.\n\na = np.array([1, 2, 3, 4])\nb = np.array([4, 2, 2, 4])\nc = np.array([1, 2, 3, 4])\n\n\nnp.all(a == b)\n\nFalse\n\n\n\nnp.all(a == c)\n\nTrue\n\n\n지수 함수, 로그 함수 등의 수학 함수도 벡터화 연산을 지원한다.\n\na = np.arange(5)\na\n\narray([0, 1, 2, 3, 4])\n\n\n\nnp.exp(a)\n\narray([ 1.        ,  2.71828183,  7.3890561 , 20.08553692, 54.59815003])\n\n\n\n10 ** a\n\narray([    1,    10,   100,  1000, 10000])\n\n\n\nnp.log(a + 1)\n\narray([0.        , 0.69314718, 1.09861229, 1.38629436, 1.60943791])"
  },
  {
    "objectID": "03.03 배열의 연산.html#스칼라와-벡터행렬의-곱셈",
    "href": "03.03 배열의 연산.html#스칼라와-벡터행렬의-곱셈",
    "title": "3.3 배열의 연산",
    "section": "스칼라와 벡터/행렬의 곱셈",
    "text": "스칼라와 벡터/행렬의 곱셈\n스칼라와 벡터/행렬의 곱도 선형 대수에서 사용하는 식과 넘파이 코드가 일치한다.\n\nx = np.arange(10)\nx\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\n100 * x\n\narray([  0, 100, 200, 300, 400, 500, 600, 700, 800, 900])\n\n\n\nx = np.arange(12).reshape(3, 4)\nx\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\n100 * x\n\narray([[   0,  100,  200,  300],\n       [ 400,  500,  600,  700],\n       [ 800,  900, 1000, 1100]])"
  },
  {
    "objectID": "03.03 배열의 연산.html#브로드캐스팅",
    "href": "03.03 배열의 연산.html#브로드캐스팅",
    "title": "3.3 배열의 연산",
    "section": "브로드캐스팅",
    "text": "브로드캐스팅\n브로드캐스팅\n벡터(또는 행렬)끼리 덧셈 혹은 뺄셈을 하려면 두 벡터(또는 행렬)의 크기가 같아야 한다. 넘파이에서는 서로 다른 크기를 가진 두 배열의 사칙 연산도 지원한다. 이 기능을 브로드캐스팅(broadcasting)이라고 하는데 크기가 작은 배열을 자동으로 반복 확장하여 크기가 큰 배열에 맞추는 방벙이다.\n예를 들어 다음과 같이 벡터와 스칼라를 더하는 경우를 생각하자.\n\\[\nx = \\begin{bmatrix}0 \\\\ 1 \\\\ 2 \\\\ 3 \\\\ 4 \\end{bmatrix}, \\;\\;\\;\\;\nx + 1 = \\begin{bmatrix}0 \\\\ 1 \\\\ 2 \\\\ 3 \\\\ 4 \\end{bmatrix} + 1 = ?\n\\]\n브로드캐스팅은 다음과 같이 스칼라를 벡터와 같은 크기로 확장시켜서 덧셈 계산을 하는 것이다.\n\\[\n\\begin{bmatrix}0 \\\\ 1 \\\\ 2 \\\\ 3 \\\\ 4 \\end{bmatrix} + 1 =\n\\begin{bmatrix}0 \\\\ 1 \\\\ 2 \\\\ 3 \\\\ 4 \\end{bmatrix} +  \\begin{bmatrix}1 \\\\ 1 \\\\ 1 \\\\ 1 \\\\ 1 \\end{bmatrix} =\n\\begin{bmatrix}1 \\\\ 2 \\\\ 3 \\\\ 4 \\\\ 5 \\end{bmatrix}\n\\]\n\nx = np.arange(5)\nx\n\narray([0, 1, 2, 3, 4])\n\n\n\ny = np.ones_like(x)\ny\n\narray([1, 1, 1, 1, 1])\n\n\n\nx + y\n\narray([1, 2, 3, 4, 5])\n\n\n\nx + 1\n\narray([1, 2, 3, 4, 5])\n\n\n브로드캐스팅은 다음처럼 더 차원이 높은 경우에도 적용된다.\n\\[\n\\begin{bmatrix}0 & 1 & 2 \\\\ 1 & 2 & 3 \\\\ 2 & 3 & 4 \\\\ 3 & 4 & 5 \\\\ 4 & 5 & 6 \\end{bmatrix}\n+\n\\begin{bmatrix}0 \\\\ 1 \\\\ 2 \\\\ 3 \\\\ 4 \\end{bmatrix}\n=\n\\begin{bmatrix}0 & 1 & 2 \\\\ 1 & 2 & 3 \\\\ 2 & 3 & 4 \\\\ 3 & 4 & 5 \\\\ 4 & 5 & 6 \\end{bmatrix}\n+\n\\begin{bmatrix}0 & 0 & 0 \\\\ 1 & 1 & 1 \\\\ 2 & 2 & 2 \\\\ 3 & 3 & 3 \\\\ 4 & 4 & 4 \\end{bmatrix}\n\\]\n\\[\n\\begin{bmatrix}0 & 1 & 2 \\\\ 1 & 2 & 3 \\\\ 2 & 3 & 4 \\\\ 3 & 4 & 5 \\\\ 4 & 5 & 6 \\end{bmatrix}\n+\n\\begin{bmatrix}0 & 1 & 2 \\end{bmatrix}\n=\n\\begin{bmatrix}0 & 1 & 2 \\\\ 1 & 2 & 3 \\\\ 2 & 3 & 4 \\\\ 3 & 4 & 5 \\\\ 4 & 5 & 6 \\end{bmatrix}\n+\n\\begin{bmatrix}0 & 1 & 2 \\\\ 0 & 1 & 2 \\\\ 0 & 1 & 2 \\\\ 0 & 1 & 2 \\\\ 0 & 1 & 2 \\end{bmatrix}\n\\]\n\nx = np.vstack([range(7)[i:i + 3] for i in range(5)])\nx\n\narray([[0, 1, 2],\n       [1, 2, 3],\n       [2, 3, 4],\n       [3, 4, 5],\n       [4, 5, 6]])\n\n\n\ny = np.arange(5)[:, np.newaxis]\ny\n\narray([[0],\n       [1],\n       [2],\n       [3],\n       [4]])\n\n\n\nx + y\n\narray([[ 0,  1,  2],\n       [ 2,  3,  4],\n       [ 4,  5,  6],\n       [ 6,  7,  8],\n       [ 8,  9, 10]])\n\n\n\ny = np.arange(3)\ny\n\narray([0, 1, 2])\n\n\n\nx + y\n\narray([[0, 2, 4],\n       [1, 3, 5],\n       [2, 4, 6],\n       [3, 5, 7],\n       [4, 6, 8]])"
  },
  {
    "objectID": "03.03 배열의 연산.html#차원-축소-연산",
    "href": "03.03 배열의 연산.html#차원-축소-연산",
    "title": "3.3 배열의 연산",
    "section": "차원 축소 연산",
    "text": "차원 축소 연산\n차원 축소 연산\n행렬의 하나의 행에 있는 원소들을 하나의 데이터 집합으로 보고 그 집합의 평균을 구하면 각 행에 대해 하나의 숫자가 나오게 된다. 예를 들어 10x5 크기의 2차원 배열에 대해 행-평균을 구하면 10개의 숫자를 가진 1차원 벡터가 나오게 된다. 이러한 연산을 차원 축소(dimension reduction) 연산이라고 한다.\n넘파이는 다음과 같은 차원 축소 연산 명령 혹은 메서드를 지원한다.\n\n최대/최소: min, max, argmin, argmax\n통계: sum, mean, median, std, var\n불리언: all, any\n\n\nx = np.array([1, 2, 3, 4])\nx\n\narray([1, 2, 3, 4])\n\n\n\nnp.sum(x)\n\n10\n\n\n\nx.sum()\n\n10\n\n\n\nx = np.array([1, 3, 2])\n\n\nx.min()\n\n1\n\n\n\nx.max()\n\n3\n\n\n\nx.argmin()  # 최솟값의 위치\n\n0\n\n\n\nx.argmax()  # 최댓값의 위치\n\n1\n\n\n\nx = np.array([1, 2, 3, 1])\n\n\nx.mean()\n\n1.75\n\n\n\nnp.median(x)\n\n1.5\n\n\n\nnp.all([True, True, False])\n\nFalse\n\n\n\nnp.any([True, True, False])\n\nTrue\n\n\n\na = np.zeros((100, 100), dtype=np.int)\na\n\narray([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]])\n\n\n\nnp.any(a != 0)\n\nFalse\n\n\n\nnp.all(a == a)\n\nTrue\n\n\n\na = np.array([1, 2, 3, 2])\nb = np.array([2, 2, 3, 2])\nc = np.array([6, 4, 4, 5])\n\n\n((a &lt;= b) & (b &lt;= c)).all()\n\nTrue\n\n\n연산의 대상이 2차원 이상인 경우에는 어느 차원으로 계산을 할 지를 axis 인수를 사용하여 지시한다. axis=0인 경우는 열 연산, axis=1인 경우는 행 연산이다. 디폴트 값은 axis=0이다. axis 인수는 대부분의 차원 축소 명령에 적용할 수 있다.\n\nx = np.array([[1, 1], [2, 2]])\nx\n\narray([[1, 1],\n       [2, 2]])\n\n\n\nx.sum()\n\n6\n\n\n\nx.sum(axis=0)   # 열 합계\n\narray([3, 3])\n\n\n\nx.sum(axis=1)   # 행 합계\n\narray([2, 4])\n\n\n````vmlmplygpmru 연습 문제 3.3.1\n실수로 이루어진 5 x 6 형태의 데이터 행렬을 만들고 이 데이터에 대해 다음과 같은 값을 구한다.\n\n전체의 최댓값\n각 행의 합\n각 행의 최댓값\n각 열의 평균\n각 열의 최솟값\n\n\n## 정렬\n\n\n```{margin}\n`sort`\n```\n\n\n`sort` 함수나 메서드를 사용하여 배열 안의 원소를 크기에 따라 정렬하여 새로운 배열을 만들 수도 있다. 2차원 이상인 경우에는 행이나 열을 각각 따로따로 정렬하는데 `axis` 인수를 사용하여 행을 정렬할 것인지 열을 정렬한 것인지 결정한다. `axis=0`이면 각각의 행을 따로따로 정렬하고 `axis=1`이면 각각의 열을 따로따로 정렬한다. 디폴트 값은 -1 즉 가장 안쪽(나중)의 차원이다.\n\n::: {#cell-78 .cell school_cell_uuid='386747b5e06c4272b95c6d4478e2522c' execution_count=51}\n``` {.python .cell-code}\na = np.array([[4,  3,  5,  7],\n              [1, 12, 11,  9],\n              [2, 15,  1, 14]])\na\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\narray([[ 4,  3,  5,  7],\n       [ 1, 12, 11,  9],\n       [ 2, 15,  1, 14]])\n```\n:::\n:::\n\n\n::: {#cell-79 .cell school_cell_uuid='01b1287f88e84ef08e7415973ca6f017' execution_count=52}\n``` {.python .cell-code}\nnp.sort(a)  # axis=-1 또는 axis=1 과 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\narray([[ 3,  4,  5,  7],\n       [ 1,  9, 11, 12],\n       [ 1,  2, 14, 15]])\n```\n:::\n:::\n\n\n::: {#cell-80 .cell school_cell_uuid='bc176ba6937b40939a1f3695826cdc40' execution_count=53}\n``` {.python .cell-code}\nnp.sort(a, axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\narray([[ 1,  3,  1,  7],\n       [ 2, 12,  5,  9],\n       [ 4, 15, 11, 14]])\n```\n:::\n:::\n\n\nsort 메서드는 해당 객체의 자료 자체가 변화하는 자체변화(in-place) 메서드이므로 사용할 때 주의를 기울여야 한다.\n\n::: {#cell-82 .cell school_cell_uuid='494139fb7a73493a89398ce82a0c14f1' execution_count=54}\n``` {.python .cell-code}\na.sort(axis=1)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\narray([[ 3,  4,  5,  7],\n       [ 1,  9, 11, 12],\n       [ 1,  2, 14, 15]])\n```\n:::\n:::\n\n\n\n```{margin}\n`argsort`\n```\n\n\n만약 자료를 정렬하는 것이 아니라 순서만 알고 싶다면 `argsort` 명령을 사용한다.\n\n::: {#cell-85 .cell school_cell_uuid='119343dfb907415785d7846b51ceeb53' execution_count=55}\n``` {.python .cell-code}\na = np.array([42, 38, 12, 25])\nj = np.argsort(a)\nj\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\narray([2, 3, 1, 0])\n```\n:::\n:::\n\n\n::: {#cell-86 .cell school_cell_uuid='6f0f76d6d9eb4352a5ba8a388b130a2e' execution_count=56}\n``` {.python .cell-code}\na[j]\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\narray([12, 25, 38, 42])\n```\n:::\n:::\n\n\n::: {#cell-87 .cell school_cell_uuid='82e58925d9b44196bf4edadb65b014e6' execution_count=57}\n``` {.python .cell-code}\nnp.sort(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\narray([12, 25, 38, 42])\n```\n:::\n:::\n\n\n````{admonition} 연습 문제 3.3.2\n\n다음 배열은 첫번째 행(row)에 학번, 두번째 행에 영어 성적, 세번째 행에 수학 성적을 적은 배열이다. 영어 성적을 기준으로 각 열(column)을 재정렬하라.\n\n```\narray([[  1,    2,    3,    4],\n       [ 46,   99,  100,   71],\n       [ 81,   59,   90,  100]])\n```"
  },
  {
    "objectID": "03.05 난수 발생과 카운팅.html",
    "href": "03.05 난수 발생과 카운팅.html",
    "title": "3.5 난수 발생과 카운팅",
    "section": "",
    "text": "파이썬을 이용하여 데이터를 무작위로 섞거나 임의의 수 즉, 난수(random number)를 발생시키는 방법에 대해 알아본다. 이 기능은 주로 NumPy의 random 서브패키지에서 제공한다."
  },
  {
    "objectID": "03.05 난수 발생과 카운팅.html#시드-설정하기",
    "href": "03.05 난수 발생과 카운팅.html#시드-설정하기",
    "title": "3.5 난수 발생과 카운팅",
    "section": "시드 설정하기",
    "text": "시드 설정하기\n시드\n컴퓨터 프로그램에서 발생하는 무작위 수는 사실 엄격한 의미의 무작위 수가 아니다. 어떤 특정한 시작 숫자를 정해 주면 컴퓨터가 정해진 알고리즘에 의해 마치 난수처럼 보이는 수열을 생성한다. 이런 시작 숫자를 시드(seed)라고 한다. 일단 생성된 난수는 다음번 난수 생성을 위한 시드값이 된다. 따라서 시드값은 한 번만 정해주면 된다. 시드는 보통 현재 시각등을 이용하여 자동으로 정해지지만 사람이 수동으로 설정할 수도 있다. 특정한 시드값이 사용되면 그 다음에 만들어지는 난수들은 모두 예측할 수 있다. 이 책에서는 코드의 결과를 재현하기 위해 항상 시드를 설정한다.\n`seed`\n파이썬에서 시드를 설정하는 함수는 seed이다. 인수로는 0과 같거나 큰 정수를 넣어준다.\n\nnp.random.seed(0)\n\n`rand`\n이렇게 시드를 설정한 후 넘파이 random 서브패키지에 있는 rand 함수로 5개의 난수를 생성해 보자. rand 함수는 0과 1사이의 난수를 발생시키는 함수로 인수로 받은 숫자 횟수만큼 난수를 발생시킨다.\n\nnp.random.rand(5)\n\narray([0.5488135 , 0.71518937, 0.60276338, 0.54488318, 0.4236548 ])\n\n\n몇번 더 난수를 생성해보자. 사람이 예측할 수 없는 무작위 숫자가 나오는 것을 볼 수 있다.\n\nnp.random.rand(10)\n\narray([0.64589411, 0.43758721, 0.891773  , 0.96366276, 0.38344152,\n       0.79172504, 0.52889492, 0.56804456, 0.92559664, 0.07103606])\n\n\n\nnp.random.rand(10)\n\narray([0.0871293 , 0.0202184 , 0.83261985, 0.77815675, 0.87001215,\n       0.97861834, 0.79915856, 0.46147936, 0.78052918, 0.11827443])\n\n\n이제 시드를 0으로 재설정하고 다시 난수를 발생시켜 본다.\n\nnp.random.seed(0)\n\n\nnp.random.rand(5)\n\narray([0.5488135 , 0.71518937, 0.60276338, 0.54488318, 0.4236548 ])\n\n\n\nnp.random.rand(10)\n\narray([0.64589411, 0.43758721, 0.891773  , 0.96366276, 0.38344152,\n       0.79172504, 0.52889492, 0.56804456, 0.92559664, 0.07103606])\n\n\n\nnp.random.rand(10)\n\narray([0.0871293 , 0.0202184 , 0.83261985, 0.77815675, 0.87001215,\n       0.97861834, 0.79915856, 0.46147936, 0.78052918, 0.11827443])\n\n\n아까와 같은 숫자가 나오는 것을 확인할 수 있다."
  },
  {
    "objectID": "03.05 난수 발생과 카운팅.html#데이터의-순서-바꾸기",
    "href": "03.05 난수 발생과 카운팅.html#데이터의-순서-바꾸기",
    "title": "3.5 난수 발생과 카운팅",
    "section": "데이터의 순서 바꾸기",
    "text": "데이터의 순서 바꾸기\n`shuffle`\n데이터의 순서를 바꾸려면 shuffle 함수를 사용한다. shuffle 함수도 자체 변환(in-place) 함수로 한 번 사용하면 변수의 값이 바뀌므로 사용에 주의해야 한다.\n\nx = np.arange(10)\nx\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nnp.random.shuffle(x)\nx\n\narray([3, 6, 4, 5, 2, 9, 7, 8, 1, 0])"
  },
  {
    "objectID": "03.05 난수 발생과 카운팅.html#데이터-샘플링",
    "href": "03.05 난수 발생과 카운팅.html#데이터-샘플링",
    "title": "3.5 난수 발생과 카운팅",
    "section": "데이터 샘플링",
    "text": "데이터 샘플링\n`choice`\n이미 있는 데이터 집합에서 일부를 무작위로 선택하는 것을 표본선택 혹은 샘플링(sampling)이라고 한다. 샘플링에는 choice 함수를 사용한다. choice 함수는 다음과 같은 인수를 가질 수 있다.\nnumpy.random.choice(a, size=None, replace=True, p=None)\n\na : 배열이면 원래의 데이터, 정수이면 arange(a) 명령으로 데이터 생성\nsize : 정수. 샘플 숫자\nreplace : 불리언. True이면 한번 선택한 데이터를 다시 선택 가능\np : 배열. 각 데이터가 선택될 수 있는 확률\n\n\nnp.random.choice(5, 5, replace=False)  # shuffle 명령과 같다.\n\narray([1, 4, 0, 3, 2])\n\n\n\nnp.random.choice(5, 3, replace=False)  # 3개만 선택\n\narray([2, 1, 3])\n\n\n\nnp.random.choice(5, 10)  # 반복해서 10개 선택\n\narray([0, 4, 1, 4, 1, 2, 2, 0, 1, 1])\n\n\n\nnp.random.choice(5, 10, p=[0.1, 0, 0.3, 0.6, 0])  # 선택 확률을 다르게 해서 10개 선택\n\narray([0, 3, 3, 2, 2, 3, 3, 2, 0, 3])"
  },
  {
    "objectID": "03.05 난수 발생과 카운팅.html#난수-생성",
    "href": "03.05 난수 발생과 카운팅.html#난수-생성",
    "title": "3.5 난수 발생과 카운팅",
    "section": "난수 생성",
    "text": "난수 생성\n넘파이의 random 서브패키지는 이외에도 난수를 생성하는 다양한 함수를 제공한다. 그 중 가장 간단하고 많이 사용되는 것은 다음 3가지 함수다.\n\nrand: 0부터 1사이의 균일 분포\nrandn: 표준 정규 분포\nrandint: 균일 분포의 정수 난수\n\n`rand`\nrand 함수는 0부터 1사이에서 균일한 확률 분포로 실수 난수를 생성한다. 숫자 인수는 생성할 난수의 크기이다. 여러개의 인수를 넣으면 해당 크기를 가진 행렬을 생성한다.\n\nnp.random.rand(10)\n\narray([0.95894927, 0.65279032, 0.63505887, 0.99529957, 0.58185033,\n       0.41436859, 0.4746975 , 0.6235101 , 0.33800761, 0.67475232])\n\n\n\nnp.random.rand(3, 5)\n\narray([[0.31720174, 0.77834548, 0.94957105, 0.66252687, 0.01357164],\n       [0.6228461 , 0.67365963, 0.971945  , 0.87819347, 0.50962438],\n       [0.05571469, 0.45115921, 0.01998767, 0.44171092, 0.97958673]])\n\n\n`randn`\nrandn 함수는 기댓값이 0이고 표준편차가 1인 표준 정규 분포(standard normal distribution)를 따르는 난수를 생성한다. 인수 사용법은 rand 명령과 같다.\n\nnp.random.randn(10)\n\narray([-0.30237513, -2.2244036 ,  0.72400636,  0.35900276,  1.07612104,\n        0.19214083,  0.85292596,  0.01835718,  0.42830357,  0.99627783])\n\n\n\nnp.random.randn(3, 5)\n\narray([[-0.49114966,  0.71267817,  1.11334035, -2.15367459, -0.41611148],\n       [-1.07089699,  0.22113881, -1.12305712, -1.05075796,  1.01207905],\n       [ 1.54371643, -0.40211489,  0.8647491 , -0.22686923,  0.81116027]])\n\n\n`randint`\nrandint 함수는 다음과 같은 인수를 가진다.\nnumpy.random.randint(low, high=None, size=None)\n만약 high를 입력하지 않으면 0과 low사이의 숫자를, high를 입력하면 low와 high는 사이의 숫자를 출력한다. size는 난수의 숫자이다.\n\nnp.random.randint(10, size=10)\n\narray([0, 4, 3, 6, 9, 8, 0, 8, 5, 9])\n\n\n\nnp.random.randint(10, 20, size=10)\n\narray([10, 19, 16, 15, 13, 11, 18, 10, 14, 19])\n\n\n\nnp.random.randint(10, 20, size=(3, 5))\n\narray([[16, 15, 17, 18, 18],\n       [19, 12, 18, 16, 16],\n       [19, 11, 16, 18, 18]])\n\n\n```yfexewxpqyge 연습 문제 3.5.1\n\n동전을 10번 던져 앞면(숫자 1)과 뒷면(숫자 0)이 나오는 가상 실험을 파이썬으로 작성한다.\n주사위를 100번 던져서 나오는 숫자의 평균을 구하라.\n\n\n```{admonition} 연습 문제 3.5.2\n\n가격이 10,000원인 주식이 있다. 이 주식의 일간 수익률(%)은 기댓값이 0%이고 표준편차가 1%인 표준 정규 분포를 따른다고 하자.\n250일 동안의 주가를 무작위로 생성하라"
  },
  {
    "objectID": "03.05 난수 발생과 카운팅.html#정수-데이터-카운팅",
    "href": "03.05 난수 발생과 카운팅.html#정수-데이터-카운팅",
    "title": "3.5 난수 발생과 카운팅",
    "section": "정수 데이터 카운팅",
    "text": "정수 데이터 카운팅\n이렇게 발생시킨 난수가 실수값이면 히스토그램 등을 사용하여 분석하면 된다. 히스토그램을 시각화 부분에서 나중에 자세히 설명한다.\n만약 난수가 정수값이면 unique 명령이나 bincount 명령으로 데이터 값을 분석할 수 있다.\n`unique`\nunique 함수는 데이터에서 중복된 값을 제거하고 중복되지 않는 값의 리스트를 출력한다. return_counts 인수를 True 로 설정하면 각 값을 가진 데이터 갯수도 출력한다.\n\nnp.unique([11, 11, 2, 2, 34, 34])\n\narray([ 2, 11, 34])\n\n\n\na = np.array(['a', 'b', 'b', 'c', 'a'])\nindex, count = np.unique(a, return_counts=True)\n\n\nindex\n\narray(['a', 'b', 'c'], dtype='&lt;U1')\n\n\n\ncount\n\narray([2, 2, 1])\n\n\n그러나 unique 함수는 데이터에 존재하는 값에 대해서만 갯수를 세므로 데이터 값이 나올 수 있음에도 불구하고 데이터가 하나도 없는 경우에는 정보를 주지 않는다. 예를 들어 주사위를 10번 던졌는데 6이 한 번도 나오지 않으면 이 값을 0으로 세어주지 않는다.\n`bincount`\n따라서 데이터가 주사위를 던졌을 때 나오는 수처럼 특정 범위안의 수인 경우에는 bincount 함수에 minlength 인수를 설정하여 쓰는 것이 더 편리하다. bincount 함수는 0 부터 minlength - 1 까지의 숫자에 대해 각각 카운트를 한다. 데이터가 없을 경우에는 카운트 값이 0이 된다.\n\nnp.bincount([1, 1, 2, 2, 2, 3], minlength=6)\n\narray([0, 2, 3, 1, 0, 0])"
  },
  {
    "objectID": "04.01 판다스 패키지의 소개.html",
    "href": "04.01 판다스 패키지의 소개.html",
    "title": "4.1 판다스 패키지의 소개",
    "section": "",
    "text": "대부분의 데이터는 시계열(series)이나 표(table)의 형태로 나타낼 수 있다. 판다스(Pandas) 패키지는 이러한 데이터를 다루기 위한 시리즈(Series) 클래스와 데이터프레임(DataFrame) 클래스를 제공한다."
  },
  {
    "objectID": "04.01 판다스 패키지의 소개.html#판다스-패키지-임포트",
    "href": "04.01 판다스 패키지의 소개.html#판다스-패키지-임포트",
    "title": "4.1 판다스 패키지의 소개",
    "section": "판다스 패키지 임포트",
    "text": "판다스 패키지 임포트\n판다스 패키지를 사용하기 위해 우선 임포트를 해야 한다. 판다스 패키지는 pd라는 별칭으로 임포트하는 것이 관례이므로 여기에서도 해당 관례를 따르도록 한다.\n\nimport pandas as pd"
  },
  {
    "objectID": "04.01 판다스 패키지의 소개.html#시리즈-클래스",
    "href": "04.01 판다스 패키지의 소개.html#시리즈-클래스",
    "title": "4.1 판다스 패키지의 소개",
    "section": "시리즈 클래스",
    "text": "시리즈 클래스\n`Series`\n인덱스(index)\n값(value)\n시리즈 Series 클래스는 넘파이에서 제공하는 1차원 배열과 비슷하지만 각 데이터의 의미를 표시하는 인덱스(index)를 붙일 수 있다. 데이터 자체는 값(value)라고 한다.\n\n시리즈 = 값(value) + 인덱스(index)\n\n\n시리즈 생성\n인덱스 라벨(index label)\n데이터를 리스트나 1차원 배열 형식으로 Series 클래스 생성자에 넣어주면 시리즈 클래스 객체를 만들 수 있다. 이 때 인덱스의 길이는 데이터의 길이와 같아야 한다. 다음 예에서 이 “서울”, “부산” 등의 문자열이 인덱스의 값이다. 인덱스의 값을 인덱스 라벨(label)이라고도 한다. 인덱스 라벨은 문자열 뿐 아니라 날짜, 시간, 정수 등도 가능하다.\n다음 예제는 각 도시의 2015년 인구 데이터를 시리즈로 만든 것이다.\n\ns = pd.Series([9904312, 3448737, 2890451, 2466052],\n              index=[\"서울\", \"부산\", \"인천\", \"대구\"])\ns\n\n서울    9904312\n부산    3448737\n인천    2890451\n대구    2466052\ndtype: int64\n\n\n만약 인덱스를 지정하지 않고 시리즈를 만들면 시리즈의 인덱스는 0부터 시작하는 정수값이 된다.\n\npd.Series(range(10, 14))\n\n0    10\n1    11\n2    12\n3    13\ndtype: int64\n\n\n`Series.index` 속성\n`Series.values` 속성\n시리즈의 인덱스는 index 속성으로 접근할 수 있다. 시리즈의 값은 1차원 배열이며 values 속성으로 접근할 수 있다.\n\ns.index\n\nIndex(['서울', '부산', '인천', '대구'], dtype='object')\n\n\n\ns.values\n\narray([9904312, 3448737, 2890451, 2466052])\n\n\n`Series.name` 속성\n`Series.index.name` 속성\nname 속성을 이용하여 시리즈 데이터에 이름을 붙일 수 있다. index.name 속성으로 시리즈의 인덱스에도 이름을 붙일 수 있다.\n\ns.name = \"인구\"\ns.index.name = \"도시\"\ns\n\n도시\n서울    9904312\n부산    3448737\n인천    2890451\n대구    2466052\nName: 인구, dtype: int64\n\n\n\n\n시리즈 연산\n넘파이 배열처럼 시리즈도 벡터화 연산을 할 수 있다. 다만 연산은 시리즈의 값에만 적용되며 인덱스 값은 변하지 않는다. 예를 들어 인구 숫자를 백만 단위로 만들기 위해 시리즈 객체를 1,000,000 으로 나누어도 인덱스 라벨에는 영향을 미치지 않는 것을 볼 수 있다.\n\ns / 1000000\n\n도시\n서울    9.904312\n부산    3.448737\n인천    2.890451\n대구    2.466052\nName: 인구, dtype: float64\n\n\n\n\n시리즈 인덱싱\n시리즈는 넘파이 배열에서 가능한 인덱스 방법 이외에도 인덱스 라벨을 이용한 인덱싱도 할 수 있다. 배열 인덱싱이나 인덱스 라벨을 이용한 슬라이싱(slicing)도 가능하다.\n시리즈 데이터를 인덱싱하면 값이 나온다.\n\ns[1], s[\"부산\"]\n\n(3448737, 3448737)\n\n\n\ns[3], s[\"대구\"]\n\n(2466052, 2466052)\n\n\n배열 인덱싱을 하면 부분적인 값을 가지는 시리즈 자료형을 반환한다. 자료의 순서를 바꾸거나 특정한 자료만 선택할 수 있다.\n\ns[[0, 3, 1]]\n\n도시\n서울    9904312\n대구    2466052\n부산    3448737\nName: 인구, dtype: int64\n\n\n\ns[[\"서울\", \"대구\", \"부산\"]]\n\n도시\n서울    9904312\n대구    2466052\n부산    3448737\nName: 인구, dtype: int64\n\n\n\ns[(250e4 &lt; s) & (s &lt; 500e4)]  # 인구가 250만 초과, 500만 미만인 경우\n\n도시\n부산    3448737\n인천    2890451\nName: 인구, dtype: int64\n\n\n슬라이싱을 해도 부분적인 시리즈를 반환한다. 이 때 문자열 라벨을 이용한 슬라이싱을 하는 경우에는 숫자 인덱싱과 달리 콜론(:) 기호 뒤에 오는 값도 결과에 포함되므로 주의해야 한다.\n\ns[1:3]  # 두번째(1)부터 세번째(2)까지 (네번째(3) 미포함)\n\n도시\n부산    3448737\n인천    2890451\nName: 인구, dtype: int64\n\n\n\ns[\"부산\":\"대구\"]  # 부산에서 대구까지 (대구도 포함)\n\n도시\n부산    3448737\n인천    2890451\n대구    2466052\nName: 인구, dtype: int64\n\n\n만약 라벨 값이 영문 문자열인 경우에는 인덱스 라벨이 속성인것처럼 점(.)을 이용하여 해당 인덱스 값에 접근할 수도 있다.\n\ns0 = pd.Series(range(3), index=[\"a\", \"b\", \"c\"])\ns0\n\na    0\nb    1\nc    2\ndtype: int64\n\n\n\ns0.a\n\n0\n\n\n\ns0.b\n\n1\n\n\n\n\n시리즈와 딕셔너리 자료형\n시리즈 객체는 라벨 값에 의해 인덱싱이 가능하므로 실질적으로 인덱스 라벨 값을 키(key)로 가지는 딕셔너리 자료형과 같다고 볼 수 있다. 따라서 딕셔너리 자료형에서 제공하는 in 연산도 가능하고 items 메서드를 사용하면 for 루프를 통해 각 원소의 키(key)와 값(value)을 접근할 수도 있다.\n\n\"서울\" in s  # 인덱스 라벨 중에 서울이 있는가\n\nTrue\n\n\n\n\"대전\" in s  # 인덱스 라벨 중에 대전이 있는가\n\nFalse\n\n\n\nfor k, v in s.items():\n    print(\"%s = %d\" % (k, v))\n\n서울 = 9904312\n부산 = 3448737\n인천 = 2890451\n대구 = 2466052\n\n\n또 딕셔너리 객체에서 시리즈를 만들 수도 있다. 이번에는 2010년의 인구 자료를 s2라는 이름의 시리즈로 만들어 보자. 이 데이터에는 대구의 인구 자료는 없지만 대신 대전의 인구 자료가 포함되어 있다.\n\ns2 = pd.Series({\"서울\": 9631482, \"부산\": 3393191, \"인천\": 2632035, \"대전\": 1490158})\ns2\n\n서울    9631482\n부산    3393191\n인천    2632035\n대전    1490158\ndtype: int64\n\n\n딕셔너리의 원소는 순서를 가지지 않으므로 시리즈의 데이터도 순서가 보장되지 않는다. 만약 순서를 정하고 싶다면 인덱스를 리스트로 지정해야 한다.\n\ns2 = pd.Series({\"서울\": 9631482, \"부산\": 3393191, \"인천\": 2632035, \"대전\": 1490158},\n               index=[\"부산\", \"서울\", \"인천\", \"대전\"])\ns2\n\n부산    3393191\n서울    9631482\n인천    2632035\n대전    1490158\ndtype: int64\n\n\n\n\n인덱스 기반 연산\n이번에는 2015년도와 2010년의 인구 증가를 계산해 보자. 두 개의 시리즈의 차이를 구하면 된다. 두 시리즈에 대해 연산을 하는 경우 인덱스가 같은 데이터에 대해서만 차이를 구한다.\n\nds = s - s2\nds\n\n대구         NaN\n대전         NaN\n부산     55546.0\n서울    272830.0\n인천    258416.0\ndtype: float64\n\n\n\ns.values - s2.values\n\narray([ 6511121, -6182745,   258416,   975894])\n\n\n`Series.notnull`\n대구와 대전의 경우에는 2010년 자료와 2015년 자료가 모두 존재하지 않기 때문에 계산이 불가능하므로 NaN(Not a Number)이라는 값을 가지게 된다. 또한 NaN 값이 float 자료형에서만 가능하므로 다른 계산 결과도 모두 float 자료형이 되었다는 점에 주의한다. NaN이 아닌 값을 구하려면 notnull 메서드를 사용한다.\n\nds.notnull()\n\n대구    False\n대전    False\n부산     True\n서울     True\n인천     True\ndtype: bool\n\n\n\nds[ds.notnull()]\n\n부산     55546.0\n서울    272830.0\n인천    258416.0\ndtype: float64\n\n\n마찬가지로 인구 증가율(%)은 다음과 같이 구할 수 있다.\n\nrs = (s - s2) / s2 * 100\nrs = rs[rs.notnull()]\nrs\n\n부산    1.636984\n서울    2.832690\n인천    9.818107\ndtype: float64\n\n\n\n\n데이터의 갱신, 추가, 삭제\n인덱싱을 이용하면 딕셔너리처럼 데이터를 갱신(update)하거나 추가(add)할 수 있다.\n\nrs[\"부산\"] = 1.63\nrs\n\n부산    1.630000\n서울    2.832690\n인천    9.818107\ndtype: float64\n\n\n\nrs[\"대구\"] = 1.41\nrs\n\n부산    1.630000\n서울    2.832690\n인천    9.818107\n대구    1.410000\ndtype: float64\n\n\n데이터를 삭제할 때도 딕셔너리처럼 del 명령을 사용한다.\n\ndel rs[\"서울\"]\nrs\n\n부산    1.630000\n인천    9.818107\n대구    1.410000\ndtype: float64\n\n\n````mxwecectlmbr 연습 문제 4.1.1\n\n임의로 두 개의 시리즈 객체를 만든다. 모두 문자열 인덱스를 가져야 하며 두 시리즈에 공통적으로 포함되지 않는 라벨이 있어야 한다.\n위에서 만든 두 시리즈 객체를 이용하여 사칙 연산을 한다.\n\n\n## 데이터프레임 클래스\n\n\n```{margin}\n`DataFrame`\n```\n\n```{margin}\n행 인덱스(row index, index)\n```\n\n```{margin}\n열 인덱스(cplumn index, columns)\n```\n\n\n시리즈가 1차원 벡터 데이터에 행방향 인덱스(row index)를 붙인 것이라면 데이터프레임 `DataFrame` 클래스는 2차원 행렬 데이터에 인덱스를 붙인 것과 비슷하다. 2차원이므로 각각의 행 데이터의 이름이 되는 행 인덱스(row index) 뿐 아니라 각각의 열 데이터의 이름이 되는 열 인덱스(column index)도 붙일 수 있다.\n\n### 데이터프레임 생성\n\n데이터프레임을 만드는 방법은 다양하다. 가장 간단한 방법은 다음과 같다.\n\n1. 우선 하나의 열이 되는 데이터를 리스트나 일차원 배열을 준비한다. \n2. 이 각각의 열에 대한 이름(라벨)을 키로 가지는 딕셔너리를 만든다.\n3. 이 데이터를 ``DataFrame`` 클래스 생성자에 넣는다. 동시에 열방향 인덱스는 ``columns`` 인수로, 행방향 인덱스는 ``index`` 인수로 지정한다.\n\n::: {#cell-78 .cell school_cell_uuid='ad56dd6a97c849a6ba1df6cacaad4716' execution_count=30}\n``` {.python .cell-code}\ndata = {\n    \"2015\": [9904312, 3448737, 2890451, 2466052],\n    \"2010\": [9631482, 3393191, 2632035, 2431774],\n    \"2005\": [9762546, 3512547, 2517680, 2456016],\n    \"2000\": [9853972, 3655437, 2466338, 2473990],\n    \"지역\": [\"수도권\", \"경상권\", \"수도권\", \"경상권\"],\n    \"2010-2015 증가율\": [0.0283, 0.0163, 0.0982, 0.0141]\n}\ncolumns = [\"지역\", \"2015\", \"2010\", \"2005\", \"2000\", \"2010-2015 증가율\"]\nindex = [\"서울\", \"부산\", \"인천\", \"대구\"]\ndf = pd.DataFrame(data, index=index, columns=columns)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;지역&lt;/th&gt;\n      &lt;th&gt;2015&lt;/th&gt;\n      &lt;th&gt;2010&lt;/th&gt;\n      &lt;th&gt;2005&lt;/th&gt;\n      &lt;th&gt;2000&lt;/th&gt;\n      &lt;th&gt;2010-2015 증가율&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;서울&lt;/th&gt;\n      &lt;td&gt;수도권&lt;/td&gt;\n      &lt;td&gt;9904312&lt;/td&gt;\n      &lt;td&gt;9631482&lt;/td&gt;\n      &lt;td&gt;9762546&lt;/td&gt;\n      &lt;td&gt;9853972&lt;/td&gt;\n      &lt;td&gt;0.0283&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;부산&lt;/th&gt;\n      &lt;td&gt;경상권&lt;/td&gt;\n      &lt;td&gt;3448737&lt;/td&gt;\n      &lt;td&gt;3393191&lt;/td&gt;\n      &lt;td&gt;3512547&lt;/td&gt;\n      &lt;td&gt;3655437&lt;/td&gt;\n      &lt;td&gt;0.0163&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;인천&lt;/th&gt;\n      &lt;td&gt;수도권&lt;/td&gt;\n      &lt;td&gt;2890451&lt;/td&gt;\n      &lt;td&gt;2632035&lt;/td&gt;\n      &lt;td&gt;2517680&lt;/td&gt;\n      &lt;td&gt;2466338&lt;/td&gt;\n      &lt;td&gt;0.0982&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;대구&lt;/th&gt;\n      &lt;td&gt;경상권&lt;/td&gt;\n      &lt;td&gt;2466052&lt;/td&gt;\n      &lt;td&gt;2431774&lt;/td&gt;\n      &lt;td&gt;2456016&lt;/td&gt;\n      &lt;td&gt;2473990&lt;/td&gt;\n      &lt;td&gt;0.0141&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n앞에서 데이터프레임은 2차원 배열 데이터를 기반으로 한다고 했지만 사실은 공통 인덱스를 가지는 열 시리즈(column series)를 딕셔너리로 묶어놓은 것이라고 보는 것이 더 정확하다. 2차원 배열 데이터는 모든 원소가 같은 자료형을 가져야 하지만 데이터프레임은 각 열(column)마다 자료형이 다를 수 있기 때문이다. 위 예제에서도 지역과 인구와 증가율은 각각 문자열, 정수, 부동소수점 실수이다.\n\n\n```{margin}\n`DataFrame.values`\n```\n\n```{margin}\n`DataFrame.columns`\n```\n\n```{margin}\n`DataFrame.index`\n```\n\n\n시리즈와 마찬가지로 데이터만 접근하려면 ``values`` 속성을 사용한다. 열방향 인덱스와 행방향 인덱스는 각각 ``columns``, ``index`` 속성으로 접근한다.\n\n::: {#cell-84 .cell school_cell_uuid='304c384949634af288540e1a2c95337e' execution_count=31}\n``` {.python .cell-code}\ndf.values\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\narray([['수도권', 9904312, 9631482, 9762546, 9853972, 0.0283],\n       ['경상권', 3448737, 3393191, 3512547, 3655437, 0.0163],\n       ['수도권', 2890451, 2632035, 2517680, 2466338, 0.0982],\n       ['경상권', 2466052, 2431774, 2456016, 2473990, 0.0141]], dtype=object)\n```\n:::\n:::\n\n\n::: {#cell-85 .cell school_cell_uuid='302fa44ffa464f4fa12fe5354b4af9f2' execution_count=32}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nIndex(['지역', '2015', '2010', '2005', '2000', '2010-2015 증가율'], dtype='object')\n```\n:::\n:::\n\n\n::: {#cell-86 .cell school_cell_uuid='99de7f0a3b6d4dad8f5d6b3b9cfce153' execution_count=33}\n``` {.python .cell-code}\ndf.index\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nIndex(['서울', '부산', '인천', '대구'], dtype='object')\n```\n:::\n:::\n\n\n\n```{margin}\n`DataFrame.columns.name`\n```\n\n```{margin}\n`DataFrame.index.name`\n```\n\n\n시리즈에서 처럼 열방향 인덱스와 행방향 인덱스에 이름을 붙이는 것도 가능하다.\n\n::: {#cell-90 .cell school_cell_uuid='fe7f799f91754b3d89bdd25eeee35b1a' execution_count=34}\n``` {.python .cell-code}\ndf.index.name = \"도시\"\ndf.columns.name = \"특성\"\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;특성&lt;/th&gt;\n      &lt;th&gt;지역&lt;/th&gt;\n      &lt;th&gt;2015&lt;/th&gt;\n      &lt;th&gt;2010&lt;/th&gt;\n      &lt;th&gt;2005&lt;/th&gt;\n      &lt;th&gt;2000&lt;/th&gt;\n      &lt;th&gt;2010-2015 증가율&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;도시&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;서울&lt;/th&gt;\n      &lt;td&gt;수도권&lt;/td&gt;\n      &lt;td&gt;9904312&lt;/td&gt;\n      &lt;td&gt;9631482&lt;/td&gt;\n      &lt;td&gt;9762546&lt;/td&gt;\n      &lt;td&gt;9853972&lt;/td&gt;\n      &lt;td&gt;0.0283&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;부산&lt;/th&gt;\n      &lt;td&gt;경상권&lt;/td&gt;\n      &lt;td&gt;3448737&lt;/td&gt;\n      &lt;td&gt;3393191&lt;/td&gt;\n      &lt;td&gt;3512547&lt;/td&gt;\n      &lt;td&gt;3655437&lt;/td&gt;\n      &lt;td&gt;0.0163&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;인천&lt;/th&gt;\n      &lt;td&gt;수도권&lt;/td&gt;\n      &lt;td&gt;2890451&lt;/td&gt;\n      &lt;td&gt;2632035&lt;/td&gt;\n      &lt;td&gt;2517680&lt;/td&gt;\n      &lt;td&gt;2466338&lt;/td&gt;\n      &lt;td&gt;0.0982&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;대구&lt;/th&gt;\n      &lt;td&gt;경상권&lt;/td&gt;\n      &lt;td&gt;2466052&lt;/td&gt;\n      &lt;td&gt;2431774&lt;/td&gt;\n      &lt;td&gt;2456016&lt;/td&gt;\n      &lt;td&gt;2473990&lt;/td&gt;\n      &lt;td&gt;0.0141&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 4.1.2\n\n다음 조건을 만족하는 임의의 데이터프레임을 하나 만든다.\n\n(1) 열의 갯수와 행의 갯수가 각각 5개 이상이어야 한다.\n\n\n(2) 열에는 정수, 문자열, 실수 자료형 데이터가 각각 1개 이상씩 포함되어 있어야 한다.\n데이터프레임은 전치(transpose)를 포함하여 넘파이 2차원 배열이 가지는 대부분의 속성이나 메서드를 지원한다.\n\ndf.T\n\n\n\n\n\n\n\n도시\n서울\n부산\n인천\n대구\n\n\n특성\n\n\n\n\n\n\n\n\n지역\n수도권\n경상권\n수도권\n경상권\n\n\n2015\n9904312\n3448737\n2890451\n2466052\n\n\n2010\n9631482\n3393191\n2632035\n2431774\n\n\n2005\n9762546\n3512547\n2517680\n2456016\n\n\n2000\n9853972\n3655437\n2466338\n2473990\n\n\n2010-2015 증가율\n0.0283\n0.0163\n0.0982\n0.0141\n\n\n\n\n\n\n\n\n\n열 데이터의 갱신, 추가, 삭제\n데이터프레임은 열 시리즈의 딕셔너리으로 볼 수 있으므로 열 단위로 데이터를 갱신하거나 추가, 삭제할 수 있다.\n\n# \"2010-2015 증가율\"이라는 이름의 열 추가\ndf[\"2010-2015 증가율\"] = df[\"2010-2015 증가율\"] * 100\ndf\n\n\n\n\n\n\n\n특성\n지역\n2015\n2010\n2005\n2000\n2010-2015 증가율\n\n\n도시\n\n\n\n\n\n\n\n\n\n\n서울\n수도권\n9904312\n9631482\n9762546\n9853972\n2.83\n\n\n부산\n경상권\n3448737\n3393191\n3512547\n3655437\n1.63\n\n\n인천\n수도권\n2890451\n2632035\n2517680\n2466338\n9.82\n\n\n대구\n경상권\n2466052\n2431774\n2456016\n2473990\n1.41\n\n\n\n\n\n\n\n\n# \"2005-2010 증가율\"이라는 이름의 열 추가\ndf[\"2005-2010 증가율\"] = ((df[\"2010\"] - df[\"2005\"]) / df[\"2005\"] * 100).round(2)\ndf\n\n\n\n\n\n\n\n특성\n지역\n2015\n2010\n2005\n2000\n2010-2015 증가율\n2005-2010 증가율\n\n\n도시\n\n\n\n\n\n\n\n\n\n\n\n서울\n수도권\n9904312\n9631482\n9762546\n9853972\n2.83\n-1.34\n\n\n부산\n경상권\n3448737\n3393191\n3512547\n3655437\n1.63\n-3.40\n\n\n인천\n수도권\n2890451\n2632035\n2517680\n2466338\n9.82\n4.54\n\n\n대구\n경상권\n2466052\n2431774\n2456016\n2473990\n1.41\n-0.99\n\n\n\n\n\n\n\n\n# \"2010-2015 증가율\"이라는 이름의 열 삭제\ndel df[\"2010-2015 증가율\"]\ndf\n\n\n\n\n\n\n\n특성\n지역\n2015\n2010\n2005\n2000\n2005-2010 증가율\n\n\n도시\n\n\n\n\n\n\n\n\n\n\n서울\n수도권\n9904312\n9631482\n9762546\n9853972\n-1.34\n\n\n부산\n경상권\n3448737\n3393191\n3512547\n3655437\n-3.40\n\n\n인천\n수도권\n2890451\n2632035\n2517680\n2466338\n4.54\n\n\n대구\n경상권\n2466052\n2431774\n2456016\n2473990\n-0.99\n\n\n\n\n\n\n\n\n\n열 인덱싱\n데이터프레임은 열 라벨을 키로, 열 시리즈를 값으로 가지는 딕셔너리와 비슷하다고 하였다. 따라서 데이터프레임을 인덱싱을 할 때도 열 라벨(column label)을 키값으로 생각하여 인덱싱을 할 수 있다. 인덱스로 라벨 값을 하나만 넣으면 시리즈 객체가 반환되고 라벨의 배열 또는 리스트를 넣으면 부분적인 데이터프레임이 반환된다.\n\n# 하나의 열만 인덱싱하면 시리즈가 반환된다.\ndf[\"지역\"]\n\n도시\n서울    수도권\n부산    경상권\n인천    수도권\n대구    경상권\nName: 지역, dtype: object\n\n\n\n# 여러개의 열을 인덱싱하면 부분적인 데이터프레임이 반환된다.\ndf[[\"2010\", \"2015\"]]\n\n\n\n\n\n\n\n특성\n2010\n2015\n\n\n도시\n\n\n\n\n\n\n서울\n9631482\n9904312\n\n\n부산\n3393191\n3448737\n\n\n인천\n2632035\n2890451\n\n\n대구\n2431774\n2466052\n\n\n\n\n\n\n\n만약 하나의 열만 빼내면서 데이터프레임 자료형을 유지하고 싶다면 원소가 하나인 리스트를 써서 인덱싱하면 된다.\n\n# 2010이라는 열을 반환하면서 데이터프레임 자료형을 유지\ndf[[\"2010\"]]\n\n\n\n\n\n\n\n특성\n2010\n\n\n도시\n\n\n\n\n\n서울\n9631482\n\n\n부산\n3393191\n\n\n인천\n2632035\n\n\n대구\n2431774\n\n\n\n\n\n\n\n\ntype(df[[\"2010\"]])\n\npandas.core.frame.DataFrame\n\n\n\n# 2010이라는 열을 반환하면서 시리즈 자료형으로 변환\ndf[\"2010\"]\n\n도시\n서울    9631482\n부산    3393191\n인천    2632035\n대구    2431774\nName: 2010, dtype: int64\n\n\n\ntype(df[\"2010\"])\n\npandas.core.series.Series\n\n\n데이터프레임의 열 인덱스가 문자열 라벨을 가지고 있는 경우에는 순서를 나타내는 정수 인덱스를 열 인덱싱에 사용할 수 없다. 정수 인덱싱의 슬라이스는 뒤에서 설명하겠지만 행(row)을 인덱싱할 때 사용하므로 열을 인덱싱할 때는 쓸 수 없다. 정수 인덱스를 넣으면 KeyError 오류가 발생하는 것을 볼 수 있다.\ndf[0]\n\n...(생략)...\nKey Error 0\n다만 원래부터 문자열이 아닌 정수형 열 인덱스를 가지는 경우에는 인덱스 값으로 정수를 사용할 수 있다.\n\ndf2 = pd.DataFrame(np.arange(12).reshape(3, 4))\ndf2\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n0\n1\n2\n3\n\n\n1\n4\n5\n6\n7\n\n\n2\n8\n9\n10\n11\n\n\n\n\n\n\n\n\ndf2[2]\n\n0     2\n1     6\n2    10\nName: 2, dtype: int64\n\n\n\ndf2[[1, 2]]\n\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n0\n1\n2\n\n\n1\n5\n6\n\n\n2\n9\n10\n\n\n\n\n\n\n\n\n\n행 인덱싱\n만약 행 단위로 인덱싱을 하고자 하면 항상 슬라이싱(slicing)을 해야 한다. 인덱스의 값이 문자 라벨이면 라벨 슬라이싱도 가능하다.\n\ndf[:1]\n\n\n\n\n\n\n\n특성\n지역\n2015\n2010\n2005\n2000\n2005-2010 증가율\n\n\n도시\n\n\n\n\n\n\n\n\n\n\n서울\n수도권\n9904312\n9631482\n9762546\n9853972\n-1.34\n\n\n\n\n\n\n\n\ndf[1:2]\n\n\n\n\n\n\n\n특성\n지역\n2015\n2010\n2005\n2000\n2005-2010 증가율\n\n\n도시\n\n\n\n\n\n\n\n\n\n\n부산\n경상권\n3448737\n3393191\n3512547\n3655437\n-3.4\n\n\n\n\n\n\n\n\ndf[1:3]\n\n\n\n\n\n\n\n특성\n지역\n2015\n2010\n2005\n2000\n2005-2010 증가율\n\n\n도시\n\n\n\n\n\n\n\n\n\n\n부산\n경상권\n3448737\n3393191\n3512547\n3655437\n-3.40\n\n\n인천\n수도권\n2890451\n2632035\n2517680\n2466338\n4.54\n\n\n\n\n\n\n\n\ndf[\"서울\":\"부산\"]\n\n\n\n\n\n\n\n특성\n지역\n2015\n2010\n2005\n2000\n2005-2010 증가율\n\n\n도시\n\n\n\n\n\n\n\n\n\n\n서울\n수도권\n9904312\n9631482\n9762546\n9853972\n-1.34\n\n\n부산\n경상권\n3448737\n3393191\n3512547\n3655437\n-3.40\n\n\n\n\n\n\n\n\n\n개별 데이터 인덱싱\n데이터프레임에서 열 라벨로 시리즈를 인덱싱하면 시리즈가 된다. 이 시리즈를 다시 행 라벨로 인덱싱하면 개별 데이터가 나온다.\n\ndf[\"2015\"][\"서울\"]\n\n9904312\n\n\n지금까지의 데이터프레임 인덱싱 방법을 정리하면 다음과 같다.\n\n\n\n\n\n\n\n\n\n\n인덱싱 값\n가능\n결과\n자료형\n추가사항\n\n\n\n\n라벨\nO\n열\n시리즈\n\n\n\n라벨 리스트\nO\n열\n데이터프레임\n\n\n\n인덱스데이터(정수)\nX\n\n\n열 라벨이 정수인 경우에는 라벨 인덱싱으로 인정\n\n\n인덱스데이터(정수) 슬라이스\nO\n행\n데이터프레임\n\n\n\n\n````mxwecectlmbr 연습 문제 4.1.3\n다음 데이터프레임에서 지정하는 데이터를 뽑아내거나 처리하라.\ndata = {\n    \"국어\": [80, 90, 70, 30],\n    \"영어\": [90, 70, 60, 40],\n    \"수학\": [90, 60, 80, 70],\n}\ncolumns = [\"국어\", \"영어\", \"수학\"]\nindex = [\"춘향\", \"몽룡\", \"향단\", \"방자\"]\ndf = pd.DataFrame(data, index=index, columns=columns)\n\n모든 학생의 수학 점수를 시리즈로 나타낸다.\n모든 학생의 국어와 영어 점수를 데이터 프레임으로 나타낸다.\n모든 학생의 각 과목 평균 점수를 새로운 열로 추가한다.\n방자의 영어 점수를 80점으로 수정하고 평균 점수도 다시 계산한다.\n춘향의 점수를 데이터프레임으로 나타낸다.\n향단의 점수를 시리즈로 나타낸다.\n\n````"
  },
  {
    "objectID": "04.03 데이터프레임 고급 인덱싱.html",
    "href": "04.03 데이터프레임 고급 인덱싱.html",
    "title": "4.3 데이터프레임 고급 인덱싱",
    "section": "",
    "text": "데이터프레임에서 특정한 데이터만 골라내는 것을 인덱싱(indexing)이라고 한다. 앞 절에서는 라벨, 라벨 리스트, 인덱스데이터(정수) 슬라이스의 3가지 인덱싱 값을 사용하여 인덱싱을 하는 방법을 공부하였다. 그런데 Pandas는 numpy행렬과 같이 쉼표를 사용한 (행 인덱스, 열 인덱스) 형식의 2차원 인덱싱을 지원하기 위해 다음과 같은 특별한 인덱서(indexer) 속성도 제공한다."
  },
  {
    "objectID": "04.03 데이터프레임 고급 인덱싱.html#loc-인덱서",
    "href": "04.03 데이터프레임 고급 인덱싱.html#loc-인덱서",
    "title": "4.3 데이터프레임 고급 인덱싱",
    "section": "loc 인덱서",
    "text": "loc 인덱서\nloc 인덱서는 다음처럼 사용한다.\ndf.loc[행 인덱싱값]\n또는\ndf.loc[행 인덱싱값, 열 인덱싱값]\n이 때 인덱싱 값은 다음 중 하나이다. 행 인덱싱값은 정수 또는 행 인덱스데이터이고 열 인덱싱값은 라벨 문자열이다.\n\n인덱스데이터\n인덱스데이터 슬라이스\n인덱스데이터 리스트\n같은 행 인덱스를 가지는 불리언 시리즈 (행 인덱싱의 경우)\n또는 위의 값들을 반환하는 함수\n\n다음과 같은 데이터프레임을 예로 들자.\n\ndf = pd.DataFrame(np.arange(10, 22).reshape(3, 4),\n                  index=[\"a\", \"b\", \"c\"],\n                  columns=[\"A\", \"B\", \"C\", \"D\"])\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\na\n10\n11\n12\n13\n\n\nb\n14\n15\n16\n17\n\n\nc\n18\n19\n20\n21\n\n\n\n\n\n\n\n\n인덱싱값을 하나만 받는 경우\n만약 loc 인덱서를 사용하면서 인덱스를 하나만 넣으면 행(row)을 선택한다.\n인덱스데이터가 “a”인 행을 고르면 해당하는 행이 시리즈로 출력된다. 시리즈라서 상하로 길게 출력되기는 했지만 행을 가져오고 있다.\n\ndf.loc[\"a\"]\n\nA    10\nB    11\nC    12\nD    13\nName: a, dtype: int64\n\n\n인덱스데이터의 슬라이스도 가능하다.\n\ndf.loc[\"b\":\"c\"]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nb\n14\n15\n16\n17\n\n\nc\n18\n19\n20\n21\n\n\n\n\n\n\n\n이 때는 사실 loc를 쓰지 않는 경우과 같다.\n\ndf[\"b\":\"c\"]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nb\n14\n15\n16\n17\n\n\nc\n18\n19\n20\n21\n\n\n\n\n\n\n\n인덱스데이터의 리스트도 된다.\n\ndf.loc[[\"b\", \"c\"]]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nb\n14\n15\n16\n17\n\n\nc\n18\n19\n20\n21\n\n\n\n\n\n\n\n이 때는 loc를 쓰지 않으면 KeyError 오류가 발생한다..\n\n# df[[\"b\", \"c\"]]  # KeyError\n\n데이터베이스와 같은 인덱스를 가지는 불리언 시리즈도 행을 선택하는 인덱싱값으로 쓸 수 있다.\n\ndf.A &gt; 15\n\na    False\nb    False\nc     True\nName: A, dtype: bool\n\n\n\ndf.loc[df.A &gt; 15]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nc\n18\n19\n20\n21\n\n\n\n\n\n\n\n인덱스 대신 인덱스 값을 반환하는 함수를 사용할 수도 있다. 다음 함수는 A열의 값이 12보다 큰 행만 선택한다.\n\ndef select_rows(df):\n    return df.A &gt; 15\n\n\nselect_rows(df)\n\na    False\nb    False\nc     True\nName: A, dtype: bool\n\n\n\ndf.loc[select_rows(df)]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nc\n18\n19\n20\n21\n\n\n\n\n\n\n\nloc 인덱서가 없는 경우에 사용했던 라벨 인덱싱이나 라벨 리스트 인덱싱은 불가능하다.\n\n# df.loc[\"A\"]  # KeyError\n\n\n# df.loc[[\"A\", \"B\"]]  # KeyError\n\n원래 (행) 인덱스값이 정수인 경우에는 슬라이싱도 라벨 슬라이싱 방식을 따르게 된다. 즉, 슬라이스의 마지막 값이 포함된다.\n\ndf2 = pd.DataFrame(np.arange(10, 26).reshape(4, 4), columns=[\"A\", \"B\", \"C\", \"D\"])\ndf2\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n10\n11\n12\n13\n\n\n1\n14\n15\n16\n17\n\n\n2\n18\n19\n20\n21\n\n\n3\n22\n23\n24\n25\n\n\n\n\n\n\n\n\ndf2.loc[1:2]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n1\n14\n15\n16\n17\n\n\n2\n18\n19\n20\n21\n\n\n\n\n\n\n\n정리하면 다음과 같다.\n\n\n\n\n\n\n\n\n\n\n인덱싱 값\n가능\n결과\n자료형\n추가사항\n\n\n\n\n행 인덱스값(정수)\nO\n행\n시리즈\n\n\n\n행 인덱스값(정수) 슬라이스\nO\n행\n데이터프레임\nloc가 없는 경우와 같음\n\n\n행 인덱스값(정수) 리스트\nO\n행\n데이터프레임\n\n\n\n불리언 시리즈\nO\n행\n데이터프레임\n시리즈의 인덱스가 데이터프레임의 행 인덱스와 같아야 한다.\n\n\n불리언 시리즈를 반환하는 함수\nO\n행\n데이터프레임\n\n\n\n열 라벨\nX\n\n\nloc가 없는 경우에만 쓸 수 있다.\n\n\n열 라벨 리스트\nX\n\n\nloc가 없는 경우에만 쓸 수 있다.\n\n\n\n\n\n인덱싱값을 행과 열 모두 받는 경우\n인덱싱값을 행과 열 모두 받으려면 df.loc[행 인덱스, 열 인덱스]와 같은 형태로 사용한다. 행 인덱스 라벨값이 a, 열 인덱스 라벨값이 A인 위치의 값을 구하는 것은 다음과 같다.\n\ndf.loc[\"a\", \"A\"]\n\n10\n\n\n인덱싱값으로 라벨 데이터의 슬라이싱 또는 리스트를 사용할 수도 있다.\n\ndf.loc[\"b\":, \"A\"]\n\nb    14\nc    18\nName: A, dtype: int64\n\n\n\ndf.loc[\"a\", :]\n\nA    10\nB    11\nC    12\nD    13\nName: a, dtype: int64\n\n\n\ndf.loc[[\"a\", \"b\"], [\"B\", \"D\"]]\n\n\n\n\n\n\n\n\nB\nD\n\n\n\n\na\n11\n13\n\n\nb\n15\n17\n\n\n\n\n\n\n\n행 인덱스가 같은 불리언 시리즈나 이러한 불리언 시리즈를 반환하는 함수도 행의 인덱싱값이 될 수 있다.\n\ndf.loc[df.A &gt; 10, [\"C\", \"D\"]]\n\n\n\n\n\n\n\n\nC\nD\n\n\n\n\nb\n16\n17\n\n\nc\n20\n21"
  },
  {
    "objectID": "04.03 데이터프레임 고급 인덱싱.html#iloc-인덱서",
    "href": "04.03 데이터프레임 고급 인덱싱.html#iloc-인덱서",
    "title": "4.3 데이터프레임 고급 인덱싱",
    "section": "iloc 인덱서",
    "text": "iloc 인덱서\niloc 인덱서는 loc 인덱서와 반대로 라벨이 아니라 순서를 나타내는 정수(integer) 인덱스만 받는다. 다른 사항은 loc 인덱서와 같다.\n\ndf.iloc[0, 1]\n\n11\n\n\n\ndf.iloc[:2, 2]\n\na    12\nb    16\nName: C, dtype: int64\n\n\n\ndf.iloc[0, -2:]\n\nC    12\nD    13\nName: a, dtype: int64\n\n\n\ndf.iloc[2:3, 1:3]\n\n\n\n\n\n\n\n\nB\nC\n\n\n\n\nc\n19\n20\n\n\n\n\n\n\n\nloc 인덱서와 마찬가지로 인덱스가 하나만 들어가면 행을 선택한다.\n\ndf.iloc[-1]\n\nA    18\nB    19\nC    20\nD    21\nName: c, dtype: int64\n\n\n\ndf.iloc[-1] = df.iloc[-1] * 2\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\na\n10\n11\n12\n13\n\n\nb\n14\n15\n16\n17\n\n\nc\n36\n38\n40\n42\n\n\n\n\n\n\n\n````nuspdkjmgauy 연습 문제 4.3.1\n\n모든 행과 열에 라벨을 가지는 5 x 5 이상의 크기를 가지는 데이터프레임을 만든다.\n10가지 이상의 방법으로 특정한 행과 열을 선택한다. ````"
  },
  {
    "objectID": "04.05 데이터프레임 인덱스 조작.html",
    "href": "04.05 데이터프레임 인덱스 조작.html",
    "title": "4.5 데이터프레임 인덱스 조작",
    "section": "",
    "text": "때로는 데이터프레임에 인덱스로 들어가 있어야 할 데이터가 일반 데이터 열에 들어가 있거나 반대로 일반 데이터 열이어야 할 것이 인덱스로 되어 있을 수 있다. 이 때는 set_index 명령이나 reset_index 명령으로 인덱스와 일반 데이터 열을 교환할 수 있다.\n\nset_index : 기존의 행 인덱스를 제거하고 데이터 열 중 하나를 인덱스로 설정\nreset_index : 기존의 행 인덱스를 제거하고 인덱스를 데이터 열로 추가\n\n\nnp.random.seed(0)\ndf1 = pd.DataFrame(np.vstack([list('ABCDE'),\n                              np.round(np.random.rand(3, 5), 2)]).T,\n                   columns=[\"C1\", \"C2\", \"C3\", \"C4\"])\ndf1\n\n\n\n\n\n\n\n\nC1\nC2\nC3\nC4\n\n\n\n\n0\nA\n0.55\n0.65\n0.79\n\n\n1\nB\n0.72\n0.44\n0.53\n\n\n2\nC\n0.6\n0.89\n0.57\n\n\n3\nD\n0.54\n0.96\n0.93\n\n\n4\nE\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\n`set_index`\nset_index 메서드로 특정한 열을 인덱스로 설정할 수 있다. 이 때 기존의 인덱스는 없어진다.\n\ndf2 = df1.set_index(\"C1\")\ndf2\n\n\n\n\n\n\n\n\nC2\nC3\nC4\n\n\nC1\n\n\n\n\n\n\n\nA\n0.55\n0.65\n0.79\n\n\nB\n0.72\n0.44\n0.53\n\n\nC\n0.6\n0.89\n0.57\n\n\nD\n0.54\n0.96\n0.93\n\n\nE\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\n마찬가지로 C2열을 인덱스로 지정하면 기존의 인덱스는 사라진다.\n\ndf2.set_index(\"C2\")\n\n\n\n\n\n\n\n\nC3\nC4\n\n\nC2\n\n\n\n\n\n\n0.55\n0.65\n0.79\n\n\n0.72\n0.44\n0.53\n\n\n0.6\n0.89\n0.57\n\n\n0.54\n0.96\n0.93\n\n\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\n`reset_index`\n반대로 reset_index 메서드를 쓰면 인덱스를 보통의 자료열로 바꿀 수도 있다. 이 때 인덱스 열은 자료열의 가장 선두로 삽입된다. 데이터프레임의 인덱스는 정수로 된 디폴트 인덱스로 바뀐다.\n\ndf2.reset_index()\n\n\n\n\n\n\n\n\nC1\nC2\nC3\nC4\n\n\n\n\n0\nA\n0.55\n0.65\n0.79\n\n\n1\nB\n0.72\n0.44\n0.53\n\n\n2\nC\n0.6\n0.89\n0.57\n\n\n3\nD\n0.54\n0.96\n0.93\n\n\n4\nE\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\nreset_index 메서드를 호출할 때 인수 drop=True 로 설정하면 인덱스 열을 보통의 자료열로 올리는 것이 아니라 그냥 버리게 된다.\n\ndf2.reset_index(drop=True)\n\n\n\n\n\n\n\n\nC2\nC3\nC4\n\n\n\n\n0\n0.55\n0.65\n0.79\n\n\n1\n0.72\n0.44\n0.53\n\n\n2\n0.6\n0.89\n0.57\n\n\n3\n0.54\n0.96\n0.93\n\n\n4\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\n````gfzdezzvvcmv 연습 문제 4.5.1\n5명의 학생의 국어, 영어, 수학 점수를 나타내는 데이터프레임을 다음과 같이 만든다.\n\n학생 이름을 나타내는 열을 포함시키지 않고 데이터프레임 df_score1 을 생성한 후, df_score1.index 속성에 학생 이름을 나타내는 열을 지정하여 인덱스를 지정한다. reset_index 명령으로 이 인덱스 열을 명령으로 일반 데이터열로 바꾸여 데이터프레임 df_score2을 만든다.\n학생 이름을 나타내는 열이 일반 데이터 열을 포함하는 데이터프레임 df_score2에 set_index 명령을 적용하여 다시 학생 이름을 나타내는 열을 인덱스로 변경한다.\n\n\n## 다중 인덱스\n\n\n```{margin}\n다중 인덱스(multi-index)\n```\n\n\n행이나 열에 여러 계층을 가지는 인덱스 즉, 다중 인덱스(multi-index)를 설정할 수도 있다. 데이터프레임을 생성할 때 `columns` 인수에 다음 예제처럼 리스트의 리스트(행렬) 형태로 인덱스를 넣으면 다중 열 인덱스를 가지게 된다.\n\n::: {#cell-19 .cell school_cell_uuid='e73724b1d28046b68fa2ea7388b3adf0' execution_count=6}\n``` {.python .cell-code}\nnp.random.seed(0)\ndf3 = pd.DataFrame(np.round(np.random.randn(5, 4), 2),\n                   columns=[[\"A\", \"A\", \"B\", \"B\"],\n                            [\"C1\", \"C2\", \"C1\", \"C2\"]])\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`columns.names`\n```\n\n\n다중 인덱스는 이름을 지정하면 더 편리하게 사용할 수 있다. 열 인덱스들의 이름 지정은 `columns` 객체의 `names` 속성에 리스트를 넣어서 지정한다.\n\n::: {#cell-22 .cell school_cell_uuid='2b23c3ed18fd402d80f81cbe1b8ac28c' execution_count=7}\n``` {.python .cell-code}\ndf3.columns.names = [\"Cidx1\", \"Cidx2\"]\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`index.names`\n```\n\n\n마찬가지로 데이터프레임을 생성할 때 `index` 인수에 리스트의 리스트(행렬) 형태로 인덱스를 넣으면 다중 (행) 인덱스를 가진다. 행 인덱스들의 이름 지정은 `index` 객체의 `names` 속성에 리스트를 넣어서 지정한다.\n\n::: {#cell-25 .cell school_cell_uuid='c6d2c389122043e8ae3c8bf2e2ed6274' execution_count=8}\n``` {.python .cell-code}\nnp.random.seed(0)\ndf4 = pd.DataFrame(np.round(np.random.randn(6, 4), 2),\n                   columns=[[\"A\", \"A\", \"B\", \"B\"],\n                            [\"C\", \"D\", \"C\", \"D\"]],\n                   index=[[\"M\", \"M\", \"M\", \"F\", \"F\", \"F\"],\n                          [\"id_\" + str(i + 1) for i in range(3)] * 2])\ndf4.columns.names = [\"Cidx1\", \"Cidx2\"]\ndf4.index.names = [\"Ridx1\", \"Ridx2\"]\ndf4\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n## 행 인덱스와 열 인덱스 교환\n\n\n```{margin}\n`stack`\n```\n\n```{margin}\n`unstack`\n```\n\n\n`stack` 메서드나 `unstack` 메서드를 쓰면 열 인덱스를 행 인덱스로 바꾸거나 반대로 행 인덱스를 열 인덱스로 바꿀 수 있다.\n\n* `stack`\n * 열 인덱스 -&gt; 행 인덱스로 변환\n\n* `unstack`\n * 행 인덱스 -&gt; 열 인덱스로 변환\n\n`stack` 메서드를 실행하면 열 인덱스가 반시계 방향으로 90도 회전한 것과 비슷한 모양이 된다. 마찬가지로 `unstack` 메서드를 실행하면 행 인덱스가 시계 방향으로 90도 회전한 것과 비슷하다. 인덱스를 지정할 때는 문자열 이름과 순서를 표시하는 숫자 인덱스를 모두 사용할 수 있다.\n\n::: {#cell-30 .cell school_cell_uuid='1295839048044d02bdb3ba2f8f288b4a' execution_count=9}\n``` {.python .cell-code}\ndf4.stack(\"Cidx1\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"6\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"6\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-31 .cell school_cell_uuid='0c99952259c24011a4486346515006fa' execution_count=10}\n``` {.python .cell-code}\ndf4.stack(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"6\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"6\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-32 .cell school_cell_uuid='4b346e2d51bf49fba93f2810d0b9d71e' execution_count=11}\n``` {.python .cell-code}\ndf4.unstack(\"Ridx2\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"6\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"6\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th colspan=\"3\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"3\" halign=\"left\"&gt;D&lt;/th&gt;\n      &lt;th colspan=\"3\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"3\" halign=\"left\"&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-33 .cell school_cell_uuid='da7558b565e64844bcc3b504780ef641' execution_count=12}\n``` {.python .cell-code}\ndf4.unstack(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"4\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"4\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;D&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n## 다중 인덱스가 있는 경우의 인덱싱\n\n데이터프레임이 다중 인덱스를 가지는 경우에는 인덱스 값이 하나의 라벨이나 숫자가 아니라 `()`로 둘러싸인 튜플이 되어야 한다. 예를 들어 앞에서 만든 `df3` 데이터프레임의 경우 다음과 같이 인덱싱할 수 있다.\n\n::: {#cell-36 .cell school_cell_uuid='690251593fe5453bbec4f171f7abf140' execution_count=13}\n``` {.python .cell-code}\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-37 .cell school_cell_uuid='fcf31bd4ec4c4421839fb5c77f5f17f9' execution_count=14}\n``` {.python .cell-code}\ndf3[(\"B\", \"C1\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n0    0.98\n1    0.95\n2    0.14\n3    0.44\n4    0.31\nName: (B, C1), dtype: float64\n```\n:::\n:::\n\n\n`loc` 인덱스를 사용하는 경우에도 마찬가지로 튜플을 써야 한다.\n\n::: {#cell-39 .cell school_cell_uuid='0cf4e403fb0848708c48e7acdd633955' execution_count=15}\n``` {.python .cell-code}\ndf3.loc[0, (\"B\", \"C1\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0.98\n```\n:::\n:::\n\n\n::: {#cell-40 .cell school_cell_uuid='94156e9adbdd4aadabdf722f14b3f3a2' execution_count=16}\n``` {.python .cell-code}\ndf3.loc[0, (\"B\", \"C1\")] = 100\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;100.00&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n단, `iloc` 인덱서를 사용하는 경우에는 튜플 형태의 다중인덱스를 사용할 수 없다.\n\n::: {#cell-42 .cell school_cell_uuid='0cf4e403fb0848708c48e7acdd633955' execution_count=17}\n``` {.python .cell-code}\ndf3.iloc[0, 2]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n100.0\n```\n:::\n:::\n\n\n만약 하나의 레벨 값만 넣으면 다중 인덱스 중에서 가장 상위의 값을 지정한 것으로 본다.\n\n::: {#cell-44 .cell school_cell_uuid='ce3b39e0c6c84018946f7a0a1d0304b9' execution_count=18}\n``` {.python .cell-code}\ndf3['A']\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n`df4` 데이터프레임은 다음과 같이 인덱싱할 수 있다.\n\n::: {#cell-46 .cell school_cell_uuid='1f6fae72c59b4c9b983c16ee3c459264' execution_count=19}\n``` {.python .cell-code}\ndf4\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-47 .cell school_cell_uuid='9b1a4ac9834b4b7795346b626a08247c' execution_count=20}\n``` {.python .cell-code}\ndf4.loc[(\"M\", \"id_1\"), (\"A\", \"C\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n1.76\n```\n:::\n:::\n\n\n::: {#cell-48 .cell school_cell_uuid='f715557b7990471bb9d4df2c28ea6171' execution_count=21}\n``` {.python .cell-code}\ndf4.loc[:, (\"A\", \"C\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nRidx1  Ridx2\nM      id_1     1.76\n       id_2     1.87\n       id_3    -0.10\nF      id_1     0.76\n       id_2     1.49\n       id_3    -2.55\nName: (A, C), dtype: float64\n```\n:::\n:::\n\n\n::: {#cell-49 .cell school_cell_uuid='869e3265ef564639b8cf720f00b30da9' execution_count=22}\n``` {.python .cell-code}\ndf4.loc[(\"M\", \"id_1\"), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nCidx1  Cidx2\nA      C        1.76\n       D        0.40\nB      C        0.98\n       D        2.24\nName: (M, id_1), dtype: float64\n```\n:::\n:::\n\n\n::: {#cell-50 .cell school_cell_uuid='7c98b82edf604573bc4db1b71f8e7fb4' execution_count=23}\n``` {.python .cell-code}\ndf4.loc[(\"All\", \"All\"), :] = df4.sum()\ndf4\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n`loc`를 사용하는 경우에도 튜플이 아닌 하나의 값만 쓰면 가장 상위의 인덱스를 지정한 것과 같다.\n\n::: {#cell-52 .cell execution_count=41}\n``` {.python .cell-code}\ndf4.loc[\"M\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`slice(None)`\n```\n\n\n특정 레벨의 모든 인덱스 값을 인덱싱할 때는 슬라이스를 사용한다. 다만 다중 인덱스의 튜플 내에서는 `:` 슬라이스 기호를 사용할 수 없고 대신 `slice(None)` 값을 사용해야 한다.\n\n::: {#cell-55 .cell execution_count=39}\n``` {.python .cell-code}\ndf4.loc[(\"M\", slice(None)), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-56 .cell execution_count=40}\n``` {.python .cell-code}\ndf4.loc[(slice(None), \"id_1\"), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n## 다중 인덱스의 인덱스 순서 교환\n\n다중 인덱스의 인덱스 순서를 바꾸고 싶으면 `swaplevel` 명령을 사용한다.\n\n* `swaplevel(i, j, axis)`\n\n`i`와 `j`는 교환하고자 하는 인덱스 라벨(혹은 인덱스 번호)이고 `axis`는 0일 때 행 인덱스, 1일 때 열 인덱스를 뜻한다. 디폴트는 행 인덱스이다.\n\n::: {#cell-59 .cell school_cell_uuid='8e76d407781b4d73a6d36dc8ec749ecd' execution_count=24}\n``` {.python .cell-code}\ndf5 = df4.swaplevel(\"Ridx1\", \"Ridx2\")\ndf5\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-60 .cell school_cell_uuid='956da57bb9f54938b4dbf1839c44b54a' execution_count=25}\n``` {.python .cell-code}\ndf6 = df4.swaplevel(\"Cidx1\", \"Cidx2\", 1)\ndf6\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n## 다중 인덱스가 있는 경우의 정렬\n\n다중 인덱스가 있는 데이터프레임을 `sort_index`로 정렬할 때는 `level` 인수를 사용하여 어떤 인덱스를 기준으로 정렬하는지 알려주어야 한다.\n\n::: {#cell-63 .cell school_cell_uuid='f4a968f72392416dacc8998634774450' execution_count=26}\n``` {.python .cell-code}\ndf5.sort_index(level=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-64 .cell school_cell_uuid='9a35b2296676451b87134cd952bfbc9c' execution_count=27}\n``` {.python .cell-code}\ndf6.sort_index(axis=1, level=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 4.5.2\n\nA 반 학생 5명과 B반 학생 5명의 국어, 영어, 수학 점수를 나타내는 데이터프레임을 다음과 같이 만든다.\n\n1. \"반\", \"번호\", \"국어\", \"영어\", \"수학\" 을 열로 가지는 데이터프레임 `df_score3`을 만든다.\n\n2. `df_score3`을 변형하여 1차 행 인덱스로 \"반\"을 2차 행 인덱스로 \"번호\"을 가지는 데이터프레임 `df_score4`을 만든다.\n\n3. 데이터 프레임 `df_score4`에 각 학생의 평균을 나타내는 행을 오른쪽에 추가한다.\n\n4. `df_score3`을 변형하여 행 인덱스로 \"번호\"를, 1차 열 인덱스로 \"국어\", \"영어\", \"수학\"을, 2차 열 인덱스로 \"반\"을 가지는 데이터프레임 `df_score5`을 만든다.\n\n5. 데이터 프레임 `df_score5`에 각 반별 각 과목의 평균을 나타내는 행을 아래에 추가한다."
  },
  {
    "objectID": "04.05 데이터프레임 인덱스 조작.html#데이터프레임-인덱스-설정-및-제거",
    "href": "04.05 데이터프레임 인덱스 조작.html#데이터프레임-인덱스-설정-및-제거",
    "title": "4.5 데이터프레임 인덱스 조작",
    "section": "",
    "text": "때로는 데이터프레임에 인덱스로 들어가 있어야 할 데이터가 일반 데이터 열에 들어가 있거나 반대로 일반 데이터 열이어야 할 것이 인덱스로 되어 있을 수 있다. 이 때는 set_index 명령이나 reset_index 명령으로 인덱스와 일반 데이터 열을 교환할 수 있다.\n\nset_index : 기존의 행 인덱스를 제거하고 데이터 열 중 하나를 인덱스로 설정\nreset_index : 기존의 행 인덱스를 제거하고 인덱스를 데이터 열로 추가\n\n\nnp.random.seed(0)\ndf1 = pd.DataFrame(np.vstack([list('ABCDE'),\n                              np.round(np.random.rand(3, 5), 2)]).T,\n                   columns=[\"C1\", \"C2\", \"C3\", \"C4\"])\ndf1\n\n\n\n\n\n\n\n\nC1\nC2\nC3\nC4\n\n\n\n\n0\nA\n0.55\n0.65\n0.79\n\n\n1\nB\n0.72\n0.44\n0.53\n\n\n2\nC\n0.6\n0.89\n0.57\n\n\n3\nD\n0.54\n0.96\n0.93\n\n\n4\nE\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\n`set_index`\nset_index 메서드로 특정한 열을 인덱스로 설정할 수 있다. 이 때 기존의 인덱스는 없어진다.\n\ndf2 = df1.set_index(\"C1\")\ndf2\n\n\n\n\n\n\n\n\nC2\nC3\nC4\n\n\nC1\n\n\n\n\n\n\n\nA\n0.55\n0.65\n0.79\n\n\nB\n0.72\n0.44\n0.53\n\n\nC\n0.6\n0.89\n0.57\n\n\nD\n0.54\n0.96\n0.93\n\n\nE\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\n마찬가지로 C2열을 인덱스로 지정하면 기존의 인덱스는 사라진다.\n\ndf2.set_index(\"C2\")\n\n\n\n\n\n\n\n\nC3\nC4\n\n\nC2\n\n\n\n\n\n\n0.55\n0.65\n0.79\n\n\n0.72\n0.44\n0.53\n\n\n0.6\n0.89\n0.57\n\n\n0.54\n0.96\n0.93\n\n\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\n`reset_index`\n반대로 reset_index 메서드를 쓰면 인덱스를 보통의 자료열로 바꿀 수도 있다. 이 때 인덱스 열은 자료열의 가장 선두로 삽입된다. 데이터프레임의 인덱스는 정수로 된 디폴트 인덱스로 바뀐다.\n\ndf2.reset_index()\n\n\n\n\n\n\n\n\nC1\nC2\nC3\nC4\n\n\n\n\n0\nA\n0.55\n0.65\n0.79\n\n\n1\nB\n0.72\n0.44\n0.53\n\n\n2\nC\n0.6\n0.89\n0.57\n\n\n3\nD\n0.54\n0.96\n0.93\n\n\n4\nE\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\nreset_index 메서드를 호출할 때 인수 drop=True 로 설정하면 인덱스 열을 보통의 자료열로 올리는 것이 아니라 그냥 버리게 된다.\n\ndf2.reset_index(drop=True)\n\n\n\n\n\n\n\n\nC2\nC3\nC4\n\n\n\n\n0\n0.55\n0.65\n0.79\n\n\n1\n0.72\n0.44\n0.53\n\n\n2\n0.6\n0.89\n0.57\n\n\n3\n0.54\n0.96\n0.93\n\n\n4\n0.42\n0.38\n0.07\n\n\n\n\n\n\n\n````gfzdezzvvcmv 연습 문제 4.5.1\n5명의 학생의 국어, 영어, 수학 점수를 나타내는 데이터프레임을 다음과 같이 만든다.\n\n학생 이름을 나타내는 열을 포함시키지 않고 데이터프레임 df_score1 을 생성한 후, df_score1.index 속성에 학생 이름을 나타내는 열을 지정하여 인덱스를 지정한다. reset_index 명령으로 이 인덱스 열을 명령으로 일반 데이터열로 바꾸여 데이터프레임 df_score2을 만든다.\n학생 이름을 나타내는 열이 일반 데이터 열을 포함하는 데이터프레임 df_score2에 set_index 명령을 적용하여 다시 학생 이름을 나타내는 열을 인덱스로 변경한다.\n\n\n## 다중 인덱스\n\n\n```{margin}\n다중 인덱스(multi-index)\n```\n\n\n행이나 열에 여러 계층을 가지는 인덱스 즉, 다중 인덱스(multi-index)를 설정할 수도 있다. 데이터프레임을 생성할 때 `columns` 인수에 다음 예제처럼 리스트의 리스트(행렬) 형태로 인덱스를 넣으면 다중 열 인덱스를 가지게 된다.\n\n::: {#cell-19 .cell school_cell_uuid='e73724b1d28046b68fa2ea7388b3adf0' execution_count=6}\n``` {.python .cell-code}\nnp.random.seed(0)\ndf3 = pd.DataFrame(np.round(np.random.randn(5, 4), 2),\n                   columns=[[\"A\", \"A\", \"B\", \"B\"],\n                            [\"C1\", \"C2\", \"C1\", \"C2\"]])\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`columns.names`\n```\n\n\n다중 인덱스는 이름을 지정하면 더 편리하게 사용할 수 있다. 열 인덱스들의 이름 지정은 `columns` 객체의 `names` 속성에 리스트를 넣어서 지정한다.\n\n::: {#cell-22 .cell school_cell_uuid='2b23c3ed18fd402d80f81cbe1b8ac28c' execution_count=7}\n``` {.python .cell-code}\ndf3.columns.names = [\"Cidx1\", \"Cidx2\"]\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`index.names`\n```\n\n\n마찬가지로 데이터프레임을 생성할 때 `index` 인수에 리스트의 리스트(행렬) 형태로 인덱스를 넣으면 다중 (행) 인덱스를 가진다. 행 인덱스들의 이름 지정은 `index` 객체의 `names` 속성에 리스트를 넣어서 지정한다.\n\n::: {#cell-25 .cell school_cell_uuid='c6d2c389122043e8ae3c8bf2e2ed6274' execution_count=8}\n``` {.python .cell-code}\nnp.random.seed(0)\ndf4 = pd.DataFrame(np.round(np.random.randn(6, 4), 2),\n                   columns=[[\"A\", \"A\", \"B\", \"B\"],\n                            [\"C\", \"D\", \"C\", \"D\"]],\n                   index=[[\"M\", \"M\", \"M\", \"F\", \"F\", \"F\"],\n                          [\"id_\" + str(i + 1) for i in range(3)] * 2])\ndf4.columns.names = [\"Cidx1\", \"Cidx2\"]\ndf4.index.names = [\"Ridx1\", \"Ridx2\"]\ndf4\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n## 행 인덱스와 열 인덱스 교환\n\n\n```{margin}\n`stack`\n```\n\n```{margin}\n`unstack`\n```\n\n\n`stack` 메서드나 `unstack` 메서드를 쓰면 열 인덱스를 행 인덱스로 바꾸거나 반대로 행 인덱스를 열 인덱스로 바꿀 수 있다.\n\n* `stack`\n * 열 인덱스 -&gt; 행 인덱스로 변환\n\n* `unstack`\n * 행 인덱스 -&gt; 열 인덱스로 변환\n\n`stack` 메서드를 실행하면 열 인덱스가 반시계 방향으로 90도 회전한 것과 비슷한 모양이 된다. 마찬가지로 `unstack` 메서드를 실행하면 행 인덱스가 시계 방향으로 90도 회전한 것과 비슷하다. 인덱스를 지정할 때는 문자열 이름과 순서를 표시하는 숫자 인덱스를 모두 사용할 수 있다.\n\n::: {#cell-30 .cell school_cell_uuid='1295839048044d02bdb3ba2f8f288b4a' execution_count=9}\n``` {.python .cell-code}\ndf4.stack(\"Cidx1\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"6\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"6\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-31 .cell school_cell_uuid='0c99952259c24011a4486346515006fa' execution_count=10}\n``` {.python .cell-code}\ndf4.stack(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"6\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"6\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-32 .cell school_cell_uuid='4b346e2d51bf49fba93f2810d0b9d71e' execution_count=11}\n``` {.python .cell-code}\ndf4.unstack(\"Ridx2\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"6\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"6\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th colspan=\"3\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"3\" halign=\"left\"&gt;D&lt;/th&gt;\n      &lt;th colspan=\"3\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"3\" halign=\"left\"&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-33 .cell school_cell_uuid='da7558b565e64844bcc3b504780ef641' execution_count=12}\n``` {.python .cell-code}\ndf4.unstack(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"4\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"4\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;D&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n## 다중 인덱스가 있는 경우의 인덱싱\n\n데이터프레임이 다중 인덱스를 가지는 경우에는 인덱스 값이 하나의 라벨이나 숫자가 아니라 `()`로 둘러싸인 튜플이 되어야 한다. 예를 들어 앞에서 만든 `df3` 데이터프레임의 경우 다음과 같이 인덱싱할 수 있다.\n\n::: {#cell-36 .cell school_cell_uuid='690251593fe5453bbec4f171f7abf140' execution_count=13}\n``` {.python .cell-code}\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-37 .cell school_cell_uuid='fcf31bd4ec4c4421839fb5c77f5f17f9' execution_count=14}\n``` {.python .cell-code}\ndf3[(\"B\", \"C1\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n0    0.98\n1    0.95\n2    0.14\n3    0.44\n4    0.31\nName: (B, C1), dtype: float64\n```\n:::\n:::\n\n\n`loc` 인덱스를 사용하는 경우에도 마찬가지로 튜플을 써야 한다.\n\n::: {#cell-39 .cell school_cell_uuid='0cf4e403fb0848708c48e7acdd633955' execution_count=15}\n``` {.python .cell-code}\ndf3.loc[0, (\"B\", \"C1\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0.98\n```\n:::\n:::\n\n\n::: {#cell-40 .cell school_cell_uuid='94156e9adbdd4aadabdf722f14b3f3a2' execution_count=16}\n``` {.python .cell-code}\ndf3.loc[0, (\"B\", \"C1\")] = 100\ndf3\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;100.00&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n단, `iloc` 인덱서를 사용하는 경우에는 튜플 형태의 다중인덱스를 사용할 수 없다.\n\n::: {#cell-42 .cell school_cell_uuid='0cf4e403fb0848708c48e7acdd633955' execution_count=17}\n``` {.python .cell-code}\ndf3.iloc[0, 2]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n100.0\n```\n:::\n:::\n\n\n만약 하나의 레벨 값만 넣으면 다중 인덱스 중에서 가장 상위의 값을 지정한 것으로 본다.\n\n::: {#cell-44 .cell school_cell_uuid='ce3b39e0c6c84018946f7a0a1d0304b9' execution_count=18}\n``` {.python .cell-code}\ndf3['A']\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C1&lt;/th&gt;\n      &lt;th&gt;C2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n`df4` 데이터프레임은 다음과 같이 인덱싱할 수 있다.\n\n::: {#cell-46 .cell school_cell_uuid='1f6fae72c59b4c9b983c16ee3c459264' execution_count=19}\n``` {.python .cell-code}\ndf4\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-47 .cell school_cell_uuid='9b1a4ac9834b4b7795346b626a08247c' execution_count=20}\n``` {.python .cell-code}\ndf4.loc[(\"M\", \"id_1\"), (\"A\", \"C\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n1.76\n```\n:::\n:::\n\n\n::: {#cell-48 .cell school_cell_uuid='f715557b7990471bb9d4df2c28ea6171' execution_count=21}\n``` {.python .cell-code}\ndf4.loc[:, (\"A\", \"C\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nRidx1  Ridx2\nM      id_1     1.76\n       id_2     1.87\n       id_3    -0.10\nF      id_1     0.76\n       id_2     1.49\n       id_3    -2.55\nName: (A, C), dtype: float64\n```\n:::\n:::\n\n\n::: {#cell-49 .cell school_cell_uuid='869e3265ef564639b8cf720f00b30da9' execution_count=22}\n``` {.python .cell-code}\ndf4.loc[(\"M\", \"id_1\"), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nCidx1  Cidx2\nA      C        1.76\n       D        0.40\nB      C        0.98\n       D        2.24\nName: (M, id_1), dtype: float64\n```\n:::\n:::\n\n\n::: {#cell-50 .cell school_cell_uuid='7c98b82edf604573bc4db1b71f8e7fb4' execution_count=23}\n``` {.python .cell-code}\ndf4.loc[(\"All\", \"All\"), :] = df4.sum()\ndf4\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n`loc`를 사용하는 경우에도 튜플이 아닌 하나의 값만 쓰면 가장 상위의 인덱스를 지정한 것과 같다.\n\n::: {#cell-52 .cell execution_count=41}\n``` {.python .cell-code}\ndf4.loc[\"M\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`slice(None)`\n```\n\n\n특정 레벨의 모든 인덱스 값을 인덱싱할 때는 슬라이스를 사용한다. 다만 다중 인덱스의 튜플 내에서는 `:` 슬라이스 기호를 사용할 수 없고 대신 `slice(None)` 값을 사용해야 한다.\n\n::: {#cell-55 .cell execution_count=39}\n``` {.python .cell-code}\ndf4.loc[(\"M\", slice(None)), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-56 .cell execution_count=40}\n``` {.python .cell-code}\ndf4.loc[(slice(None), \"id_1\"), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n## 다중 인덱스의 인덱스 순서 교환\n\n다중 인덱스의 인덱스 순서를 바꾸고 싶으면 `swaplevel` 명령을 사용한다.\n\n* `swaplevel(i, j, axis)`\n\n`i`와 `j`는 교환하고자 하는 인덱스 라벨(혹은 인덱스 번호)이고 `axis`는 0일 때 행 인덱스, 1일 때 열 인덱스를 뜻한다. 디폴트는 행 인덱스이다.\n\n::: {#cell-59 .cell school_cell_uuid='8e76d407781b4d73a6d36dc8ec749ecd' execution_count=24}\n``` {.python .cell-code}\ndf5 = df4.swaplevel(\"Ridx1\", \"Ridx2\")\ndf5\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-60 .cell school_cell_uuid='956da57bb9f54938b4dbf1839c44b54a' execution_count=25}\n``` {.python .cell-code}\ndf6 = df4.swaplevel(\"Cidx1\", \"Cidx2\", 1)\ndf6\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n## 다중 인덱스가 있는 경우의 정렬\n\n다중 인덱스가 있는 데이터프레임을 `sort_index`로 정렬할 때는 `level` 인수를 사용하여 어떤 인덱스를 기준으로 정렬하는지 알려주어야 한다.\n\n::: {#cell-63 .cell school_cell_uuid='f4a968f72392416dacc8998634774450' execution_count=26}\n``` {.python .cell-code}\ndf5.sort_index(level=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;A&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_1&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_2&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;id_3&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;M&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-64 .cell school_cell_uuid='9a35b2296676451b87134cd952bfbc9c' execution_count=27}\n``` {.python .cell-code}\ndf6.sort_index(axis=1, level=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx2&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;C&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;D&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Cidx1&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Ridx1&lt;/th&gt;\n      &lt;th&gt;Ridx2&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;M&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;1.76&lt;/td&gt;\n      &lt;td&gt;0.98&lt;/td&gt;\n      &lt;td&gt;0.40&lt;/td&gt;\n      &lt;td&gt;2.24&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.87&lt;/td&gt;\n      &lt;td&gt;0.95&lt;/td&gt;\n      &lt;td&gt;-0.98&lt;/td&gt;\n      &lt;td&gt;-0.15&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-0.10&lt;/td&gt;\n      &lt;td&gt;0.14&lt;/td&gt;\n      &lt;td&gt;0.41&lt;/td&gt;\n      &lt;td&gt;1.45&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;F&lt;/th&gt;\n      &lt;th&gt;id_1&lt;/th&gt;\n      &lt;td&gt;0.76&lt;/td&gt;\n      &lt;td&gt;0.44&lt;/td&gt;\n      &lt;td&gt;0.12&lt;/td&gt;\n      &lt;td&gt;0.33&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_2&lt;/th&gt;\n      &lt;td&gt;1.49&lt;/td&gt;\n      &lt;td&gt;0.31&lt;/td&gt;\n      &lt;td&gt;-0.21&lt;/td&gt;\n      &lt;td&gt;-0.85&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id_3&lt;/th&gt;\n      &lt;td&gt;-2.55&lt;/td&gt;\n      &lt;td&gt;0.86&lt;/td&gt;\n      &lt;td&gt;0.65&lt;/td&gt;\n      &lt;td&gt;-0.74&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;th&gt;All&lt;/th&gt;\n      &lt;td&gt;3.23&lt;/td&gt;\n      &lt;td&gt;3.68&lt;/td&gt;\n      &lt;td&gt;0.39&lt;/td&gt;\n      &lt;td&gt;2.28&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 4.5.2\n\nA 반 학생 5명과 B반 학생 5명의 국어, 영어, 수학 점수를 나타내는 데이터프레임을 다음과 같이 만든다.\n\n1. \"반\", \"번호\", \"국어\", \"영어\", \"수학\" 을 열로 가지는 데이터프레임 `df_score3`을 만든다.\n\n2. `df_score3`을 변형하여 1차 행 인덱스로 \"반\"을 2차 행 인덱스로 \"번호\"을 가지는 데이터프레임 `df_score4`을 만든다.\n\n3. 데이터 프레임 `df_score4`에 각 학생의 평균을 나타내는 행을 오른쪽에 추가한다.\n\n4. `df_score3`을 변형하여 행 인덱스로 \"번호\"를, 1차 열 인덱스로 \"국어\", \"영어\", \"수학\"을, 2차 열 인덱스로 \"반\"을 가지는 데이터프레임 `df_score5`을 만든다.\n\n5. 데이터 프레임 `df_score5`에 각 반별 각 과목의 평균을 나타내는 행을 아래에 추가한다."
  },
  {
    "objectID": "04.07 피봇테이블과 그룹분석.html",
    "href": "04.07 피봇테이블과 그룹분석.html",
    "title": "4.7 피봇테이블과 그룹분석",
    "section": "",
    "text": "`pivot`\n피봇테이블(pivot table)이란 데이터 열 중에서 두 개의 열을 각각 행 인덱스, 열 인덱스로 사용하여 데이터를 조회하여 펼쳐놓은 것을 말한다.\n판다스는 피봇테이블을 만들기 위한 pivot 메서드를 제공한다. 첫번째 인수로는 행 인덱스로 사용할 열 이름, 두번째 인수로는 열 인덱스로 사용할 열 이름, 그리고 마지막으로 데이터로 사용할 열 이름을 넣는다.\n판다스는 지정된 두 열을 각각 행 인덱스와 열 인덱스로 바꾼 후 행 인덱스의 라벨 값이 첫번째 키의 값과 같고 열 인덱스의 라벨 값이 두번째 키의 값과 같은 데이터를 찾아서 해당 칸에 넣는다. 만약 주어진 데이터가 존재하지 않으면 해당 칸에 NaN 값을 넣는다.\n다음 데이터는 각 도시의 연도별 인구를 나타낸 것이다.\n\ndata = {\n    \"도시\": [\"서울\", \"서울\", \"서울\", \"부산\", \"부산\", \"부산\", \"인천\", \"인천\"],\n    \"연도\": [\"2015\", \"2010\", \"2005\", \"2015\", \"2010\", \"2005\", \"2015\", \"2010\"],\n    \"인구\": [9904312, 9631482, 9762546, 3448737, 3393191, 3512547, 2890451, 263203],\n    \"지역\": [\"수도권\", \"수도권\", \"수도권\", \"경상권\", \"경상권\", \"경상권\", \"수도권\", \"수도권\"]\n}\ncolumns = [\"도시\", \"연도\", \"인구\", \"지역\"]\ndf1 = pd.DataFrame(data, columns=columns)\ndf1\n\n\n\n\n\n\n\n\n도시\n연도\n인구\n지역\n\n\n\n\n0\n서울\n2015\n9904312\n수도권\n\n\n1\n서울\n2010\n9631482\n수도권\n\n\n2\n서울\n2005\n9762546\n수도권\n\n\n3\n부산\n2015\n3448737\n경상권\n\n\n4\n부산\n2010\n3393191\n경상권\n\n\n5\n부산\n2005\n3512547\n경상권\n\n\n6\n인천\n2015\n2890451\n수도권\n\n\n7\n인천\n2010\n263203\n수도권\n\n\n\n\n\n\n\n이 데이터를 도시 이름이 열 인덱스가 되고 연도가 행 인덱스가 되어 행과 열 인덱스만 보면 어떤 도시의 어떤 시점의 인구를 쉽게 알 수 있도록 피봇테이블로 만들어보자. pivot 명령으로 사용하고 행 인덱스 인수로는 \"도시\", 열 인덱스 인수로는 \"연도\", 데이터 이름으로 \"인구\"를 입력하면 된다.\n\ndf1.pivot(\"도시\", \"연도\", \"인구\")\n\n\n\n\n\n\n\n연도\n2005\n2010\n2015\n\n\n도시\n\n\n\n\n\n\n\n부산\n3512547.0\n3393191.0\n3448737.0\n\n\n서울\n9762546.0\n9631482.0\n9904312.0\n\n\n인천\nNaN\n263203.0\n2890451.0\n\n\n\n\n\n\n\n이 피봇테이블의 값 3512547은 “도시”가 부산이고 “연도”가 2005년인 데이터를 “인구”열에서 찾은 값이다. 2005년 인천의 인구는 데이터에 없기 때문에 NaN으로 표시된다.\n피봇테이블은 다음과 같이 set_index 명령과 unstack 명령을 사용해서 만들 수도 있다.\n\ndf1.set_index([\"도시\", \"연도\"])[[\"인구\"]].unstack()\n\n\n\n\n\n\n\n\n인구\n\n\n연도\n2005\n2010\n2015\n\n\n도시\n\n\n\n\n\n\n\n부산\n3512547.0\n3393191.0\n3448737.0\n\n\n서울\n9762546.0\n9631482.0\n9904312.0\n\n\n인천\nNaN\n263203.0\n2890451.0\n\n\n\n\n\n\n\n행 인덱스나 열 인덱스를 리스트로 주는 경우에는 다중 인덱스 피봇 테이블을 생성한다. (주의: 판다스 버전 1.1 미만에서는 버그로 인해 동작하지 않는다.)\n\ndf1.pivot([\"지역\", \"도시\"], \"연도\", \"인구\")\n\n\n\n\n\n\n\n\n연도\n2005\n2010\n2015\n\n\n지역\n도시\n\n\n\n\n\n\n\n경상권\n부산\n3512547.0\n3393191.0\n3448737.0\n\n\n수도권\n서울\n9762546.0\n9631482.0\n9904312.0\n\n\n인천\nNaN\n263203.0\n2890451.0\n\n\n\n\n\n\n\n행 인덱스와 열 인덱스는 데이터를 찾는 키(key)의 역할을 한다. 따라서 키 값으로 데이터가 단 하나만 찾아져야 한다. 만약 행 인덱스와 열 인덱스 조건을 만족하는 데이터가 2개 이상인 경우에는 에러가 발생한다. 예를 들어 위 데이터프레임에서 (“지역”, “연도”)를 키로 하면 (“수도권”, “2015”)에 해당하는 값이 두 개 이상이므로 다음과 같이 에러가 발생한다.\n\ntry:\n    df1.pivot(\"지역\", \"연도\", \"인구\")\nexcept ValueError as e:\n    print(\"ValueError:\", e)\n\nValueError: Index contains duplicate entries, cannot reshape"
  },
  {
    "objectID": "04.07 피봇테이블과 그룹분석.html#피봇테이블",
    "href": "04.07 피봇테이블과 그룹분석.html#피봇테이블",
    "title": "4.7 피봇테이블과 그룹분석",
    "section": "",
    "text": "`pivot`\n피봇테이블(pivot table)이란 데이터 열 중에서 두 개의 열을 각각 행 인덱스, 열 인덱스로 사용하여 데이터를 조회하여 펼쳐놓은 것을 말한다.\n판다스는 피봇테이블을 만들기 위한 pivot 메서드를 제공한다. 첫번째 인수로는 행 인덱스로 사용할 열 이름, 두번째 인수로는 열 인덱스로 사용할 열 이름, 그리고 마지막으로 데이터로 사용할 열 이름을 넣는다.\n판다스는 지정된 두 열을 각각 행 인덱스와 열 인덱스로 바꾼 후 행 인덱스의 라벨 값이 첫번째 키의 값과 같고 열 인덱스의 라벨 값이 두번째 키의 값과 같은 데이터를 찾아서 해당 칸에 넣는다. 만약 주어진 데이터가 존재하지 않으면 해당 칸에 NaN 값을 넣는다.\n다음 데이터는 각 도시의 연도별 인구를 나타낸 것이다.\n\ndata = {\n    \"도시\": [\"서울\", \"서울\", \"서울\", \"부산\", \"부산\", \"부산\", \"인천\", \"인천\"],\n    \"연도\": [\"2015\", \"2010\", \"2005\", \"2015\", \"2010\", \"2005\", \"2015\", \"2010\"],\n    \"인구\": [9904312, 9631482, 9762546, 3448737, 3393191, 3512547, 2890451, 263203],\n    \"지역\": [\"수도권\", \"수도권\", \"수도권\", \"경상권\", \"경상권\", \"경상권\", \"수도권\", \"수도권\"]\n}\ncolumns = [\"도시\", \"연도\", \"인구\", \"지역\"]\ndf1 = pd.DataFrame(data, columns=columns)\ndf1\n\n\n\n\n\n\n\n\n도시\n연도\n인구\n지역\n\n\n\n\n0\n서울\n2015\n9904312\n수도권\n\n\n1\n서울\n2010\n9631482\n수도권\n\n\n2\n서울\n2005\n9762546\n수도권\n\n\n3\n부산\n2015\n3448737\n경상권\n\n\n4\n부산\n2010\n3393191\n경상권\n\n\n5\n부산\n2005\n3512547\n경상권\n\n\n6\n인천\n2015\n2890451\n수도권\n\n\n7\n인천\n2010\n263203\n수도권\n\n\n\n\n\n\n\n이 데이터를 도시 이름이 열 인덱스가 되고 연도가 행 인덱스가 되어 행과 열 인덱스만 보면 어떤 도시의 어떤 시점의 인구를 쉽게 알 수 있도록 피봇테이블로 만들어보자. pivot 명령으로 사용하고 행 인덱스 인수로는 \"도시\", 열 인덱스 인수로는 \"연도\", 데이터 이름으로 \"인구\"를 입력하면 된다.\n\ndf1.pivot(\"도시\", \"연도\", \"인구\")\n\n\n\n\n\n\n\n연도\n2005\n2010\n2015\n\n\n도시\n\n\n\n\n\n\n\n부산\n3512547.0\n3393191.0\n3448737.0\n\n\n서울\n9762546.0\n9631482.0\n9904312.0\n\n\n인천\nNaN\n263203.0\n2890451.0\n\n\n\n\n\n\n\n이 피봇테이블의 값 3512547은 “도시”가 부산이고 “연도”가 2005년인 데이터를 “인구”열에서 찾은 값이다. 2005년 인천의 인구는 데이터에 없기 때문에 NaN으로 표시된다.\n피봇테이블은 다음과 같이 set_index 명령과 unstack 명령을 사용해서 만들 수도 있다.\n\ndf1.set_index([\"도시\", \"연도\"])[[\"인구\"]].unstack()\n\n\n\n\n\n\n\n\n인구\n\n\n연도\n2005\n2010\n2015\n\n\n도시\n\n\n\n\n\n\n\n부산\n3512547.0\n3393191.0\n3448737.0\n\n\n서울\n9762546.0\n9631482.0\n9904312.0\n\n\n인천\nNaN\n263203.0\n2890451.0\n\n\n\n\n\n\n\n행 인덱스나 열 인덱스를 리스트로 주는 경우에는 다중 인덱스 피봇 테이블을 생성한다. (주의: 판다스 버전 1.1 미만에서는 버그로 인해 동작하지 않는다.)\n\ndf1.pivot([\"지역\", \"도시\"], \"연도\", \"인구\")\n\n\n\n\n\n\n\n\n연도\n2005\n2010\n2015\n\n\n지역\n도시\n\n\n\n\n\n\n\n경상권\n부산\n3512547.0\n3393191.0\n3448737.0\n\n\n수도권\n서울\n9762546.0\n9631482.0\n9904312.0\n\n\n인천\nNaN\n263203.0\n2890451.0\n\n\n\n\n\n\n\n행 인덱스와 열 인덱스는 데이터를 찾는 키(key)의 역할을 한다. 따라서 키 값으로 데이터가 단 하나만 찾아져야 한다. 만약 행 인덱스와 열 인덱스 조건을 만족하는 데이터가 2개 이상인 경우에는 에러가 발생한다. 예를 들어 위 데이터프레임에서 (“지역”, “연도”)를 키로 하면 (“수도권”, “2015”)에 해당하는 값이 두 개 이상이므로 다음과 같이 에러가 발생한다.\n\ntry:\n    df1.pivot(\"지역\", \"연도\", \"인구\")\nexcept ValueError as e:\n    print(\"ValueError:\", e)\n\nValueError: Index contains duplicate entries, cannot reshape"
  },
  {
    "objectID": "04.07 피봇테이블과 그룹분석.html#그룹분석",
    "href": "04.07 피봇테이블과 그룹분석.html#그룹분석",
    "title": "4.7 피봇테이블과 그룹분석",
    "section": "그룹분석",
    "text": "그룹분석\n만약 키가 지정하는 조건에 맞는 데이터가 하나 이상이라서 데이터 그룹을 이루는 경우에는 그룹의 특성을 보여주는 그룹분석(group analysis)을 해야 한다.\n그룹분석은 피봇테이블과 달리 키에 의해서 결정되는 데이터가 여러개가 있을 경우 미리 지정한 연산을 통해 그 그룹 데이터의 대표값을 계산한다. 판다스에서는 groupby 메서드를 사용하여 다음처럼 그룹분석을 한다.\n\n분석하고자 하는 시리즈나 데이터프레임에 groupby 메서드를 호출하여 그룹화를 한다.\n그룹 객체에 대해 그룹연산을 수행한다.\n\n`groupby`\n\ngroupby 메서드\ngroupby 메서드는 데이터를 그룹 별로 분류하는 역할을 한다. groupby 메서드의 인수로는 다음과 같은 값을 사용한다.\n\n열 또는 열의 리스트\n행 인덱스\n\n연산 결과로 그룹 데이터를 나타내는 GroupBy 클래스 객체를 반환한다. 이 객체에는 그룹별로 연산을 할 수 있는 그룹연산 메서드가 있다.\n\n\n그룹연산 메서드\ngroupby 결과, 즉 GroupBy 클래스 객체의 뒤에 붙일 수 있는 그룹연산 메서드는 다양하다. 다음은 자주 사용되는 그룹연산 메서드들이다.\n\nsize, count: 그룹 데이터의 갯수\nmean, median, min, max: 그룹 데이터의 평균, 중앙값, 최소, 최대\nsum, prod, std, var, quantile : 그룹 데이터의 합계, 곱, 표준편차, 분산, 사분위수\nfirst, last: 그룹 데이터 중 가장 첫번째 데이터와 가장 나중 데이터\n\n이 외에도 많이 사용되는 것으로는 다음과 같은 그룹연산이 있다.\n\nagg, aggregate\n\n만약 원하는 그룹연산이 없는 경우 함수를 만들고 이 함수를 agg에 전달한다.\n또는 여러가지 그룹연산을 동시에 하고 싶은 경우 함수 이름 문자열의 리스트를 전달한다.\n\ndescribe\n\n하나의 그룹 대표값이 아니라 여러개의 값을 데이터프레임으로 구한다.\n\napply\n\ndescribe 처럼 하나의 대표값이 아닌 데이터프레임을 출력하지만 원하는 그룹연산이 없는 경우에 사용한다.\n\ntransform\n\n그룹에 대한 대표값을 만드는 것이 아니라 그룹별 계산을 통해 데이터 자체를 변형한다.\n\n\n예를 들어 다음과 같은 데이터가 있을 때 key1의 값(A 또는 B)에 따른 data1의 평균은 어떻게 구할까?\n\nnp.random.seed(0)\ndf2 = pd.DataFrame({\n    'key1': ['A', 'A', 'B', 'B', 'A'],\n    'key2': ['one', 'two', 'one', 'two', 'one'],\n    'data1': [1, 2, 3, 4, 5],\n    'data2': [10, 20, 30, 40, 50]\n})\ndf2\n\n\n\n\n\n\n\n\nkey1\nkey2\ndata1\ndata2\n\n\n\n\n0\nA\none\n1\n10\n\n\n1\nA\ntwo\n2\n20\n\n\n2\nB\none\n3\n30\n\n\n3\nB\ntwo\n4\n40\n\n\n4\nA\none\n5\n50\n\n\n\n\n\n\n\ngroupby 명령을 사용하여 그룹 A와 그룹 B로 구분한 그룹 데이터를 만든다.\n\ngroups = df2.groupby(df2.key1)\ngroups\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fc4910a00d0&gt;\n\n\n이 GroupBy 클래스 객체에는 각 그룹 데이터의 인덱스를 저장한 groups 속성이 있다.\n\ngroups.groups\n\n{'A': [0, 1, 4], 'B': [2, 3]}\n\n\nA그룹과 B그룹 데이터의 합계를 구하기 위해 sum이라는 그룹연산을 한다.\n\ngroups.sum()\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\nkey1\n\n\n\n\n\n\nA\n8\n80\n\n\nB\n7\n70\n\n\n\n\n\n\n\nGroupBy 클래스 객체를 명시적으로 얻을 필요가 없다면 groupby 메서드와 그룹연산 메서드를 연속으로 호출한다. 다음 예제는 열 data1에 대해서만 그룹연산을 하는 코드이다.\n\ndf2.data1.groupby(df2.key1).sum()\n\nkey1\nA    8\nB    7\nName: data1, dtype: int64\n\n\n데이터를 그룹으로 나눈 GroupBy 클래스 객체 또는 그룹분석한 결과에서 data1만 뽑아도 된다.\n\ndf2.groupby(df2.key1)[\"data1\"].sum()   # `GroupBy` 클래스 객체에서 data1만 선택하여 분석하는 경우\n\nkey1\nA    8\nB    7\nName: data1, dtype: int64\n\n\n\ndf2.groupby(df2.key1).sum()[\"data1\"]  # 전체 데이터를 분석한 후 data1만 선택한 경우\n\nkey1\nA    8\nB    7\nName: data1, dtype: int64\n\n\n````fmzogbgxczaq 연습 문제 4.7.1\nkey1의 값을 기준으로 data1의 값을 분류하여 합계를 구한 결과를 시리즈가 아닌 데이터프레임으로 구한다.\n\n이번에는 복합 키 (key1, key2) 값에 따른 data1의 합계를 구하자. \n분석하고자 하는 키가 복수이면 리스트를 사용한다.\n\n::: {#cell-38 .cell school_cell_uuid='c360c8775f9040618f78e52811f52efc' execution_count=13}\n``` {.python .cell-code}\ndf2.data1.groupby([df2.key1, df2.key2]).sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nkey1  key2\nA     one     6\n      two     2\nB     one     3\n      two     4\nName: data1, dtype: int64\n```\n:::\n:::\n\n\n이 결과를 `unstack` 명령으로 피봇 데이블 형태로 만들수도 있다.\n\n::: {#cell-40 .cell school_cell_uuid='eaf18468cc3b4d188d18d069a2e39618' execution_count=14}\n``` {.python .cell-code}\ndf2.data1.groupby([df2[\"key1\"], df2[\"key2\"]]).sum().unstack(\"key2\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;key2&lt;/th&gt;\n      &lt;th&gt;one&lt;/th&gt;\n      &lt;th&gt;two&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;key1&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;td&gt;6&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n그룹분석 기능을 사용하면 위의 인구 데이터로부터 지역별 합계를 구할 수도 있다.\n\n::: {#cell-42 .cell school_cell_uuid='6fdfb59cac404fafba3d23d0bdbb4206' execution_count=15}\n``` {.python .cell-code}\ndf1[\"인구\"].groupby([df1[\"지역\"], df1[\"연도\"]]).sum().unstack(\"연도\")\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;연도&lt;/th&gt;\n      &lt;th&gt;2005&lt;/th&gt;\n      &lt;th&gt;2010&lt;/th&gt;\n      &lt;th&gt;2015&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;지역&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;경상권&lt;/th&gt;\n      &lt;td&gt;3512547&lt;/td&gt;\n      &lt;td&gt;3393191&lt;/td&gt;\n      &lt;td&gt;3448737&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;수도권&lt;/th&gt;\n      &lt;td&gt;9762546&lt;/td&gt;\n      &lt;td&gt;9894685&lt;/td&gt;\n      &lt;td&gt;12794763&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n다음 데이터는 150 송이의 붓꽃(iris)에 대해 붓꽃 종(species)별로 꽃잎길이(sepal_length), 꽃잎폭(sepal_width), 꽃잎폭(sepal_width), 꽃잎폭(sepal_width)을 측정한 데이터이다. \n\n::: {#cell-44 .cell school_cell_uuid='c998ff1907d6438e911ea526efabcdac' execution_count=16}\n``` {.python .cell-code}\nimport seaborn as sns\niris = sns.load_dataset(\"iris\")\n```\n:::\n\n\n각 붓꽃 종별로 가장 큰 값과 가장 작은 값의 비율을 구해보자. 이러한 계산을 하는 그룹연산 메서드는 없으므로 직접 만든 후 `agg` 메서드를 적용한다.\n\n::: {#cell-46 .cell school_cell_uuid='8b4000bc559947159cf21e78896d9e03' execution_count=17}\n``` {.python .cell-code}\ndef peak_to_peak_ratio(x):\n    return x.max() / x.min()\n\niris.groupby(iris.species).agg(peak_to_peak_ratio)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;sepal_length&lt;/th&gt;\n      &lt;th&gt;sepal_width&lt;/th&gt;\n      &lt;th&gt;petal_length&lt;/th&gt;\n      &lt;th&gt;petal_width&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;species&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;setosa&lt;/th&gt;\n      &lt;td&gt;1.348837&lt;/td&gt;\n      &lt;td&gt;1.913043&lt;/td&gt;\n      &lt;td&gt;1.900000&lt;/td&gt;\n      &lt;td&gt;6.000000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;versicolor&lt;/th&gt;\n      &lt;td&gt;1.428571&lt;/td&gt;\n      &lt;td&gt;1.700000&lt;/td&gt;\n      &lt;td&gt;1.700000&lt;/td&gt;\n      &lt;td&gt;1.800000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;virginica&lt;/th&gt;\n      &lt;td&gt;1.612245&lt;/td&gt;\n      &lt;td&gt;1.727273&lt;/td&gt;\n      &lt;td&gt;1.533333&lt;/td&gt;\n      &lt;td&gt;1.785714&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`describe`\n```\n\n\n`describe` 메서드를 사용하면 다양한 기술 통계(descriptive statistics)값을 한 번에 구한다. 그룹별로 하나의 스칼라 값이 아니라 하나의 데이터프레임이 생성된다는 점에 주의하라.\n\n::: {#cell-49 .cell school_cell_uuid='2b5f4c36cbac43628e0e43f3140a6165' execution_count=18}\n``` {.python .cell-code}\niris.groupby(iris.species).describe().T\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;species&lt;/th&gt;\n      &lt;th&gt;setosa&lt;/th&gt;\n      &lt;th&gt;versicolor&lt;/th&gt;\n      &lt;th&gt;virginica&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"8\" valign=\"top\"&gt;sepal_length&lt;/th&gt;\n      &lt;th&gt;count&lt;/th&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;mean&lt;/th&gt;\n      &lt;td&gt;5.006000&lt;/td&gt;\n      &lt;td&gt;5.936000&lt;/td&gt;\n      &lt;td&gt;6.588000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;std&lt;/th&gt;\n      &lt;td&gt;0.352490&lt;/td&gt;\n      &lt;td&gt;0.516171&lt;/td&gt;\n      &lt;td&gt;0.635880&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;min&lt;/th&gt;\n      &lt;td&gt;4.300000&lt;/td&gt;\n      &lt;td&gt;4.900000&lt;/td&gt;\n      &lt;td&gt;4.900000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;25%&lt;/th&gt;\n      &lt;td&gt;4.800000&lt;/td&gt;\n      &lt;td&gt;5.600000&lt;/td&gt;\n      &lt;td&gt;6.225000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;50%&lt;/th&gt;\n      &lt;td&gt;5.000000&lt;/td&gt;\n      &lt;td&gt;5.900000&lt;/td&gt;\n      &lt;td&gt;6.500000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;75%&lt;/th&gt;\n      &lt;td&gt;5.200000&lt;/td&gt;\n      &lt;td&gt;6.300000&lt;/td&gt;\n      &lt;td&gt;6.900000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;max&lt;/th&gt;\n      &lt;td&gt;5.800000&lt;/td&gt;\n      &lt;td&gt;7.000000&lt;/td&gt;\n      &lt;td&gt;7.900000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"8\" valign=\"top\"&gt;sepal_width&lt;/th&gt;\n      &lt;th&gt;count&lt;/th&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;mean&lt;/th&gt;\n      &lt;td&gt;3.428000&lt;/td&gt;\n      &lt;td&gt;2.770000&lt;/td&gt;\n      &lt;td&gt;2.974000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;std&lt;/th&gt;\n      &lt;td&gt;0.379064&lt;/td&gt;\n      &lt;td&gt;0.313798&lt;/td&gt;\n      &lt;td&gt;0.322497&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;min&lt;/th&gt;\n      &lt;td&gt;2.300000&lt;/td&gt;\n      &lt;td&gt;2.000000&lt;/td&gt;\n      &lt;td&gt;2.200000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;25%&lt;/th&gt;\n      &lt;td&gt;3.200000&lt;/td&gt;\n      &lt;td&gt;2.525000&lt;/td&gt;\n      &lt;td&gt;2.800000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;50%&lt;/th&gt;\n      &lt;td&gt;3.400000&lt;/td&gt;\n      &lt;td&gt;2.800000&lt;/td&gt;\n      &lt;td&gt;3.000000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;75%&lt;/th&gt;\n      &lt;td&gt;3.675000&lt;/td&gt;\n      &lt;td&gt;3.000000&lt;/td&gt;\n      &lt;td&gt;3.175000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;max&lt;/th&gt;\n      &lt;td&gt;4.400000&lt;/td&gt;\n      &lt;td&gt;3.400000&lt;/td&gt;\n      &lt;td&gt;3.800000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"8\" valign=\"top\"&gt;petal_length&lt;/th&gt;\n      &lt;th&gt;count&lt;/th&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;mean&lt;/th&gt;\n      &lt;td&gt;1.462000&lt;/td&gt;\n      &lt;td&gt;4.260000&lt;/td&gt;\n      &lt;td&gt;5.552000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;std&lt;/th&gt;\n      &lt;td&gt;0.173664&lt;/td&gt;\n      &lt;td&gt;0.469911&lt;/td&gt;\n      &lt;td&gt;0.551895&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;min&lt;/th&gt;\n      &lt;td&gt;1.000000&lt;/td&gt;\n      &lt;td&gt;3.000000&lt;/td&gt;\n      &lt;td&gt;4.500000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;25%&lt;/th&gt;\n      &lt;td&gt;1.400000&lt;/td&gt;\n      &lt;td&gt;4.000000&lt;/td&gt;\n      &lt;td&gt;5.100000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;50%&lt;/th&gt;\n      &lt;td&gt;1.500000&lt;/td&gt;\n      &lt;td&gt;4.350000&lt;/td&gt;\n      &lt;td&gt;5.550000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;75%&lt;/th&gt;\n      &lt;td&gt;1.575000&lt;/td&gt;\n      &lt;td&gt;4.600000&lt;/td&gt;\n      &lt;td&gt;5.875000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;max&lt;/th&gt;\n      &lt;td&gt;1.900000&lt;/td&gt;\n      &lt;td&gt;5.100000&lt;/td&gt;\n      &lt;td&gt;6.900000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"8\" valign=\"top\"&gt;petal_width&lt;/th&gt;\n      &lt;th&gt;count&lt;/th&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n      &lt;td&gt;50.000000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;mean&lt;/th&gt;\n      &lt;td&gt;0.246000&lt;/td&gt;\n      &lt;td&gt;1.326000&lt;/td&gt;\n      &lt;td&gt;2.026000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;std&lt;/th&gt;\n      &lt;td&gt;0.105386&lt;/td&gt;\n      &lt;td&gt;0.197753&lt;/td&gt;\n      &lt;td&gt;0.274650&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;min&lt;/th&gt;\n      &lt;td&gt;0.100000&lt;/td&gt;\n      &lt;td&gt;1.000000&lt;/td&gt;\n      &lt;td&gt;1.400000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;25%&lt;/th&gt;\n      &lt;td&gt;0.200000&lt;/td&gt;\n      &lt;td&gt;1.200000&lt;/td&gt;\n      &lt;td&gt;1.800000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;50%&lt;/th&gt;\n      &lt;td&gt;0.200000&lt;/td&gt;\n      &lt;td&gt;1.300000&lt;/td&gt;\n      &lt;td&gt;2.000000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;75%&lt;/th&gt;\n      &lt;td&gt;0.300000&lt;/td&gt;\n      &lt;td&gt;1.500000&lt;/td&gt;\n      &lt;td&gt;2.300000&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;max&lt;/th&gt;\n      &lt;td&gt;0.600000&lt;/td&gt;\n      &lt;td&gt;1.800000&lt;/td&gt;\n      &lt;td&gt;2.500000&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`apply`\n```\n\n\n`apply` 메서드를 사용하면 `describe` 메서드처럼 하나의 그룹에 대해 하나의 대표값(스칼라 값)을 구하는 게 아니라 데이터프레임을 만들 수 있다. 예를 들어 다음처럼 각 붓꽃 종별로 가장 꽃잎 길이(petal length)가 큰 3개의 데이터를 뽑아낼 수도 있다.\n\n::: {#cell-52 .cell school_cell_uuid='0643604b8876431eb5f7b1d85f722fc3' execution_count=19}\n``` {.python .cell-code}\ndef top3_petal_length(df):\n    return df.sort_values(by=\"petal_length\", ascending=False)[:3]\n\niris.groupby(iris.species).apply(top3_petal_length)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;sepal_length&lt;/th&gt;\n      &lt;th&gt;sepal_width&lt;/th&gt;\n      &lt;th&gt;petal_length&lt;/th&gt;\n      &lt;th&gt;petal_width&lt;/th&gt;\n      &lt;th&gt;species&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;species&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;setosa&lt;/th&gt;\n      &lt;th&gt;24&lt;/th&gt;\n      &lt;td&gt;4.8&lt;/td&gt;\n      &lt;td&gt;3.4&lt;/td&gt;\n      &lt;td&gt;1.9&lt;/td&gt;\n      &lt;td&gt;0.2&lt;/td&gt;\n      &lt;td&gt;setosa&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;44&lt;/th&gt;\n      &lt;td&gt;5.1&lt;/td&gt;\n      &lt;td&gt;3.8&lt;/td&gt;\n      &lt;td&gt;1.9&lt;/td&gt;\n      &lt;td&gt;0.4&lt;/td&gt;\n      &lt;td&gt;setosa&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;23&lt;/th&gt;\n      &lt;td&gt;5.1&lt;/td&gt;\n      &lt;td&gt;3.3&lt;/td&gt;\n      &lt;td&gt;1.7&lt;/td&gt;\n      &lt;td&gt;0.5&lt;/td&gt;\n      &lt;td&gt;setosa&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;versicolor&lt;/th&gt;\n      &lt;th&gt;83&lt;/th&gt;\n      &lt;td&gt;6.0&lt;/td&gt;\n      &lt;td&gt;2.7&lt;/td&gt;\n      &lt;td&gt;5.1&lt;/td&gt;\n      &lt;td&gt;1.6&lt;/td&gt;\n      &lt;td&gt;versicolor&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;77&lt;/th&gt;\n      &lt;td&gt;6.7&lt;/td&gt;\n      &lt;td&gt;3.0&lt;/td&gt;\n      &lt;td&gt;5.0&lt;/td&gt;\n      &lt;td&gt;1.7&lt;/td&gt;\n      &lt;td&gt;versicolor&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;72&lt;/th&gt;\n      &lt;td&gt;6.3&lt;/td&gt;\n      &lt;td&gt;2.5&lt;/td&gt;\n      &lt;td&gt;4.9&lt;/td&gt;\n      &lt;td&gt;1.5&lt;/td&gt;\n      &lt;td&gt;versicolor&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"3\" valign=\"top\"&gt;virginica&lt;/th&gt;\n      &lt;th&gt;118&lt;/th&gt;\n      &lt;td&gt;7.7&lt;/td&gt;\n      &lt;td&gt;2.6&lt;/td&gt;\n      &lt;td&gt;6.9&lt;/td&gt;\n      &lt;td&gt;2.3&lt;/td&gt;\n      &lt;td&gt;virginica&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;117&lt;/th&gt;\n      &lt;td&gt;7.7&lt;/td&gt;\n      &lt;td&gt;3.8&lt;/td&gt;\n      &lt;td&gt;6.7&lt;/td&gt;\n      &lt;td&gt;2.2&lt;/td&gt;\n      &lt;td&gt;virginica&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;122&lt;/th&gt;\n      &lt;td&gt;7.7&lt;/td&gt;\n      &lt;td&gt;2.8&lt;/td&gt;\n      &lt;td&gt;6.7&lt;/td&gt;\n      &lt;td&gt;2.0&lt;/td&gt;\n      &lt;td&gt;virginica&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n\n```{margin}\n`transform`\n```\n\n\n`transform` 메서드는 그룹별 대표값을 만드는 것이 아니라 그룹별 계산을 통해 데이터프레임 자체를 변화시킨다. 따라서 만들어진 데이터프레임의 크기는 원래 데이터프레임과 같다. 예를 들어 다음처럼 각 붓꽃 꽃잎길이가 해당 종 내에서  대/중/소 어느 것에 해당되는지에 대한 데이터프레임을 만들 수도 있다.\n\n::: {#cell-55 .cell school_cell_uuid='de641b5d681545c5be5ce050eec6b6f1' execution_count=20}\n``` {.python .cell-code}\ndef q3cut(s):\n    return pd.qcut(s, 3, labels=[\"소\", \"중\", \"대\"]).astype(str)\n\n\niris[\"petal_length_class\"] = iris.groupby(iris.species).petal_length.transform(q3cut)\niris[[\"petal_length\", \"petal_length_class\"]].tail(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;petal_length&lt;/th&gt;\n      &lt;th&gt;petal_length_class&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;140&lt;/th&gt;\n      &lt;td&gt;5.6&lt;/td&gt;\n      &lt;td&gt;중&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;141&lt;/th&gt;\n      &lt;td&gt;5.1&lt;/td&gt;\n      &lt;td&gt;소&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;142&lt;/th&gt;\n      &lt;td&gt;5.1&lt;/td&gt;\n      &lt;td&gt;소&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;143&lt;/th&gt;\n      &lt;td&gt;5.9&lt;/td&gt;\n      &lt;td&gt;대&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;144&lt;/th&gt;\n      &lt;td&gt;5.7&lt;/td&gt;\n      &lt;td&gt;중&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;145&lt;/th&gt;\n      &lt;td&gt;5.2&lt;/td&gt;\n      &lt;td&gt;소&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;146&lt;/th&gt;\n      &lt;td&gt;5.0&lt;/td&gt;\n      &lt;td&gt;소&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;147&lt;/th&gt;\n      &lt;td&gt;5.2&lt;/td&gt;\n      &lt;td&gt;소&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;148&lt;/th&gt;\n      &lt;td&gt;5.4&lt;/td&gt;\n      &lt;td&gt;중&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;149&lt;/th&gt;\n      &lt;td&gt;5.1&lt;/td&gt;\n      &lt;td&gt;소&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 4.7.2\n\n붓꽃(iris) 데이터에서 붓꽃 종(species)별로 꽃잎길이(sepal_length), 꽃잎폭(sepal_width) 등의 평균을 구하라.\n만약 붓꽃 종(species)이 표시되지 않았을 때 이 수치들을 이용하여 붓꽃 종을 찾아낼 수 있을지 생각하라."
  },
  {
    "objectID": "04.07 피봇테이블과 그룹분석.html#pivot_table",
    "href": "04.07 피봇테이블과 그룹분석.html#pivot_table",
    "title": "4.7 피봇테이블과 그룹분석",
    "section": "pivot_table",
    "text": "pivot_table\n`pivot_table`\nPandas는 pivot 명령과 groupby 명령의 중간 성격을 가지는 pivot_table 명령도 제공한다.\npivot_table 명령은 groupby 명령처럼 그룹분석을 하지만 최종적으로는 pivot 명령처럼 피봇테이블을 만든다. 즉 groupby 명령의 결과에 unstack을 자동 적용하여 2차원적인 형태로 변형한다. 사용 방법은 다음과 같다.\n\npivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, margins_name='All')\n\ndata: 분석할 데이터프레임 (메서드일 때는 필요하지 않음)\nvalues: 분석할 데이터프레임에서 분석할 열\nindex: 행 인덱스로 들어갈 키 열 또는 키 열의 리스트\ncolumns: 열 인덱스로 들어갈 키 열 또는 키 열의 리스트\naggfunc: 분석 메서드\nfill_value: NaN 대체 값\nmargins: 모든 데이터를 분석한 결과를 오른쪽과 아래에 붙일지 여부\nmargins_name: 마진 열(행)의 이름\n\n\n만약 조건에 따른 데이터가 유일하게 선택되지 않으면 그룹연산을 하며 이 때 aggfunc 인수로 정의된 함수를 수행하여 대표값을 계산한다.\npivot_table를 메서드로 사용할 때는 객체 자체가 데이터가 되므로 data 인수가 필요하지 않다.\n예를 들어 위에서 만들었던 피봇테이블은 pivot_table 명령으로 다음과 같이 만들 수도 있다. 인수의 순서에 주의하라.\n\ndf1.pivot_table(\"인구\", \"도시\", \"연도\")\n\n\n\n\n\n\n\n연도\n2005\n2010\n2015\n\n\n도시\n\n\n\n\n\n\n\n부산\n3512547.0\n3393191.0\n3448737.0\n\n\n서울\n9762546.0\n9631482.0\n9904312.0\n\n\n인천\nNaN\n263203.0\n2890451.0\n\n\n\n\n\n\n\nmargins=True 인수를 주면 aggfunc로 주어진 분석 방법을 해당 열의 모든 데이터, 해당 행의 모든 데이터 그리고 전체 데이터에 대해 적용한 결과를 같이 보여준다. aggfunc가 주어지지 않았으면 평균을 계산한다.\n\ndf1.pivot_table(\"인구\", \"도시\", \"연도\", margins=True, margins_name=\"합계\")\n\n\n\n\n\n\n\n연도\n2005\n2010\n2015\n합계\n\n\n도시\n\n\n\n\n\n\n\n\n부산\n3512547.0\n3393191.0\n3448737.0\n3.451492e+06\n\n\n서울\n9762546.0\n9631482.0\n9904312.0\n9.766113e+06\n\n\n인천\nNaN\n263203.0\n2890451.0\n1.576827e+06\n\n\n합계\n6637546.5\n4429292.0\n5414500.0\n5.350809e+06\n\n\n\n\n\n\n\n이 결과에서 가장 오른쪽 합계 열의 첫번째 값 3451492은 모든 부산 인구 데이터의 평균, 두번째 값 9766113은 모든 서울 인구 데이터의 평균이다. 가장 아래의 합계 행의 첫번째 값은 2005년 데이터의 평균값, 두번째 값은 2010년 데이터의 평균값이다. 가장 오른쪽 아래의 값 5350809는 전체 데이터의 평균값이다. 다음 계산을 통해 이를 확인할 수 있다.\n\ndf1[\"인구\"].mean()\n\n5350808.625\n\n\n행 인덱스나 열 인덱스에 리스트를 넣으면 다중 인덱스 테이블을 만든다.\n\ndf1.pivot_table(\"인구\", index=[\"연도\", \"도시\"])\n\n\n\n\n\n\n\n\n\n인구\n\n\n연도\n도시\n\n\n\n\n\n2005\n부산\n3512547\n\n\n서울\n9762546\n\n\n2010\n부산\n3393191\n\n\n서울\n9631482\n\n\n인천\n263203\n\n\n2015\n부산\n3448737\n\n\n서울\n9904312\n\n\n인천\n2890451\n\n\n\n\n\n\n\n식당에서 식사 후 내는 팁(tip)과 관련된 데이터를 이용하여 좀더 구체적으로 그룹분석 방법을 살펴본다. 우선 Seaborn 패키지에 설치된 샘플 데이터를 로드한다. 이 데이터프레임에서 각각의 컬럼은 다음을 뜻한다.\n\ntotal_bill: 식사대금\ntip: 팁\nsex: 성별\nsmoker: 흡연/금연 여부\nday: 요일\ntime: 시간\nsize: 인원\n\n\ntips = sns.load_dataset(\"tips\")\ntips.tail()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n\n\n243\n18.78\n3.00\nFemale\nNo\nThur\nDinner\n2\n\n\n\n\n\n\n\n분석의 목표는 식사 대금 대비 팁의 비율이 어떤 경우에 가장 높아지지는 찾는 것이다. 우선 식사대금와 팁의 비율을 나타내는 tip_pct를 추가하자.\n\ntips['tip_pct'] = tips['tip'] / tips['total_bill']\ntips.tail()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\ntip_pct\n\n\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n0.203927\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n0.073584\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n0.088222\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n0.098204\n\n\n243\n18.78\n3.00\nFemale\nNo\nThur\nDinner\n2\n0.159744\n\n\n\n\n\n\n\n다음으로 각 열의 데이터에 대해 간단히 분포를 알아본다.\n\ntips.describe()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsize\ntip_pct\n\n\n\n\ncount\n244.000000\n244.000000\n244.000000\n244.000000\n\n\nmean\n19.785943\n2.998279\n2.569672\n0.160803\n\n\nstd\n8.902412\n1.383638\n0.951100\n0.061072\n\n\nmin\n3.070000\n1.000000\n1.000000\n0.035638\n\n\n25%\n13.347500\n2.000000\n2.000000\n0.129127\n\n\n50%\n17.795000\n2.900000\n2.000000\n0.154770\n\n\n75%\n24.127500\n3.562500\n3.000000\n0.191475\n\n\nmax\n50.810000\n10.000000\n6.000000\n0.710345\n\n\n\n\n\n\n\n우선 성별로 나누어 데이터 갯수를 세어본다.\n\ntips.groupby(\"sex\").count()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsmoker\nday\ntime\nsize\ntip_pct\n\n\nsex\n\n\n\n\n\n\n\n\n\n\n\nMale\n157\n157\n157\n157\n157\n157\n157\n\n\nFemale\n87\n87\n87\n87\n87\n87\n87\n\n\n\n\n\n\n\n데이터 갯수의 경우 NaN 데이터가 없다면 모두 같은 값이 나올 것이다. 이 때는 size 명령을 사용하면 더 간단히 표시된다. size 명령은 NaN이 있어도 상관하지 않는다.\n\ntips.groupby(\"sex\").size()\n\nsex\nMale      157\nFemale     87\ndtype: int64\n\n\n이번에는 성별과 흡연유무로 나누어 데이터의 갯수를 알아본다.\n\ntips.groupby([\"sex\", \"smoker\"]).size()\n\nsex     smoker\nMale    Yes       60\n        No        97\nFemale  Yes       33\n        No        54\ndtype: int64\n\n\n좀 더 보기 좋도록 피봇 데이블 형태로 바꿀 수도 있다.\n\ntips.pivot_table(\"tip_pct\", \"sex\", \"smoker\", aggfunc=\"count\", margins=True)\n\n\n\n\n\n\n\nsmoker\nYes\nNo\nAll\n\n\nsex\n\n\n\n\n\n\n\nMale\n60\n97\n157\n\n\nFemale\n33\n54\n87\n\n\nAll\n93\n151\n244\n\n\n\n\n\n\n\n이제 성별과 흡연 여부에 따른 평균 팁 비율을 살펴본다.\n\ntips.groupby(\"sex\")[[\"tip_pct\"]].mean()\n\n\n\n\n\n\n\n\ntip_pct\n\n\nsex\n\n\n\n\n\nMale\n0.157651\n\n\nFemale\n0.166491\n\n\n\n\n\n\n\n\ntips.groupby(\"smoker\")[[\"tip_pct\"]].mean()\n\n\n\n\n\n\n\n\ntip_pct\n\n\nsmoker\n\n\n\n\n\nYes\n0.163196\n\n\nNo\n0.159328\n\n\n\n\n\n\n\npivot_table 명령을 사용할 수도 있다.\n\ntips.pivot_table(\"tip_pct\", \"sex\")\n\n\n\n\n\n\n\n\ntip_pct\n\n\nsex\n\n\n\n\n\nMale\n0.157651\n\n\nFemale\n0.166491\n\n\n\n\n\n\n\n\ntips.pivot_table(\"tip_pct\", [\"sex\", \"smoker\"])\n\n\n\n\n\n\n\n\n\ntip_pct\n\n\nsex\nsmoker\n\n\n\n\n\nMale\nYes\n0.152771\n\n\nNo\n0.160669\n\n\nFemale\nYes\n0.182150\n\n\nNo\n0.156921\n\n\n\n\n\n\n\n\ntips.pivot_table(\"tip_pct\", \"sex\", \"smoker\")\n\n\n\n\n\n\n\nsmoker\nYes\nNo\n\n\nsex\n\n\n\n\n\n\nMale\n0.152771\n0.160669\n\n\nFemale\n0.182150\n0.156921\n\n\n\n\n\n\n\n여성 혹은 흡연자의 팁 비율이 높은 것을 볼 수 있다. 하지만 이 데이터에는 평균을 제외한 분산(variance) 등의 다른 통계값이 없으므로 describe 명령으로 여러가지 통계값을 한 번에 알아본다.\n\ntips.groupby(\"sex\")[[\"tip_pct\"]].describe()\n\n\n\n\n\n\n\n\ntip_pct\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nsex\n\n\n\n\n\n\n\n\n\n\n\n\nMale\n157.0\n0.157651\n0.064778\n0.035638\n0.121389\n0.153492\n0.186240\n0.710345\n\n\nFemale\n87.0\n0.166491\n0.053632\n0.056433\n0.140416\n0.155581\n0.194266\n0.416667\n\n\n\n\n\n\n\n\ntips.groupby(\"smoker\")[[\"tip_pct\"]].describe()\n\n\n\n\n\n\n\n\ntip_pct\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nsmoker\n\n\n\n\n\n\n\n\n\n\n\n\nYes\n93.0\n0.163196\n0.085119\n0.035638\n0.106771\n0.153846\n0.195059\n0.710345\n\n\nNo\n151.0\n0.159328\n0.039910\n0.056797\n0.136906\n0.155625\n0.185014\n0.291990\n\n\n\n\n\n\n\n\ntips.groupby([\"sex\", \"smoker\"])[[\"tip_pct\"]].describe()\n\n\n\n\n\n\n\n\n\ntip_pct\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nsex\nsmoker\n\n\n\n\n\n\n\n\n\n\n\n\nMale\nYes\n60.0\n0.152771\n0.090588\n0.035638\n0.101845\n0.141015\n0.191697\n0.710345\n\n\nNo\n97.0\n0.160669\n0.041849\n0.071804\n0.131810\n0.157604\n0.186220\n0.291990\n\n\nFemale\nYes\n33.0\n0.182150\n0.071595\n0.056433\n0.152439\n0.173913\n0.198216\n0.416667\n\n\nNo\n54.0\n0.156921\n0.036421\n0.056797\n0.139708\n0.149691\n0.181630\n0.252672\n\n\n\n\n\n\n\n```fmzogbgxczaq 연습 문제 4.7.3\n\n팁의 비율이 요일과 점심/저녁 여부, 인원수에 어떤 영향을 받는지 살펴본다.\n어떤 요인이 가장 크게 작용하는지 판단할 수 있는 방법이 있는가?\n\n\n이번에는 각 그룹에서 가장 많은 팁과 가장 적은 팁의 차이를 알아보자. 이 계산을 해 줄 수 있는 그룹연산 함수가 없으므로 함수를 직접 만들고 `agg` 메서드를 사용한다.\n\n::: {#cell-95 .cell school_cell_uuid='cf52875b459640fda0a098a3de31174d' execution_count=40}\n``` {.python .cell-code}\ndef peak_to_peak(x):\n    return x.max() - x.min()\n\n\ntips.groupby([\"sex\", \"smoker\"])[[\"tip\"]].agg(peak_to_peak)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;tip&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;sex&lt;/th&gt;\n      &lt;th&gt;smoker&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Male&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;9.00&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;7.75&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Female&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;5.50&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;4.20&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n만약 여러가지 그룹연산을 동시에 하고 싶다면 다음과 같이 리스트를 이용한다.\n\n::: {#cell-97 .cell school_cell_uuid='72767b4e40c7435b9b59e02b128cf3ad' execution_count=41}\n``` {.python .cell-code}\ntips.groupby([\"sex\", \"smoker\"]).agg([\"mean\", peak_to_peak])[[\"total_bill\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;total_bill&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;mean&lt;/th&gt;\n      &lt;th&gt;peak_to_peak&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;sex&lt;/th&gt;\n      &lt;th&gt;smoker&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Male&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;22.284500&lt;/td&gt;\n      &lt;td&gt;43.56&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;19.791237&lt;/td&gt;\n      &lt;td&gt;40.82&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Female&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;17.977879&lt;/td&gt;\n      &lt;td&gt;41.23&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;18.105185&lt;/td&gt;\n      &lt;td&gt;28.58&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n만약 데이터 열마다 다른 연산을 하고 싶다면 열 라벨과 연산 이름(또는 함수)를 딕셔너리로 넣는다.\n\n::: {#cell-99 .cell school_cell_uuid='d5fc79aac62c492cb97ded5e24cdee67' execution_count=42}\n``` {.python .cell-code}\ntips.groupby([\"sex\", \"smoker\"]).agg(\n    {'tip_pct': 'mean', 'total_bill': peak_to_peak})\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;tip_pct&lt;/th&gt;\n      &lt;th&gt;total_bill&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;sex&lt;/th&gt;\n      &lt;th&gt;smoker&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Male&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;0.152771&lt;/td&gt;\n      &lt;td&gt;43.56&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;0.160669&lt;/td&gt;\n      &lt;td&gt;40.82&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Female&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;0.182150&lt;/td&gt;\n      &lt;td&gt;41.23&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;0.156921&lt;/td&gt;\n      &lt;td&gt;28.58&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n다음은 `pivot_table` 명령으로 더 복잡한 분석을 한 예이다.\n\n::: {#cell-101 .cell school_cell_uuid='1a47c3400cfb4fa5a21510a9da3cdddb' execution_count=43}\n``` {.python .cell-code}\ntips.pivot_table(['tip_pct', 'size'], ['sex', 'day'], 'smoker')\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;size&lt;/th&gt;\n      &lt;th colspan=\"2\" halign=\"left\"&gt;tip_pct&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;smoker&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;th&gt;No&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;sex&lt;/th&gt;\n      &lt;th&gt;day&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"4\" valign=\"top\"&gt;Male&lt;/th&gt;\n      &lt;th&gt;Thur&lt;/th&gt;\n      &lt;td&gt;2.300000&lt;/td&gt;\n      &lt;td&gt;2.500000&lt;/td&gt;\n      &lt;td&gt;0.164417&lt;/td&gt;\n      &lt;td&gt;0.165706&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Fri&lt;/th&gt;\n      &lt;td&gt;2.125000&lt;/td&gt;\n      &lt;td&gt;2.000000&lt;/td&gt;\n      &lt;td&gt;0.144730&lt;/td&gt;\n      &lt;td&gt;0.138005&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Sat&lt;/th&gt;\n      &lt;td&gt;2.629630&lt;/td&gt;\n      &lt;td&gt;2.656250&lt;/td&gt;\n      &lt;td&gt;0.139067&lt;/td&gt;\n      &lt;td&gt;0.162132&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Sun&lt;/th&gt;\n      &lt;td&gt;2.600000&lt;/td&gt;\n      &lt;td&gt;2.883721&lt;/td&gt;\n      &lt;td&gt;0.173964&lt;/td&gt;\n      &lt;td&gt;0.158291&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"4\" valign=\"top\"&gt;Female&lt;/th&gt;\n      &lt;th&gt;Thur&lt;/th&gt;\n      &lt;td&gt;2.428571&lt;/td&gt;\n      &lt;td&gt;2.480000&lt;/td&gt;\n      &lt;td&gt;0.163073&lt;/td&gt;\n      &lt;td&gt;0.155971&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Fri&lt;/th&gt;\n      &lt;td&gt;2.000000&lt;/td&gt;\n      &lt;td&gt;2.500000&lt;/td&gt;\n      &lt;td&gt;0.209129&lt;/td&gt;\n      &lt;td&gt;0.165296&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Sat&lt;/th&gt;\n      &lt;td&gt;2.200000&lt;/td&gt;\n      &lt;td&gt;2.307692&lt;/td&gt;\n      &lt;td&gt;0.163817&lt;/td&gt;\n      &lt;td&gt;0.147993&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Sun&lt;/th&gt;\n      &lt;td&gt;2.500000&lt;/td&gt;\n      &lt;td&gt;3.071429&lt;/td&gt;\n      &lt;td&gt;0.237075&lt;/td&gt;\n      &lt;td&gt;0.165710&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n::: {#cell-102 .cell school_cell_uuid='6c586414bdf04cee8ff35255776fc778' execution_count=44}\n``` {.python .cell-code}\ntips.pivot_table('size', ['time', 'sex', 'smoker'], 'day',\n                 aggfunc='sum', fill_value=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n\n```{=html}\n&lt;div&gt;\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n&lt;/style&gt;\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;day&lt;/th&gt;\n      &lt;th&gt;Thur&lt;/th&gt;\n      &lt;th&gt;Fri&lt;/th&gt;\n      &lt;th&gt;Sat&lt;/th&gt;\n      &lt;th&gt;Sun&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;time&lt;/th&gt;\n      &lt;th&gt;sex&lt;/th&gt;\n      &lt;th&gt;smoker&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"4\" valign=\"top\"&gt;Lunch&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Male&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;23&lt;/td&gt;\n      &lt;td&gt;5&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;50&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Female&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;17&lt;/td&gt;\n      &lt;td&gt;6&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;60&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"4\" valign=\"top\"&gt;Dinner&lt;/th&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Male&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;12&lt;/td&gt;\n      &lt;td&gt;71&lt;/td&gt;\n      &lt;td&gt;39&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;85&lt;/td&gt;\n      &lt;td&gt;124&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"2\" valign=\"top\"&gt;Female&lt;/th&gt;\n      &lt;th&gt;Yes&lt;/th&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;8&lt;/td&gt;\n      &lt;td&gt;33&lt;/td&gt;\n      &lt;td&gt;10&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;No&lt;/th&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n      &lt;td&gt;30&lt;/td&gt;\n      &lt;td&gt;43&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n\n````{admonition} 연습 문제 4.7.4\n\n타이타닉 승객 데이터를 이용하여 다음 분석을 실시하라. 데이터는 다음과 같이 받을 수 있다.\n\n```\ntitanic = sns.load_dataset(\"titanic\")\n```\n\n1. `qcut` 명령으로 세 개의 나이 그룹을 만든다.\n2. 성별, 선실, 나이 그룹에 의한 생존율을 데이터프레임으로 계산한다. \n행에는 성별 및 나이 그룹에 대한 다중 인덱스를 사용하고 열에는 선실 인덱스를 사용한다.\n생존률은 해당 그룹의 생존 인원수를 전체 인원수로 나눈 값이다.\n3. 성별 및 선실에 의한 생존율을 피봇 데이터 형태로 만든다."
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "",
    "text": "Matplotlib는 기본적인 라인 플롯 이외에도 다양한 챠트/플롯 유형을 지원한다."
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html#바-차트",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html#바-차트",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "바 차트",
    "text": "바 차트\nx 데이터가 카테고리 값인 경우에는 bar 명령과 barh 명령으로 바 차트(bar chart) 시각화를 할 수 있다. 가로 방향으로 바 차트를 그리려면 barh 명령을 사용한다.\n자세한 내용은 다음 웹사이트를 참조한다.\n\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.bar\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.barh\n\n바 차트 작성시 주의점은 첫번째 인수인 left 가 x축에서 바(bar)의 왼쪽 변의 위치를 나타낸다는 점이다.\n\nimport matplotlib as mpl\nimport matplotlib.pylab as plt\n\ny = [2, 3, 1]\nx = np.arange(len(y))\nxlabel = ['가', '나', '다']\nplt.title(\"Bar Chart\")\nplt.bar(x, y)\nplt.xticks(x, xlabel)\nplt.yticks(sorted(y))\nplt.xlabel(\"가나다\")\nplt.ylabel(\"빈도 수\")\nplt.show()\n\n\n\n\n\n\n\n\nxerr 인수나 yerr 인수를 지정하면 에러 바(error bar)를 추가할 수 있다.\n다음 코드에서 alpha는 투명도를 지정한다. 0이면 완전 투명, 1이면 완전 불투명이다.\n\nnp.random.seed(0)\n\npeople = ['몽룡', '춘향', '방자', '향단']\ny_pos = np.arange(len(people))\nperformance = 3 + 10 * np.random.rand(len(people))\nerror = np.random.rand(len(people))\n\nplt.title(\"Barh Chart\")\nplt.barh(y_pos, performance, xerr=error, alpha=0.4)\nplt.yticks(y_pos, people)\nplt.xlabel('x 라벨')\nplt.show()"
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html#스템-플롯",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html#스템-플롯",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "스템 플롯",
    "text": "스템 플롯\n바 차트와 유사하지만 폭(width)이 없는 스템 플롯(stem plot)도 있다. 주로 이산 확률 함수나 자기상관관계(auto-correlation)를 묘사할 때 사용된다.\n\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.stem\n\n\nx = np.linspace(0.1, 2 * np.pi, 10)\nplt.title(\"Stem Plot\")\nplt.stem(x, np.cos(x), '-.')\nplt.show()"
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html#파이-차트",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html#파이-차트",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "파이 차트",
    "text": "파이 차트\n카테고리 별 값의 상대적인 비교를 해야 할 때는 pie 명령으로 파이 차트(pie chart)를 그릴 수 있다. 파이 차트를 그릴 때는 윈의 형태를 유지할 수 있도록 다음 명령을 실행해야 한다.\nplt.axis('equal')\n자세한 내용은 다음을 참조한다.\n\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.pie\n\n\nlabels = ['개구리', '돼지', '개', '통나무']\nsizes = [15, 30, 45, 10]\ncolors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']\nexplode = (0, 0.1, 0, 0)\nplt.title(\"Pie Chart\")\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()"
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html#히스토그램",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html#히스토그램",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "히스토그램",
    "text": "히스토그램\n히스토그램을 그리기 위한 hist 명령도 있다. hist 명령은 bins 인수로 데이터를 집계할 구간 정보를 받는다. 반환값으로 데이터 집계 결과를 반환한다.\n\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hist\n\n\nnp.random.seed(0)\nx = np.random.randn(1000)\nplt.title(\"Histogram\")\narrays, bins, patches = plt.hist(x, bins=10)\nplt.show()\n\n\n\n\n\n\n\n\n\narrays\n\narray([  9.,  20.,  70., 146., 217., 239., 160.,  86.,  38.,  15.])\n\n\n\nbins\n\narray([-3.04614305, -2.46559324, -1.88504342, -1.3044936 , -0.72394379,\n       -0.14339397,  0.43715585,  1.01770566,  1.59825548,  2.1788053 ,\n        2.75935511])"
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html#스캐터-플롯",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html#스캐터-플롯",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "스캐터 플롯",
    "text": "스캐터 플롯\n2차원 데이터 즉, 두 개의 실수 데이터 집합의 상관관계를 살펴보려면 scatter 명령으로 스캐터 플롯을 그린다. 스캐터 플롯의 점 하나의 위치는 데이터 하나의 x, y 값이다.\n\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.scatter\n\n\nnp.random.seed(0)\nX = np.random.normal(0, 1, 100)\nY = np.random.normal(0, 1, 100)\nplt.title(\"Scatter Plot\")\nplt.scatter(X, Y)\nplt.show()\n\n\n\n\n\n\n\n\n데이터가 2차원이 아니라 3차원 혹은 4차원인 경우에는 점 하나의 크기 혹은 색깔을 이용하여 다른 데이터 값을 나타낼 수도 있다. 이런 차트를 버블 차트(bubble chart)라고 한다. 크기는 s 인수로 색깔은 c 인수로 지정한다.\n\nN = 30\nnp.random.seed(0)\nx = np.random.rand(N)\ny1 = np.random.rand(N)\ny2 = np.random.rand(N)\ny3 = np.pi * (15 * np.random.rand(N))**2\nplt.title(\"Bubble Chart\")\nplt.scatter(x, y1, c=y2, s=y3)\nplt.show()"
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html#imshow",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html#imshow",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "Imshow",
    "text": "Imshow\n화상(image) 데이터처럼 행과 열을 가진 행렬 형태의 2차원 데이터는 imshow 명령을 써서 2차원 자료의 크기를 색깔로 표시하는 것이다.\n\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.imshow\n\n\nfrom sklearn.datasets import load_digits\ndigits = load_digits()\nX = digits.images[0]\nX\n\narray([[ 0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],\n       [ 0.,  0., 13., 15., 10., 15.,  5.,  0.],\n       [ 0.,  3., 15.,  2.,  0., 11.,  8.,  0.],\n       [ 0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],\n       [ 0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],\n       [ 0.,  4., 11.,  0.,  1., 12.,  7.,  0.],\n       [ 0.,  2., 14.,  5., 10., 12.,  0.,  0.],\n       [ 0.,  0.,  6., 13., 10.,  0.,  0.,  0.]])\n\n\n\nplt.title(\"mnist digits; 0\")\nplt.imshow(X, interpolation='nearest', cmap=plt.cm.bone_r)\nplt.xticks([])\nplt.yticks([])\nplt.grid(False)\nplt.subplots_adjust(left=0.35, right=0.65, bottom=0.35, top=0.65)\nplt.show()\n\n\n\n\n\n\n\n\n데이터 수치를 색으로 바꾸는 함수는 칼라맵(color map)이라고 한다. 칼라맵은 cmap 인수로 지정한다. 사용할 수 있는 칼라맵은 plt.cm의 속성으로 포함되어 있다. 아래에 일부 칼라맵을 표시하였다. 칼라맵은 문자열로 지정해도 된다. 칼라맵에 대한 자세한 내용은 다음 웹사이트를 참조한다. * https://matplotlib.org/tutorials/colors/colormaps.html\n\ndir(plt.cm)[:10]\n\n['Accent',\n 'Accent_r',\n 'Blues',\n 'Blues_r',\n 'BrBG',\n 'BrBG_r',\n 'BuGn',\n 'BuGn_r',\n 'BuPu',\n 'BuPu_r']\n\n\n\nfig, axes = plt.subplots(1, 4, figsize=(12, 3),\n                         subplot_kw={'xticks': [], 'yticks': []})\naxes[0].set_title(\"plt.cm.Blues\")\naxes[0].imshow(X, interpolation='nearest', cmap=plt.cm.Blues)\naxes[1].set_title(\"plt.cm.Blues_r\")\naxes[1].imshow(X, interpolation='nearest', cmap=plt.cm.Blues_r)\naxes[2].set_title(\"plt.BrBG\")\naxes[2].imshow(X, interpolation='nearest', cmap='BrBG')\naxes[3].set_title(\"plt.BrBG_r\")\naxes[3].imshow(X, interpolation='nearest', cmap='BrBG_r')\nplt.show()\n\n\n\n\n\n\n\n\nimshow 명령은 자료의 시각화를 돕기위해 다양한 2차원 인터폴레이션을 지원한다.\n\nmethods = [\n    None, 'none', 'nearest', 'bilinear', 'bicubic', 'spline16',\n    'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric',\n    'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos'\n]\nfig, axes = plt.subplots(3, 6, figsize=(12, 6),\n                         subplot_kw={'xticks': [], 'yticks': []})\nfor ax, interp_method in zip(axes.flat, methods):\n    ax.imshow(X, cmap=plt.cm.bone_r, interpolation=interp_method)\n    ax.set_title(interp_method)\nplt.show()"
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html#컨투어-플롯",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html#컨투어-플롯",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "컨투어 플롯",
    "text": "컨투어 플롯\n입력 변수가 x, y 두 개이고 출력 변수가 z 하나인 경우에는 3차원 자료가 된다. 3차원 자료를 시각화하는 방법은 명암이 아닌 등고선(contour)을 사용하는 방법이다. contour 혹은 contourf 명령을 사용한다. contour는 등고선만 표시하고 contourf는 색깔로 표시한다. 입력 변수 x, y는 그대로 사용할 수 없고 meshgrid 명령으로 그리드 포인트 행렬을 만들어야 한다. 더 자세한 내용은 다음 웹사이트를 참조한다.\n\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.contour\nhttp://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.contourf\n\n\ndef f(x, y):\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)\n\n\nn = 256\nx = np.linspace(-3, 3, n)\ny = np.linspace(-3, 3, n)\nXX, YY = np.meshgrid(x, y)\nZZ = f(XX, YY)\n\nplt.title(\"Contour plots\")\nplt.contourf(XX, YY, ZZ, alpha=.75, cmap='jet')\nplt.contour(XX, YY, ZZ, colors='black')\nplt.show()"
  },
  {
    "objectID": "05.02 맷플롯리브의 여러가지 플롯.html#d-서피스-플롯",
    "href": "05.02 맷플롯리브의 여러가지 플롯.html#d-서피스-플롯",
    "title": "Matplotlib의 여러가지 플롯",
    "section": "3D 서피스 플롯",
    "text": "3D 서피스 플롯\n3차원 플롯은 등고선 플롯과 달리 Axes3D라는 3차원 전용 axes를 생성하여 입체적으로 표시한다.\nplot_wireframe, plot_surface 명령을 사용한다.\n\nhttp://matplotlib.org/mpl_toolkits/mplot3d/api.html#mpl_toolkits.mplot3d.axes3d.Axes3D.plot_wireframe\nhttp://matplotlib.org/mpl_toolkits/mplot3d/api.html#mpl_toolkits.mplot3d.axes3d.Axes3D.plot_surface\n\n\nfrom mpl_toolkits.mplot3d import Axes3D\nX = np.arange(-4, 4, 0.25)\nY = np.arange(-4, 4, 0.25)\nXX, YY = np.meshgrid(X, Y)\nRR = np.sqrt(XX**2 + YY**2)\nZZ = np.sin(RR)\n\nfig = plt.figure()\nax = Axes3D(fig)\nax.set_title(\"3D Surface Plot\")\nax.plot_surface(XX, YY, ZZ, rstride=1, cstride=1, cmap='hot')\nplt.show()"
  },
  {
    "objectID": "05.04 시본을 사용한 데이터 분포 시각화.html",
    "href": "05.04 시본을 사용한 데이터 분포 시각화.html",
    "title": "Seaborn을 사용한 데이터 분포 시각화",
    "section": "",
    "text": "Seaborn은 Matplotlib을 기반으로 다양한 색상 테마와 통계용 차트 등의 기능을 추가한 시각화 패키지이다. 기본적인 시각화 기능은 Matplotlib 패키지에 의존하며 통계 기능은 Statsmodels 패키지에 의존한다. Seaborn에 대한 자세한 내용은 다음 웹사이트를 참조한다."
  },
  {
    "objectID": "05.04 시본을 사용한 데이터 분포 시각화.html#차원-분포-플롯",
    "href": "05.04 시본을 사용한 데이터 분포 시각화.html#차원-분포-플롯",
    "title": "Seaborn을 사용한 데이터 분포 시각화",
    "section": "1차원 분포 플롯",
    "text": "1차원 분포 플롯\n1차원 데이터는 실수 값이면 히스토그램과 같은 실수 분포 플롯으로 나타내고 카테고리 값이면 카운트 플롯으로 나타낸다.\n우선 연습을 위한 샘플 데이터를 로드한다.\n\niris = sns.load_dataset(\"iris\")    # 붓꽃 데이터\ntitanic = sns.load_dataset(\"titanic\")    # 타이타닉호 데이터\ntips = sns.load_dataset(\"tips\")    # 팁 데이터\nflights = sns.load_dataset(\"flights\")    # 여객운송 데이터\n\n\n1차원 실수 분포 플롯\n실수 분포 플롯은 자료의 분포를 묘사하기 위한 것으로 Matplotlib의 단순한 히스토그램과 달리 커널 밀도(kernel density) 및 러그(rug) 표시 기능 및 다차원 복합 분포 기능 등을 제공한다. 1차원 실수 분포 플롯 명령에는 rugplot, kdeplot, distplot이 있다.\n러그(rug) 플롯은 데이터 위치를 x축 위에 작은 선분(rug)으로 나타내어 실제 데이터들의 위치를 보여준다.\n\nrugplot: http://seaborn.pydata.org/generated/seaborn.rugplot.html\n\n\nx = iris.petal_length.values\n\nsns.rugplot(x)\nplt.title(\"Iris 데이터 중, 꽃잎의 길이에 대한 Rug Plot \")\nplt.show()\n\n\n\n\n\n\n\n\n커널 밀도(kernel density)는 커널이라는 함수를 겹치는 방법으로 히스토그램보다 부드러운 형태의 분포 곡선을 보여주는 방법이다.\n\nkdeplot: http://seaborn.pydata.org/generated/seaborn.kdeplot.html\n\n커널 밀도 추정에 대한 자세한 내용은 scikit-learn 패키지를 참조한다.\n\nhttp://scikit-learn.org/stable/modules/density.html\n\n\nsns.kdeplot(x)\nplt.title(\"Iris 데이터 중, 꽃잎의 길이에 대한 Kernel Density Plot\")\nplt.show()\n\n\n\n\n\n\n\n\nSeaborn의 distplot 명령은 러그와 커널 밀도 표시 기능이 있어서 Matplotlib의 hist 명령보다 많이 사용된다.\n\ndistplot: http://seaborn.pydata.org/generated/seaborn.distplot.html\n\n\nsns.distplot(x, kde=True, rug=True)\nplt.title(\"Iris 데이터 중, 꽃잎의 길이에 대한 Dist Plot\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n카운트 플롯\ncountplot 명령을 사용하면 각 카테고리 값별로 데이터가 얼마나 있는지 표시할 수 있다.\n\ncountplot: http://seaborn.pydata.org/generated/seaborn.countplot.html\n\ncountplot 명령은 데이터프레임에만 사용할 수 있다. 사용 방법은 다음과 같다.\ncountplot(x=\"column_name\", data=dataframe)\ndata 인수에는 대상이 되는 데이터프레임을, x 인수에는 데이터프레임의 열 이름 문자열을 넣는다.\n\nsns.countplot(x=\"class\", data=titanic)\nplt.title(\"타이타닉호의 각 클래스별, 승객 수\")\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.countplot(x=\"day\", data=tips)\nplt.title(\"요일별 팁을 준 횟수\")\nplt.show()"
  },
  {
    "objectID": "05.04 시본을 사용한 데이터 분포 시각화.html#다차원-데이터",
    "href": "05.04 시본을 사용한 데이터 분포 시각화.html#다차원-데이터",
    "title": "Seaborn을 사용한 데이터 분포 시각화",
    "section": "다차원 데이터",
    "text": "다차원 데이터\n데이터 변수가 여러개인 다차원 데이터는 데이터의 종류에 따라 다음과 같은 경우가 있을 수 있다.\n\n분석하고자 하는 데이터가 모두 실수 값인 경우\n분석하고자 하는 데이터가 모두 카테고리 값인 경우\n분석하고자 하는 데이터가 모두 실수 값과 카테고리 값이 섞여 있는 경우\n\n\n2차원 실수형 데이터\n만약 데이터가 2차원이고 모두 연속적인 실수값이라면 스캐터 플롯(scatter plot)을 사용하면 된다. 스캐터 플롯을 그리기 위해서는 Seaborn 패키지의 jointplot 명령을 사용한다. jointplot 명령은 스캐터 플롯뿐 아니라 차트의 가장자리(margin)에 각 변수의 히스토그램도 그린다.\n\njointplot: http://seaborn.pydata.org/generated/seaborn.jointplot.html\n\njointplot 명령도 데이터프레임에만 사용할 수 있다. 사용 방법은 다음과 같다.\njointplot(x=\"x_name\", y=\"y_name\", data=dataframe, kind='scatter')\ndata 인수에는 대상이 되는 데이터프레임을, x 인수에는 x 변수가 될 데이터프레임의 열 이름 문자열을, y 인수에는 y 변수가 될 데이터프레임의 열 이름 문자열을 넣는다. kind는 차트의 종류를 지정한다. kind='scatter'이면 스캐터 플롯이다.\n\nsns.jointplot(x=\"sepal_length\", y=\"sepal_width\", data=iris)\nplt.suptitle(\"꽃받침의 길이와 넓이의 Joint Plot\", y=1.02)\nplt.show()\n\n\n\n\n\n\n\n\nkind='kde'이면 커널 밀도 히스토그램을 그린다.\n\nsns.jointplot(x=\"sepal_length\", y=\"sepal_width\", data=iris, kind=\"kde\")\nplt.suptitle(\"꽃받침의 길이와 넓이의 Joint Plot 과 Kernel Density Plot\", y=1.02)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n다차원 실수형 데이터\n만약 3차원 이상의 데이터라면 seaborn 패키지의 pairplot 명령을 사용한다. pairplot은 데이터프레임을 인수로 받아 그리드(grid) 형태로 각 데이터 열의 조합에 대해 스캐터 플롯을 그린다. 같은 데이터가 만나는 대각선 영역에는 해당 데이터의 히스토그램을 그린다.\n\npairplot: http://seaborn.pydata.org/generated/seaborn.pairplot.html\n\n\nsns.pairplot(iris)\nplt.title(\"Iris Data의 Pair Plot\")\nplt.show()\n\n\n\n\n\n\n\n\n만약 카테고리형 데이터가 섞여 있는 경우에는 hue 인수에 카테고리 변수 이름을 지정하여 카테고리 값에 따라 색상을 다르게 할 수 있다.\n\nsns.pairplot(iris, hue=\"species\", markers=[\"o\", \"s\", \"D\"])\nplt.title(\"Iris Pair Plot, Hue로 꽃의 종을 시각화\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n2차원 카테고리 데이터\n만약 데이터가 2차원이고 모든 값이 카테고리 값이면 heatmap 명령을 사용한다.\n\nheatmap: http://seaborn.pydata.org/generated/seaborn.heatmap.html\n\n\ntitanic_size = titanic.pivot_table(\n    index=\"class\", columns=\"sex\", aggfunc=\"size\")\ntitanic_size\n\n\n\n\n\n\n\nsex\nfemale\nmale\n\n\nclass\n\n\n\n\n\n\nFirst\n94\n122\n\n\nSecond\n76\n108\n\n\nThird\n144\n347\n\n\n\n\n\n\n\n\nsns.heatmap(titanic_size, cmap=sns.light_palette(\n    \"gray\", as_cmap=True), annot=True, fmt=\"d\")\nplt.title(\"Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n2차원 복합 데이터\n만약 데이터가 2차원이고 실수 값, 카테고리 값이 섞여 있다면 기존의 플롯 이외에도 다음과 같은 분포 플롯들을 이용할 수 있다.\n\nbarplot\nboxplot\npointplot\nviolinplot\nstripplot\nswarmplot\n\nbarplot 은 카테고리 값에 따른 실수 값의 평균과 편차를 표시하는 기본적인 바 차트를 생성한다. 평균은 막대의 높이로, 편차는 에러바(error bar)로 표시한다.\n\nbarplot: http://seaborn.pydata.org/generated/seaborn.barplot.html\n\n\nsns.barplot(x=\"day\", y=\"total_bill\", data=tips)\nplt.title(\"요일 별, 전체 팁\")\nplt.show()\n\n\n\n\n\n\n\n\nboxplot 명령은 박스-휘스커 플롯(Box-Whisker Plot) 혹은 간단히 박스 플롯이라 부르는 차트를 그려준다. 박스 플롯은 박스와 박스 바깥의 선(whisker)으로 이루어진다.\n\nboxplot: http://seaborn.pydata.org/generated/seaborn.boxplot.html\n\n박스는 실수 값 분포에서 1사분위수(Q1)와 3사분위수(Q3)를 뜻하고 이 3사분위수와 1사분수의 차이(Q3 - Q1)를 IQR(interquartile range)라고 한다. 박스 내부의 가로선은 중앙값을 나타낸다. 박스 외부의 세로선은 1사분위 수보다 1.5 x IQR 만큼 낮은 값과 3사분위 수보다 1.5 x IQR 만큼 높은 값의 구간을 기준으로 그 구간의 내부에 있는 가장 큰 데이터와 가장 작은 데이터를 잇는 선분이다. 그 바깥의 점은 아웃라이어(outlier)라고 부르는데 일일히 점으로 표시한다.\n\nsns.boxplot(x=\"day\", y=\"total_bill\", data=tips)\nplt.title(\"요일 별 전체 팁의 Box Plot\")\nplt.show()\n\n\n\n\n\n\n\n\nboxplot이 중앙값, 표준 편차 등, 분포의 간략한 특성만 보여주는데 반해 violinplot, stripplot. swarmplot 등은 카테고리값에 따른 각 분포의 실제 데이터나 전체 형상을 보여준다는 장점이 있다.\nviolinplot은 세로 방향으로 커널 밀도 히스토그램을 그려주는데 왼쪽과 오른쪽이 대칭이 되도록 하여 바이올린처럼 보인다.\n\nviolinplot: http://seaborn.pydata.org/generated/seaborn.violinplot.html\n\n\nsns.violinplot(x=\"day\", y=\"total_bill\", data=tips)\nplt.title(\"요일 별 전체 팁의 Violin Plot\")\nplt.show()\n\n\n\n\n\n\n\n\nstripplot은 마치 스캐터 플롯처럼 모든 데이터를 점으로 그려준다. jitter=True를 설정하면 가로축상의 위치를 무작위로 바꾸어서 데이터의 수가 많을 경우에 겹치지 않도록 한다.\n\nstripplot: http://seaborn.pydata.org/generated/seaborn.stripplot.html\n\n\nnp.random.seed(0)\nsns.stripplot(x=\"day\", y=\"total_bill\", data=tips, jitter=True)\nplt.title(\"요일 별 전체 팁의 Strip Plot\")\nplt.show()\n\n\n\n\n\n\n\n\nswarmplot은 stripplot과 비슷하지만 데이터를 나타내는 점이 겹치지 않도록 옆으로 이동한다.\n\nswarmplot: http://seaborn.pydata.org/generated/seaborn.swarmplot.html\n\n\nsns.swarmplot(x=\"day\", y=\"total_bill\", data=tips)\nplt.title(\"요일 별 전체 팁의 Swarm Plot\")\nplt.show()"
  },
  {
    "objectID": "05.04 시본을 사용한 데이터 분포 시각화.html#다차원-복합-데이터",
    "href": "05.04 시본을 사용한 데이터 분포 시각화.html#다차원-복합-데이터",
    "title": "Seaborn을 사용한 데이터 분포 시각화",
    "section": "다차원 복합 데이터",
    "text": "다차원 복합 데이터\n지금까지 소개한 대부분의 명령어에는 2차원 이상의 고차원 데이터에 대해서도 분석할 수 있는 기능이 포함되어 있다.\n예를 들어 barplot, violinplot, boxplot 등 에서는 두 가지 카테고리 값에 의한 실수 값의 변화를 보기 위한 hue 인수를 제공한다. hue 인수에 카테고리 값을 가지는 변수의 이름을 지정하면 카테고리 값에 따라 다르게 시각화된다. hue 값이 시각화되는 방법은 플롯의 종류에 따라 다르다.\n\nsns.barplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips)\nplt.title(\"요일 별, 성별 전체 팁의 Histogram\")\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.boxplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips)\nplt.title(\"요일 별, 성별 전체 팁의 Box Plot\")\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.violinplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips)\nplt.title(\"요일 별, 성별 전체 팁의 Violin Plot\")\nplt.show()\n\n\n\n\n\n\n\n\n\nnp.random.seed(0)\nsns.stripplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips, jitter=True)\nplt.title(\"요일 별, 성별 전체 팁의 Strip Plot\")\nplt.legend(loc=1)\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.swarmplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips)\nplt.title(\"요일 별, 성별 전체 팁의 Swarm Plot\")\nplt.legend(loc=1)\nplt.show()\n\n\n\n\n\n\n\n\nstripplot, violinplot, swarmplot 등 에서는 split 또는 dodge 옵션으로 시각화 방법을 변경할 수도 있다.\n\nsns.violinplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips, split=True)\nplt.title(\"요일 별, 성별 전체 팁의 Violin Plot, Split=True\")\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.stripplot(x=\"day\", y=\"total_bill\", hue=\"sex\",\n              data=tips, jitter=True, dodge=True)\nplt.title(\"요일 별, 성별 전체 팁의 Strip Plot, Split=True\")\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.swarmplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips, dodge=True)\nplt.title(\"요일 별, 성별 전체 팁의 Swarm Plot, Split=True\")\nplt.show()\n\n\n\n\n\n\n\n\nheatmap을 이용해도 두 개의 카테고리 값에 의한 실수 값 변화를 볼 수 있다.\n\nheatmap: http://seaborn.pydata.org/generated/seaborn.heatmap.html\n\n\nflights_passengers = flights.pivot(\"month\", \"year\", \"passengers\")\nplt.title(\"연도, 월 별 승객수에 대한 Heatmap\")\nsns.heatmap(flights_passengers, annot=True, fmt=\"d\", linewidths=1)\nplt.show()"
  },
  {
    "objectID": "05.04 시본을 사용한 데이터 분포 시각화.html#catplot",
    "href": "05.04 시본을 사용한 데이터 분포 시각화.html#catplot",
    "title": "Seaborn을 사용한 데이터 분포 시각화",
    "section": "catplot",
    "text": "catplot\ncatplot은 색상(hue)과 행(row) 등을 동시에 사용하여 3 개 이상의 카테고리 값에 의한 분포 변화를 보여준다.\n\ncatplot: http://seaborn.pydata.org/generated/seaborn.factorplot.html\n\n\ndata = titanic[titanic.survived.notnull()]\nsns.catplot(x=\"age\", y=\"sex\", hue=\"survived\", row=\"class\", data=data,\n            kind=\"violin\", split=True, height=2, aspect=4)\nplt.title(\"각 클래스의 성별 생존자 수의 Catplot\")\nplt.show()"
  },
  {
    "objectID": "05.04 시본을 사용한 데이터 분포 시각화.html#기타",
    "href": "05.04 시본을 사용한 데이터 분포 시각화.html#기타",
    "title": "Seaborn을 사용한 데이터 분포 시각화",
    "section": "기타",
    "text": "기타\n시각화 효과를 높이기 위해 여러 종류의 차트를 겹쳐서 표시할 수도 있다.\n\nplt.title(\"Boxplot과 Strip Plot로 표현한, 요일 별 팁\")\nsns.boxplot(x=\"tip\", y=\"day\", data=tips, whis=np.inf)\nsns.stripplot(x=\"tip\", y=\"day\", data=tips, jitter=True, color=\"0.4\")\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.title(\"Violin plot과 Swarm Plot로 표현한, 요일 별 팁\")\nsns.violinplot(x=\"day\", y=\"total_bill\", data=tips, inner=None)\nsns.swarmplot(x=\"day\", y=\"total_bill\", data=tips, color=\"0.9\")\nplt.show()"
  },
  {
    "objectID": "05.04 시본을 사용한 데이터 분포 시각화.html#스타일",
    "href": "05.04 시본을 사용한 데이터 분포 시각화.html#스타일",
    "title": "Seaborn을 사용한 데이터 분포 시각화",
    "section": "스타일",
    "text": "스타일\nSeaborn을 임포트하면 색상 등을 Matplotlib에서 제공하는 기본 스타일이 아닌 Seaborn에서 지정한 기본 스타일로 바꾼다. 따라서 동일한 Matplotlib 명령을 수행해도 Seaborn을 임포트 한 것과 하지 않은 플롯은 모양이 다르다. 자세한 내용은 다음 문서를 참조한다.\n\nhttp://seaborn.pydata.org/tutorial/aesthetics.html\n\nset 명령으로 색상, 틱 스타일 등 전반적인 플롯 스타일을 Seaborn 기본 스타일로 바꾼다. set_style 명령은 틱 스타일만 바꿀 수 있다. darkgrid, whitegrid, dark, white, 그리고 ticks 스타일을 제공한다.\n\ndef sinplot(flip=1):\n    x = np.linspace(0, 14, 100)\n    for i in range(1, 7):\n        plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\n\n\nsns.set_style(\"ticks\")\nsinplot()\n\n\n\n\n\n\n\n\n\nsns.set_style(\"darkgrid\")\nsinplot()\n\n\n\n\n\n\n\n\n\nsns.set_style(\"whitegrid\")\nsinplot()"
  }
]